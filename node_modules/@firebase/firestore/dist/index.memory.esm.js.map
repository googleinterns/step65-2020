{"version":3,"file":"index.memory.esm.js","sources":["../src/util/log.ts","../src/platform/browser/format_json.ts","../src/util/assert.ts","../src/platform/browser/random_bytes.ts","../src/util/misc.ts","../src/core/database_info.ts","../src/util/obj.ts","../src/util/obj_map.ts","../src/util/error.ts","../src/api/timestamp.ts","../src/core/snapshot_version.ts","../src/model/path.ts","../src/model/document_key.ts","../src/util/types.ts","../src/core/target.ts","../src/core/query.ts","../src/util/byte_string.ts","../src/platform/browser/base64.ts","../src/remote/rpc_error.ts","../src/local/target_data.ts","../src/remote/existence_filter.ts","../src/util/sorted_map.ts","../src/util/sorted_set.ts","../src/model/collections.ts","../src/model/document_set.ts","../src/core/view_snapshot.ts","../src/remote/remote_event.ts","../src/remote/watch_change.ts","../src/model/server_timestamps.ts","../src/model/values.ts","../src/remote/serializer.ts","../src/model/transform_operation.ts","../src/model/mutation.ts","../src/model/object_value.ts","../src/model/document.ts","../lite/src/api/util.ts","../src/model/mutation_batch.ts","../src/local/persistence_promise.ts","../src/local/local_documents_view.ts","../src/local/local_view_changes.ts","../src/core/listen_sequence.ts","../src/util/promise.ts","../src/remote/backoff.ts","../src/local/memory_index_manager.ts","../src/core/target_id_generator.ts","../src/local/simple_db.ts","../src/platform/browser/dom.ts","../src/util/async_queue.ts","../src/local/lru_garbage_collector.ts","../src/local/local_store.ts","../src/local/persistence.ts","../src/local/reference_set.ts","../src/util/input_validation.ts","../src/api/blob.ts","../src/api/field_path.ts","../src/api/field_value.ts","../src/api/geo_point.ts","../src/platform/browser/serializer.ts","../src/api/user_data_reader.ts","../src/auth/user.ts","../src/api/credentials.ts","../src/remote/persistent_stream.ts","../src/remote/datastore.ts","../src/core/transaction.ts","../src/remote/online_state_tracker.ts","../src/remote/remote_store.ts","../src/local/shared_client_state.ts","../src/core/view.ts","../src/core/transaction_runner.ts","../src/core/sync_engine.ts","../src/core/event_manager.ts","../src/local/index_free_query_engine.ts","../src/local/memory_mutation_queue.ts","../src/local/memory_remote_document_cache.ts","../src/local/remote_document_change_buffer.ts","../src/local/memory_target_cache.ts","../src/local/memory_persistence.ts","../src/remote/stream_bridge.ts","../src/platform/browser/webchannel_connection.ts","../src/platform/browser/connectivity_monitor.ts","../src/remote/connectivity_monitor_noop.ts","../src/core/component_provider.ts","../src/platform/browser/connection.ts","../src/core/firestore_client.ts","../src/util/async_observer.ts","../src/api/observer.ts","../src/api/user_data_writer.ts","../src/api/database.ts","../src/config.ts","../index.memory.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel, LogLevelString } from '@firebase/logger';\nimport { SDK_VERSION } from '../core/version';\nimport { formatJSON } from '../platform/format_json';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function setLogLevel(newLevel: LogLevelString | LogLevel): void {\n  logClient.setLogLevel(newLevel);\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logWarn(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Formats an object as a JSON string, suitable for logging. */\nexport function formatJSON(value: unknown): string {\n  return JSON.stringify(value);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nexport function debugCast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  debugAssert(\n    obj instanceof constructor,\n    `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n  );\n  return obj as T;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../../util/assert';\n\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nexport function randomBytes(nBytes: number): Uint8Array {\n  debugAssert(nBytes >= 0, `Expecting non-negative nBytes, got: ${nBytes}`);\n\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  const crypto =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof self !== 'undefined' && (self.crypto || (self as any)['msCrypto']);\n  const bytes = new Uint8Array(nBytes);\n  if (crypto) {\n    crypto.getRandomValues(bytes);\n  } else {\n    // Falls back to Math.random\n    for (let i = 0; i < nBytes; i++) {\n      bytes[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  return bytes;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\nimport { randomBytes } from '../platform/random_bytes';\n\nexport type EventHandler<E> = (value: E) => void;\nexport interface Indexable {\n  [k: string]: unknown;\n}\n\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    // The largest byte value that is a multiple of `char.length`.\n    const maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    debugAssert(\n      0 < maxMultiple && maxMultiple < 256,\n      `Expect maxMultiple to be (0, 256), but got ${maxMultiple}`\n    );\n\n    let autoId = '';\n    const targetLength = 20;\n    while (autoId.length < targetLength) {\n      const bytes = randomBytes(40);\n      for (let i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n    debugAssert(autoId.length === targetLength, 'Invalid auto ID: ' + autoId);\n\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface Equatable<T> {\n  isEqual(other: T): boolean;\n}\n\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals<T>(\n  left: T[],\n  right: T[],\n  comparator: (l: T, r: T) => boolean\n): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   * @param forceLongPolling Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n}\n\nexport function objectSize<V>(obj: object): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function isEmpty<V>(obj: Dict<V>): boolean {\n  debugAssert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { forEach, isEmpty } from './obj';\n\ntype Entry<K, V> = [K, V];\n\n/**\n * A map implementation that uses objects as keys. Objects must have an\n * associated equals function and must be immutable. Entries in the map are\n * stored together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nexport class ObjectMap<KeyType, ValueType> {\n  /**\n   * The inner map for a key -> value pair. Due to the possibility of\n   * collisions we keep a list of entries that we do a linear search through\n   * to find an actual match. Note that collisions should be rare, so we still\n   * expect near constant time lookups in practice.\n   */\n  private inner: {\n    [canonicalId: string]: Array<Entry<KeyType, ValueType>>;\n  } = {};\n\n  constructor(\n    private mapKeyFn: (key: KeyType) => string,\n    private equalsFn: (l: KeyType, r: KeyType) => boolean\n  ) {}\n\n  /** Get a value for this key, or undefined if it does not exist. */\n  get(key: KeyType): ValueType | undefined {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return undefined;\n    }\n    for (const [otherKey, value] of matches) {\n      if (this.equalsFn(otherKey, key)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  has(key: KeyType): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  /** Put this key and value in the map. */\n  set(key: KeyType, value: ValueType): void {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      return;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        matches[i] = [key, value];\n        return;\n      }\n    }\n    matches.push([key, value]);\n  }\n\n  /**\n   * Remove this key from the map. Returns a boolean if anything was deleted.\n   */\n  delete(key: KeyType): boolean {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return false;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  forEach(fn: (key: KeyType, val: ValueType) => void): void {\n    forEach(this.inner, (_, entries) => {\n      for (const [k, v] of entries) {\n        fn(k, v);\n      }\n    });\n  }\n\n  isEmpty(): boolean {\n    return isEmpty(this.inner);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = firestore.FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as Code,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as Code,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as Code,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as Code,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as Code,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as Code,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as Code,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as Code,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as Code,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as Code,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as Code,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as Code,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as Code,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as Code,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as Code,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as Code,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as Code\n};\n\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nexport class FirestoreError extends Error implements firestore.FirestoreError {\n  name = 'FirebaseError';\n  stack?: string;\n\n  constructor(readonly code: Code, readonly message: string) {\n    super(message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport class Timestamp {\n  static now(): Timestamp {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanos);\n  }\n\n  constructor(readonly seconds: number, readonly nanoseconds: number) {\n    if (nanoseconds < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n  }\n\n  toDate(): Date {\n    return new Date(this.toMillis());\n  }\n\n  toMillis(): number {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  _compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  isEqual(other: Timestamp): boolean {\n    return (\n      other.seconds === this.seconds && other.nanoseconds === this.nanoseconds\n    );\n  }\n\n  toString(): string {\n    return (\n      'Timestamp(seconds=' +\n      this.seconds +\n      ', nanoseconds=' +\n      this.nanoseconds +\n      ')'\n    );\n  }\n\n  valueOf(): string {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static min(): SnapshotVersion {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n\n  isEqual(other: SnapshotVersion): boolean {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string.\n   */\n  static fromString(path: string): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    if (path.indexOf('//') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid path (${path}). Paths must not contain // in them.`\n      );\n    }\n\n    // We may still have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    const segments = path.split('/').filter(segment => segment.length > 0);\n\n    return new ResourcePath(segments);\n  }\n\n  static emptyPath(): ResourcePath {\n    return new ResourcePath([]);\n  }\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/** A dot-separated path for navigating sub-objects within a document. */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static emptyPath(): FieldPath {\n    return new FieldPath([]);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An Object whose keys and values are strings.\nexport interface StringMap {\n  [key: string]: string;\n}\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/** Returns whether the value represents -0. */\nexport function isNegativeZero(value: number): boolean {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === -0 && 1 / value === 1 / -0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: unknown): boolean {\n  return (\n    typeof value === 'number' &&\n    Number.isInteger(value) &&\n    !isNegativeZero(value) &&\n    value <= Number.MAX_SAFE_INTEGER &&\n    value >= Number.MIN_SAFE_INTEGER\n  );\n}\n\n/** The subset of the browser's Window interface used by the SDK. */\nexport interface WindowLike {\n  readonly localStorage: Storage;\n  readonly indexedDB: IDBFactory | null;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n\n/** The subset of the browser's Document interface used by the SDK. */\nexport interface DocumentLike {\n  readonly visibilityState: VisibilityState;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { isNullOrUndefined } from '../util/types';\nimport {\n  Bound,\n  boundEquals,\n  canonifyBound,\n  canonifyFilter,\n  filterEquals,\n  stringifyFilter,\n  OrderBy,\n  orderByEquals,\n  stringifyOrderBy,\n  canonifyOrderBy,\n  Filter\n} from './query';\nimport { debugCast } from '../util/assert';\n\n/**\n * A Target represents the WatchTarget representation of a Query, which is used\n * by the LocalStore and the RemoteStore to keep track of and to execute\n * backend queries. While a Query can represent multiple Targets, each Targets\n * maps to a single WatchTarget in RemoteStore and a single TargetData entry\n * in persistence.\n */\nexport interface Target {\n  readonly path: ResourcePath;\n  readonly collectionGroup: string | null;\n  readonly orderBy: OrderBy[];\n  readonly filters: Filter[];\n  readonly limit: number | null;\n  readonly startAt: Bound | null;\n  readonly endAt: Bound | null;\n}\n\n// Visible for testing\nexport class TargetImpl implements Target {\n  memoizedCanonicalId: string | null = null;\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly orderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {}\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nexport function newTarget(\n  path: ResourcePath,\n  collectionGroup: string | null = null,\n  orderBy: OrderBy[] = [],\n  filters: Filter[] = [],\n  limit: number | null = null,\n  startAt: Bound | null = null,\n  endAt: Bound | null = null\n): Target {\n  return new TargetImpl(\n    path,\n    collectionGroup,\n    orderBy,\n    filters,\n    limit,\n    startAt,\n    endAt\n  );\n}\n\nexport function canonifyTarget(target: Target): string {\n  const targetImpl = debugCast(target, TargetImpl);\n\n  if (targetImpl.memoizedCanonicalId === null) {\n    let canonicalId = targetImpl.path.canonicalString();\n    if (targetImpl.collectionGroup !== null) {\n      canonicalId += '|cg:' + targetImpl.collectionGroup;\n    }\n    canonicalId += '|f:';\n    canonicalId += targetImpl.filters.map(f => canonifyFilter(f)).join(',');\n    canonicalId += '|ob:';\n    canonicalId += targetImpl.orderBy.map(o => canonifyOrderBy(o)).join(',');\n\n    if (!isNullOrUndefined(targetImpl.limit)) {\n      canonicalId += '|l:';\n      canonicalId += targetImpl.limit!;\n    }\n    if (targetImpl.startAt) {\n      canonicalId += '|lb:';\n      canonicalId += canonifyBound(targetImpl.startAt);\n    }\n    if (targetImpl.endAt) {\n      canonicalId += '|ub:';\n      canonicalId += canonifyBound(targetImpl.endAt);\n    }\n    targetImpl.memoizedCanonicalId = canonicalId;\n  }\n  return targetImpl.memoizedCanonicalId;\n}\n\nexport function stringifyTarget(target: Target): string {\n  let str = target.path.canonicalString();\n  if (target.collectionGroup !== null) {\n    str += ' collectionGroup=' + target.collectionGroup;\n  }\n  if (target.filters.length > 0) {\n    str += `, filters: [${target.filters\n      .map(f => stringifyFilter(f))\n      .join(', ')}]`;\n  }\n  if (!isNullOrUndefined(target.limit)) {\n    str += ', limit: ' + target.limit;\n  }\n  if (target.orderBy.length > 0) {\n    str += `, orderBy: [${target.orderBy\n      .map(o => stringifyOrderBy(o))\n      .join(', ')}]`;\n  }\n  if (target.startAt) {\n    str += ', startAt: ' + canonifyBound(target.startAt);\n  }\n  if (target.endAt) {\n    str += ', endAt: ' + canonifyBound(target.endAt);\n  }\n  return `Target(${str})`;\n}\n\nexport function targetEquals(left: Target, right: Target): boolean {\n  if (left.limit !== right.limit) {\n    return false;\n  }\n\n  if (left.orderBy.length !== right.orderBy.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.orderBy.length; i++) {\n    if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\n      return false;\n    }\n  }\n\n  if (left.filters.length !== right.filters.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.filters.length; i++) {\n    if (!filterEquals(left.filters[i], right.filters[i])) {\n      return false;\n    }\n  }\n\n  if (left.collectionGroup !== right.collectionGroup) {\n    return false;\n  }\n\n  if (!left.path.isEqual(right.path)) {\n    return false;\n  }\n\n  if (!boundEquals(left.startAt, right.startAt)) {\n    return false;\n  }\n\n  return boundEquals(left.endAt, right.endAt);\n}\n\nexport function isDocumentTarget(target: Target): boolean {\n  return (\n    DocumentKey.isDocumentKey(target.path) &&\n    target.collectionGroup === null &&\n    target.filters.length === 0\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { compareDocumentsByField, Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  arrayValueContains,\n  canonicalId,\n  isArray,\n  isNanValue,\n  isNullValue,\n  isReferenceValue,\n  typeOrder,\n  valueCompare,\n  valueEquals\n} from '../model/values';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nimport {\n  canonifyTarget,\n  newTarget,\n  stringifyTarget,\n  Target,\n  targetEquals\n} from './target';\nimport { cast } from '../../lite/src/api/util';\n\nexport const enum LimitType {\n  First = 'F',\n  Last = 'L'\n}\n\n/**\n * The Query interface defines all external properties of a query.\n *\n * QueryImpl implements this interface to provide memoization for `queryOrderBy`\n * and `queryToTarget`.\n */\nexport interface Query {\n  readonly path: ResourcePath;\n  readonly collectionGroup: string | null;\n  readonly explicitOrderBy: OrderBy[];\n  readonly filters: Filter[];\n  readonly limit: number | null;\n  readonly limitType: LimitType;\n  readonly startAt: Bound | null;\n  readonly endAt: Bound | null;\n\n  hasLimitToFirst(): boolean;\n  hasLimitToLast(): boolean;\n  getFirstOrderByField(): FieldPath | null;\n  getInequalityFilterField(): FieldPath | null;\n  asCollectionQueryAtPath(path: ResourcePath): Query;\n\n  /**\n   * Returns true if this query does not specify any query constraints that\n   * could remove results.\n   */\n  matchesAllDocuments(): boolean;\n\n  // Checks if any of the provided Operators are included in the query and\n  // returns the first one that is, or null if none are.\n  findFilterOperator(operators: Operator[]): Operator | null;\n}\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nexport class QueryImpl implements Query {\n  memoizedOrderBy: OrderBy[] | null = null;\n\n  // The corresponding `Target` of this `Query` instance.\n  memoizedTarget: Target | null = null;\n\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly limitType: LimitType = LimitType.First,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      debugAssert(\n        this.startAt.position.length <= queryOrderBy(this).length,\n        'Bound is longer than orderBy'\n      );\n    }\n    if (this.endAt) {\n      debugAssert(\n        this.endAt.position.length <= queryOrderBy(this).length,\n        'Bound is longer than orderBy'\n      );\n    }\n  }\n\n  /**\n   * Helper to convert a collection group query into a collection query at a\n   * specific path. This is used when executing collection group queries, since\n   * we have to split the query into a set of collection queries at multiple\n   * paths.\n   */\n  asCollectionQueryAtPath(path: ResourcePath): Query {\n    return new QueryImpl(\n      path,\n      /*collectionGroup=*/ null,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  matchesAllDocuments(): boolean {\n    return (\n      this.filters.length === 0 &&\n      this.limit === null &&\n      this.startAt == null &&\n      this.endAt == null &&\n      (this.explicitOrderBy.length === 0 ||\n        (this.explicitOrderBy.length === 1 &&\n          this.explicitOrderBy[0].field.isKeyField()))\n    );\n  }\n\n  hasLimitToFirst(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.First;\n  }\n\n  hasLimitToLast(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.Last;\n  }\n\n  getFirstOrderByField(): FieldPath | null {\n    return this.explicitOrderBy.length > 0\n      ? this.explicitOrderBy[0].field\n      : null;\n  }\n\n  getInequalityFilterField(): FieldPath | null {\n    for (const filter of this.filters) {\n      debugAssert(\n        filter instanceof FieldFilter,\n        'Only FieldFilters are supported'\n      );\n      if (filter.isInequality()) {\n        return filter.field;\n      }\n    }\n    return null;\n  }\n\n  findFilterOperator(operators: Operator[]): Operator | null {\n    for (const filter of this.filters) {\n      debugAssert(\n        filter instanceof FieldFilter,\n        'Only FieldFilters are supported'\n      );\n      if (operators.indexOf(filter.op) >= 0) {\n        return filter.op;\n      }\n    }\n    return null;\n  }\n}\n\n/** Creates a new Query instance with the options provided. */\nexport function newQuery(\n  path: ResourcePath,\n  collectionGroup: string | null,\n  explicitOrderBy: OrderBy[],\n  filters: Filter[],\n  limit: number | null,\n  limitType: LimitType,\n  startAt: Bound | null,\n  endAt: Bound | null\n): Query {\n  return new QueryImpl(\n    path,\n    collectionGroup,\n    explicitOrderBy,\n    filters,\n    limit,\n    limitType,\n    startAt,\n    endAt\n  );\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */\nexport function newQueryForPath(path: ResourcePath): Query {\n  return new QueryImpl(path);\n}\n\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\nexport function newQueryForCollectionGroup(collectionId: string): Query {\n  return new QueryImpl(ResourcePath.emptyPath(), collectionId);\n}\n\n/**\n * Returns whether the query matches a single document by path (rather than a\n * collection).\n */\nexport function isDocumentQuery(query: Query): boolean {\n  return (\n    DocumentKey.isDocumentKey(query.path) &&\n    query.collectionGroup === null &&\n    query.filters.length === 0\n  );\n}\n\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nexport function isCollectionGroupQuery(query: Query): boolean {\n  return query.collectionGroup !== null;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */\nexport function queryOrderBy(query: Query): OrderBy[] {\n  const queryImpl = cast(query, QueryImpl);\n  if (queryImpl.memoizedOrderBy === null) {\n    queryImpl.memoizedOrderBy = [];\n\n    const inequalityField = queryImpl.getInequalityFilterField();\n    const firstOrderByField = queryImpl.getFirstOrderByField();\n    if (inequalityField !== null && firstOrderByField === null) {\n      // In order to implicitly add key ordering, we must also add the\n      // inequality filter field for it to be a valid query.\n      // Note that the default inequality field and key ordering is ascending.\n      if (!inequalityField.isKeyField()) {\n        queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));\n      }\n      queryImpl.memoizedOrderBy.push(\n        new OrderBy(FieldPath.keyField(), Direction.ASCENDING)\n      );\n    } else {\n      debugAssert(\n        inequalityField === null ||\n          (firstOrderByField !== null &&\n            inequalityField.isEqual(firstOrderByField)),\n        'First orderBy should match inequality field.'\n      );\n      let foundKeyOrdering = false;\n      for (const orderBy of queryImpl.explicitOrderBy) {\n        queryImpl.memoizedOrderBy.push(orderBy);\n        if (orderBy.field.isKeyField()) {\n          foundKeyOrdering = true;\n        }\n      }\n      if (!foundKeyOrdering) {\n        // The order of the implicit key ordering always matches the last\n        // explicit order by\n        const lastDirection =\n          queryImpl.explicitOrderBy.length > 0\n            ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1]\n                .dir\n            : Direction.ASCENDING;\n        queryImpl.memoizedOrderBy.push(\n          new OrderBy(FieldPath.keyField(), lastDirection)\n        );\n      }\n    }\n  }\n  return queryImpl.memoizedOrderBy;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */\nexport function queryToTarget(query: Query): Target {\n  const queryImpl = cast(query, QueryImpl);\n  if (!queryImpl.memoizedTarget) {\n    if (queryImpl.limitType === LimitType.First) {\n      queryImpl.memoizedTarget = newTarget(\n        queryImpl.path,\n        queryImpl.collectionGroup,\n        queryOrderBy(queryImpl),\n        queryImpl.filters,\n        queryImpl.limit,\n        queryImpl.startAt,\n        queryImpl.endAt\n      );\n    } else {\n      // Flip the orderBy directions since we want the last results\n      const orderBys = [] as OrderBy[];\n      for (const orderBy of queryOrderBy(queryImpl)) {\n        const dir =\n          orderBy.dir === Direction.DESCENDING\n            ? Direction.ASCENDING\n            : Direction.DESCENDING;\n        orderBys.push(new OrderBy(orderBy.field, dir));\n      }\n\n      // We need to swap the cursors to match the now-flipped query ordering.\n      const startAt = queryImpl.endAt\n        ? new Bound(queryImpl.endAt.position, !queryImpl.endAt.before)\n        : null;\n      const endAt = queryImpl.startAt\n        ? new Bound(queryImpl.startAt.position, !queryImpl.startAt.before)\n        : null;\n\n      // Now return as a LimitType.First query.\n      queryImpl.memoizedTarget = newTarget(\n        queryImpl.path,\n        queryImpl.collectionGroup,\n        orderBys,\n        queryImpl.filters,\n        queryImpl.limit,\n        startAt,\n        endAt\n      );\n    }\n  }\n  return queryImpl.memoizedTarget!;\n}\n\nexport function queryWithAddedFilter(query: Query, filter: Filter): Query {\n  debugAssert(\n    query.getInequalityFilterField() == null ||\n      !(filter instanceof FieldFilter) ||\n      !filter.isInequality() ||\n      filter.field.isEqual(query.getInequalityFilterField()!),\n    'Query must only have one inequality field.'\n  );\n\n  debugAssert(\n    !isDocumentQuery(query),\n    'No filtering allowed for document query'\n  );\n\n  const newFilters = query.filters.concat([filter]);\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    newFilters,\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithAddedOrderBy(query: Query, orderBy: OrderBy): Query {\n  debugAssert(\n    !query.startAt && !query.endAt,\n    'Bounds must be set after orderBy'\n  );\n  // TODO(dimond): validate that orderBy does not list the same key twice.\n  const newOrderBy = query.explicitOrderBy.concat([orderBy]);\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    newOrderBy,\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithLimit(\n  query: Query,\n  limit: number,\n  limitType: LimitType\n): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    limit,\n    limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithStartAt(query: Query, bound: Bound): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    bound,\n    query.endAt\n  );\n}\n\nexport function queryWithEndAt(query: Query, bound: Bound): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    bound\n  );\n}\n\nexport function queryEquals(left: Query, right: Query): boolean {\n  return (\n    targetEquals(queryToTarget(left), queryToTarget(right)) &&\n    left.limitType === right.limitType\n  );\n}\n\n// TODO(b/29183165): This is used to get a unique string from a query to, for\n// example, use as a dictionary key, but the implementation is subject to\n// collisions. Make it collision-free.\nexport function canonifyQuery(query: Query): string {\n  return `${canonifyTarget(queryToTarget(query))}|lt:${query.limitType}`;\n}\n\nexport function stringifyQuery(query: Query): string {\n  return `Query(target=${stringifyTarget(queryToTarget(query))}; limitType=${\n    query.limitType\n  })`;\n}\n\n/** Returns whether `doc` matches the constraints of `query`. */\nexport function queryMatches(query: Query, doc: Document): boolean {\n  return (\n    queryMatchesPathAndCollectionGroup(query, doc) &&\n    queryMatchesOrderBy(query, doc) &&\n    queryMatchesFilters(query, doc) &&\n    queryMatchesBounds(query, doc)\n  );\n}\n\nfunction queryMatchesPathAndCollectionGroup(\n  query: Query,\n  doc: Document\n): boolean {\n  const docPath = doc.key.path;\n  if (query.collectionGroup !== null) {\n    // NOTE: this.path is currently always empty since we don't expose Collection\n    // Group queries rooted at a document path yet.\n    return (\n      doc.key.hasCollectionId(query.collectionGroup) &&\n      query.path.isPrefixOf(docPath)\n    );\n  } else if (DocumentKey.isDocumentKey(query.path)) {\n    // exact match for document queries\n    return query.path.isEqual(docPath);\n  } else {\n    // shallow ancestor queries by default\n    return query.path.isImmediateParentOf(docPath);\n  }\n}\n\n/**\n * A document must have a value for every ordering clause in order to show up\n * in the results.\n */\nfunction queryMatchesOrderBy(query: Query, doc: Document): boolean {\n  for (const orderBy of query.explicitOrderBy) {\n    // order by key always matches\n    if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction queryMatchesFilters(query: Query, doc: Document): boolean {\n  for (const filter of query.filters) {\n    if (!filter.matches(doc)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Makes sure a document is within the bounds, if provided. */\nfunction queryMatchesBounds(query: Query, doc: Document): boolean {\n  if (\n    query.startAt &&\n    !sortsBeforeDocument(query.startAt, queryOrderBy(query), doc)\n  ) {\n    return false;\n  }\n  if (\n    query.endAt &&\n    sortsBeforeDocument(query.endAt, queryOrderBy(query), doc)\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns a new comparator function that can be used to compare two documents\n * based on the Query's ordering constraint.\n */\nexport function newQueryComparator(\n  query: Query\n): (d1: Document, d2: Document) => number {\n  return (d1: Document, d2: Document): number => {\n    let comparedOnKeyField = false;\n    for (const orderBy of queryOrderBy(query)) {\n      const comp = compareDocs(orderBy, d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    debugAssert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  };\n}\n\nexport abstract class Filter {\n  abstract matches(doc: Document): boolean;\n}\n\nexport const enum Operator {\n  LESS_THAN = '<',\n  LESS_THAN_OR_EQUAL = '<=',\n  EQUAL = '==',\n  GREATER_THAN = '>',\n  GREATER_THAN_OR_EQUAL = '>=',\n  ARRAY_CONTAINS = 'array-contains',\n  IN = 'in',\n  ARRAY_CONTAINS_ANY = 'array-contains-any'\n}\n\nexport class FieldFilter extends Filter {\n  protected constructor(\n    public field: FieldPath,\n    public op: Operator,\n    public value: api.Value\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(field: FieldPath, op: Operator, value: api.Value): FieldFilter {\n    if (field.isKeyField()) {\n      if (op === Operator.IN) {\n        debugAssert(\n          isArray(value),\n          'Comparing on key with IN, but filter value not an ArrayValue'\n        );\n        debugAssert(\n          (value.arrayValue.values || []).every(elem => isReferenceValue(elem)),\n          'Comparing on key with IN, but an array value was not a RefValue'\n        );\n        return new KeyFieldInFilter(field, value);\n      } else {\n        debugAssert(\n          isReferenceValue(value),\n          'Comparing on key, but filter value not a RefValue'\n        );\n        debugAssert(\n          op !== Operator.ARRAY_CONTAINS && op !== Operator.ARRAY_CONTAINS_ANY,\n          `'${op.toString()}' queries don't make sense on document keys.`\n        );\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (isNullValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. Null supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (isNanValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. NaN supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (op === Operator.ARRAY_CONTAINS) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === Operator.IN) {\n      debugAssert(\n        isArray(value),\n        'IN filter has invalid value: ' + value.toString()\n      );\n      return new InFilter(field, value);\n    } else if (op === Operator.ARRAY_CONTAINS_ANY) {\n      debugAssert(\n        isArray(value),\n        'ARRAY_CONTAINS_ANY filter has invalid value: ' + value.toString()\n      );\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n\n    // Only compare types with matching backend order (such as double and int).\n    return (\n      other !== null &&\n      typeOrder(this.value) === typeOrder(other) &&\n      this.matchesComparison(valueCompare(other, this.value))\n    );\n  }\n\n  protected matchesComparison(comparison: number): boolean {\n    switch (this.op) {\n      case Operator.LESS_THAN:\n        return comparison < 0;\n      case Operator.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case Operator.EQUAL:\n        return comparison === 0;\n      case Operator.GREATER_THAN:\n        return comparison > 0;\n      case Operator.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown FieldFilter operator: ' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return (\n      [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.GREATER_THAN_OR_EQUAL\n      ].indexOf(this.op) >= 0\n    );\n  }\n}\n\nexport function canonifyFilter(filter: Filter): string {\n  debugAssert(\n    filter instanceof FieldFilter,\n    'canonifyFilter() only supports FieldFilters'\n  );\n  // TODO(b/29183165): Technically, this won't be unique if two values have\n  // the same description, such as the int 3 and the string \"3\". So we should\n  // add the types in here somehow, too.\n  return (\n    filter.field.canonicalString() +\n    filter.op.toString() +\n    canonicalId(filter.value)\n  );\n}\n\nexport function filterEquals(f1: Filter, f2: Filter): boolean {\n  return (\n    f1 instanceof FieldFilter &&\n    f2 instanceof FieldFilter &&\n    f1.op === f2.op &&\n    f1.field.isEqual(f2.field) &&\n    valueEquals(f1.value, f2.value)\n  );\n}\n\n/** Returns a debug description for `filter`. */\nexport function stringifyFilter(filter: Filter): string {\n  debugAssert(\n    filter instanceof FieldFilter,\n    'stringifyFilter() only supports FieldFilters'\n  );\n  return `${filter.field.canonicalString()} ${filter.op} ${canonicalId(\n    filter.value\n  )}`;\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nexport class KeyFieldFilter extends FieldFilter {\n  private readonly key: DocumentKey;\n\n  constructor(field: FieldPath, op: Operator, value: api.Value) {\n    super(field, op, value);\n    debugAssert(\n      isReferenceValue(value),\n      'KeyFieldFilter expects a ReferenceValue'\n    );\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n\n  matches(doc: Document): boolean {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nexport class KeyFieldInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'KeyFieldInFilter expects an ArrayValue');\n    this.keys = (value.arrayValue.values || []).map(v => {\n      debugAssert(\n        isReferenceValue(v),\n        'Comparing on key with IN, but an array value was not a ReferenceValue'\n      );\n      return DocumentKey.fromName(v.referenceValue);\n    });\n  }\n\n  matches(doc: Document): boolean {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\n/** A Filter that implements the array-contains operator. */\nexport class ArrayContainsFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nexport class InFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'InFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nexport class ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS_ANY, value);\n    debugAssert(isArray(value), 'ArrayContainsAnyFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val =>\n      arrayValueContains(this.value.arrayValue!, val)\n    );\n  }\n}\n\n/**\n * The direction of sorting in an order by.\n */\nexport const enum Direction {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: api.Value[], readonly before: boolean) {}\n}\n\nexport function canonifyBound(bound: Bound): string {\n  // TODO(b/29183165): Make this collision robust.\n  return `${bound.before ? 'b' : 'a'}:${bound.position\n    .map(p => canonicalId(p))\n    .join(',')}`;\n}\n\n/**\n * Returns true if a document sorts before a bound using the provided sort\n * order.\n */\nexport function sortsBeforeDocument(\n  bound: Bound,\n  orderBy: OrderBy[],\n  doc: Document\n): boolean {\n  debugAssert(\n    bound.position.length <= orderBy.length,\n    \"Bound has more components than query's orderBy\"\n  );\n  let comparison = 0;\n  for (let i = 0; i < bound.position.length; i++) {\n    const orderByComponent = orderBy[i];\n    const component = bound.position[i];\n    if (orderByComponent.field.isKeyField()) {\n      debugAssert(\n        isReferenceValue(component),\n        'Bound has a non-key value where the key path is being used.'\n      );\n      comparison = DocumentKey.comparator(\n        DocumentKey.fromName(component.referenceValue),\n        doc.key\n      );\n    } else {\n      const docValue = doc.field(orderByComponent.field);\n      debugAssert(\n        docValue !== null,\n        'Field should exist since document matched the orderBy already.'\n      );\n      comparison = valueCompare(component, docValue);\n    }\n    if (orderByComponent.dir === Direction.DESCENDING) {\n      comparison = comparison * -1;\n    }\n    if (comparison !== 0) {\n      break;\n    }\n  }\n  return bound.before ? comparison <= 0 : comparison < 0;\n}\n\nexport function boundEquals(left: Bound | null, right: Bound | null): boolean {\n  if (left === null) {\n    return right === null;\n  } else if (right === null) {\n    return false;\n  }\n\n  if (\n    left.before !== right.before ||\n    left.position.length !== right.position.length\n  ) {\n    return false;\n  }\n  for (let i = 0; i < left.position.length; i++) {\n    const leftPosition = left.position[i];\n    const rightPosition = right.position[i];\n    if (!valueEquals(leftPosition, rightPosition)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  constructor(\n    readonly field: FieldPath,\n    readonly dir: Direction = Direction.ASCENDING\n  ) {}\n}\n\nexport function compareDocs(\n  orderBy: OrderBy,\n  d1: Document,\n  d2: Document\n): number {\n  const comparison = orderBy.field.isKeyField()\n    ? DocumentKey.comparator(d1.key, d2.key)\n    : compareDocumentsByField(orderBy.field, d1, d2);\n  switch (orderBy.dir) {\n    case Direction.ASCENDING:\n      return comparison;\n    case Direction.DESCENDING:\n      return -1 * comparison;\n    default:\n      return fail('Unknown direction: ' + orderBy.dir);\n  }\n}\n\nexport function canonifyOrderBy(orderBy: OrderBy): string {\n  // TODO(b/29183165): Make this collision robust.\n  return orderBy.field.canonicalString() + orderBy.dir;\n}\n\nexport function stringifyOrderBy(orderBy: OrderBy): string {\n  return `${orderBy.field.canonicalString()} (${orderBy.dir})`;\n}\n\nexport function orderByEquals(left: OrderBy, right: OrderBy): boolean {\n  return left.dir === right.dir && left.field.isEqual(right.field);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { decodeBase64, encodeBase64 } from '../platform/base64';\nimport { primitiveComparator } from './misc';\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n */\nexport class ByteString {\n  static readonly EMPTY_BYTE_STRING = new ByteString('');\n\n  private constructor(private readonly binaryString: string) {}\n\n  static fromBase64String(base64: string): ByteString {\n    const binaryString = decodeBase64(base64);\n    return new ByteString(binaryString);\n  }\n\n  static fromUint8Array(array: Uint8Array): ByteString {\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n\n  toBase64(): string {\n    return encodeBase64(this.binaryString);\n  }\n\n  toUint8Array(): Uint8Array {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n\n  approximateByteSize(): number {\n    return this.binaryString.length * 2;\n  }\n\n  compareTo(other: ByteString): number {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n\n  isEqual(other: ByteString): boolean {\n    return this.binaryString === other.binaryString;\n  }\n}\n\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nexport function binaryStringFromUint8Array(array: Uint8Array): string {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nexport function uint8ArrayFromBinaryString(binaryString: string): Uint8Array {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\n/** Converts a binary string to a Base64 encoded string. */\nexport function encodeBase64(raw: string): string {\n  return btoa(raw);\n}\n\n/** True if and only if the Base64 conversion functions are available. */\nexport function isBase64Available(): boolean {\n  return typeof atob !== 'undefined';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport { logError } from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nexport function isPermanentWriteError(code: Code): boolean {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // lookup by string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status: number): Code {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) {\n        return Code.OK;\n      }\n      if (status >= 400 && status < 500) {\n        return Code.FAILED_PRECONDITION;\n      }\n      if (status >= 500 && status < 600) {\n        return Code.INTERNAL;\n      }\n      return Code.UNKNOWN;\n  }\n}\n\n/**\n * Converts an HTTP response's error status to the equivalent error code.\n *\n * @param status An HTTP error response status (\"FAILED_PRECONDITION\",\n * \"UNKNOWN\", etc.)\n * @returns The equivalent Code. Non-matching responses are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpResponseErrorStatus(status: string): Code {\n  const serverError = status.toLowerCase().replace('_', '-');\n  return Object.values(Code).indexOf(serverError as Code) >= 0\n    ? (serverError as Code)\n    : Code.UNKNOWN;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { ByteString } from '../util/byte_string';\n\n/** An enumeration of the different purposes we have for targets. */\nexport const enum TargetPurpose {\n  /** A regular, normal query target. */\n  Listen,\n\n  /**\n   * The query target was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query target was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each target.\n */\nexport class TargetData {\n  constructor(\n    /** The target being listened to. */\n    readonly target: Target,\n    /**\n     * The target ID to which the target corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    readonly targetId: TargetId,\n    /** The purpose of the target. */\n    readonly purpose: TargetPurpose,\n    /**\n     * The sequence number of the last transaction during which this target data\n     * was modified.\n     */\n    readonly sequenceNumber: ListenSequenceNumber,\n    /** The latest snapshot version seen for this target. */\n    readonly snapshotVersion: SnapshotVersion = SnapshotVersion.min(),\n    /**\n     * The maximum snapshot version at which the associated view\n     * contained no limbo documents.\n     */\n    readonly lastLimboFreeSnapshotVersion: SnapshotVersion = SnapshotVersion.min(),\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    readonly resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING\n  ) {}\n\n  /** Creates a new target data instance with an updated sequence number. */\n  withSequenceNumber(sequenceNumber: number): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      sequenceNumber,\n      this.snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated resume token and\n   * snapshot version.\n   */\n  withResumeToken(\n    resumeToken: ByteString,\n    snapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated last limbo free\n   * snapshot version number.\n   */\n  withLastLimboFreeSnapshotVersion(\n    lastLimboFreeSnapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      this.snapshotVersion,\n      lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ExistenceFilter {\n  // TODO(b/33078163): just use simplest form of existence filter for now\n  constructor(public count: number) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\n\n/*\n * Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\nexport interface Entry<K, V> {\n  key: K;\n  value: V;\n}\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nexport class SortedMap<K, V> {\n  // visible for testing\n  root: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  constructor(\n    public comparator: Comparator<K>,\n    root?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .insert(key, value, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns a copy of the map, with the specified key removed.\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .remove(key, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns the value of the node with the given key, or null.\n  get(key: K): V | null {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key: K): number {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  // Returns the total number of nodes in the map.\n  get size(): number {\n    return this.root.size;\n  }\n\n  // Returns the minimum key in the map.\n  minKey(): K | null {\n    return this.root.minKey();\n  }\n\n  // Returns the maximum key in the map.\n  maxKey(): K | null {\n    return this.root.maxKey();\n  }\n\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).inorderTraversal(action);\n  }\n\n  forEach(fn: (k: K, v: V) => void): void {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n\n  toString(): string {\n    const descriptions: string[] = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).reverseTraversal(action);\n  }\n\n  // Returns an iterator over the SortedMap.\n  getIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, false);\n  }\n\n  getIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, false);\n  }\n\n  getReverseIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, true);\n  }\n\n  getReverseIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n\n// An iterator over an LLRBNode.\nexport class SortedMapIterator<K, V> {\n  private isReverse: boolean;\n  private nodeStack: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>>;\n\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    isReverse: boolean\n  ) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): Entry<K, V> {\n    debugAssert(\n      this.nodeStack.length > 0,\n      'getNext() called on iterator when hasNext() is false.'\n    );\n\n    let node = this.nodeStack.pop()!;\n    const result = { key: node.key, value: node.value };\n\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack.length > 0;\n  }\n\n  peek(): Entry<K, V> | null {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return { key: node.key, value: node.value };\n  }\n} // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nexport class LLRBNode<K, V> {\n  readonly color: boolean;\n  readonly left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly size: number;\n\n  // Empty node is shared between all LLRB trees.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static EMPTY: LLRBEmptyNode<any, any> = null as any;\n\n  static RED = true;\n  static BLACK = false;\n\n  constructor(\n    public key: K,\n    public value: V,\n    color?: boolean,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.left as LLRBNode<K, V>).inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.right as LLRBNode<K, V>).inorderTraversal(action)\n    );\n  }\n\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.right as LLRBNode<K, V>).reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.left as LLRBNode<K, V>).reverseTraversal(action)\n    );\n  }\n\n  // Returns the minimum node in the tree.\n  private min(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min();\n    }\n  }\n\n  // Returns the maximum key in the tree.\n  minKey(): K | null {\n    return this.min().key;\n  }\n\n  // Returns the maximum key in the tree.\n  maxKey(): K | null {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  // Returns new tree, with the key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp();\n  }\n\n  private removeMin(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin(), null);\n    return n.fixUp();\n  }\n\n  // Returns new tree, with the specified item removed.\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let smallest: LLRBNode<K, V>;\n    let n: LLRBNode<K, V> = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n\n  isRed(): boolean {\n    return this.color;\n  }\n\n  // Returns new tree after performing any needed rotations.\n  private fixUp(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedLeft(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight()\n      );\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedRight(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private rotateLeft(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return (this.right as LLRBNode<K, V>).copy(\n      null,\n      null,\n      this.color,\n      nl,\n      null\n    );\n  }\n\n  private rotateRight(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return (this.left as LLRBNode<K, V>).copy(null, null, this.color, null, nr);\n  }\n\n  private colorFlip(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  protected check(): number {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed()) {\n      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = (this.left as LLRBNode<K, V>).check();\n    if (blackDepth !== (this.right as LLRBNode<K, V>).check()) {\n      throw fail('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nexport class LLRBEmptyNode<K, V> {\n  get key(): never {\n    throw fail('LLRBEmptyNode has no key.');\n  }\n  get value(): never {\n    throw fail('LLRBEmptyNode has no value.');\n  }\n  get color(): never {\n    throw fail('LLRBEmptyNode has no color.');\n  }\n  get left(): never {\n    throw fail('LLRBEmptyNode has no left child.');\n  }\n  get right(): never {\n    throw fail('LLRBEmptyNode has no right child.');\n  }\n  size = 0;\n\n  // Returns a copy of the current node.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(key, value);\n  }\n\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  isEmpty(): boolean {\n    return true;\n  }\n\n  inorderTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  reverseTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  minKey(): K | null {\n    return null;\n  }\n\n  maxKey(): K | null {\n    return null;\n  }\n\n  isRed(): boolean {\n    return false;\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    return true;\n  }\n\n  protected check(): 0 {\n    return 0;\n  }\n} // end LLRBEmptyNode\n\nLLRBNode.EMPTY = new LLRBEmptyNode<unknown, unknown>();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  getIterator(): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIterator());\n  }\n\n  getIteratorFrom(key: T): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIteratorFrom(key));\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  isEqual(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toArray(): T[] {\n    const res: T[] = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n\nexport class SortedSetIterator<T> {\n  constructor(private iter: SortedMapIterator<T, boolean>) {}\n\n  getNext(): T {\n    return this.iter.getNext().key;\n  }\n\n  hasNext(): boolean {\n    return this.iter.hasNext();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { TargetId } from '../core/types';\nimport { primitiveComparator } from '../util/misc';\nimport { Document, MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\n\n/** Miscellaneous collection types / constants. */\nexport interface DocumentSizeEntry {\n  maybeDocument: MaybeDocument;\n  size: number;\n}\n\nexport type MaybeDocumentMap = SortedMap<DocumentKey, MaybeDocument>;\nconst EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap<DocumentKey, MaybeDocument>(\n  DocumentKey.comparator\n);\nexport function maybeDocumentMap(): MaybeDocumentMap {\n  return EMPTY_MAYBE_DOCUMENT_MAP;\n}\n\nexport type NullableMaybeDocumentMap = SortedMap<\n  DocumentKey,\n  MaybeDocument | null\n>;\n\nexport function nullableMaybeDocumentMap(): NullableMaybeDocumentMap {\n  return maybeDocumentMap();\n}\n\nexport interface DocumentSizeEntries {\n  maybeDocuments: NullableMaybeDocumentMap;\n  sizeMap: SortedMap<DocumentKey, number>;\n}\n\nexport type DocumentMap = SortedMap<DocumentKey, Document>;\nconst EMPTY_DOCUMENT_MAP = new SortedMap<DocumentKey, Document>(\n  DocumentKey.comparator\n);\nexport function documentMap(): DocumentMap {\n  return EMPTY_DOCUMENT_MAP;\n}\n\nexport type DocumentVersionMap = SortedMap<DocumentKey, SnapshotVersion>;\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap<DocumentKey, SnapshotVersion>(\n  DocumentKey.comparator\n);\nexport function documentVersionMap(): DocumentVersionMap {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\n\nexport type DocumentKeySet = SortedSet<DocumentKey>;\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet(...keys: DocumentKey[]): DocumentKeySet {\n  let set = EMPTY_DOCUMENT_KEY_SET;\n  for (const key of keys) {\n    set = set.add(key);\n  }\n  return set;\n}\n\nexport type TargetIdSet = SortedSet<TargetId>;\nconst EMPTY_TARGET_ID_SET = new SortedSet<TargetId>(primitiveComparator);\nexport function targetIdSet(): SortedSet<TargetId> {\n  return EMPTY_TARGET_ID_SET;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from '../util/sorted_map';\n\nimport { documentMap } from './collections';\nimport { Document } from './document';\nimport { DocumentComparator } from './document_comparator';\nimport { DocumentKey } from './document_key';\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\n\nexport class DocumentSet {\n  /**\n   * Returns an empty copy of the existing DocumentSet, using the same\n   * comparator.\n   */\n  static emptySet(oldSet: DocumentSet): DocumentSet {\n    return new DocumentSet(oldSet.comparator);\n  }\n\n  private comparator: DocumentComparator;\n  private keyedMap: SortedMap<DocumentKey, Document>;\n  private sortedSet: SortedMap<Document, null>;\n\n  /** The default ordering is by key if the comparator is omitted */\n  constructor(comp?: DocumentComparator) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = (d1: Document, d2: Document) =>\n        comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n    } else {\n      this.comparator = (d1: Document, d2: Document) =>\n        DocumentKey.comparator(d1.key, d2.key);\n    }\n\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap<Document, null>(this.comparator);\n  }\n\n  has(key: DocumentKey): boolean {\n    return this.keyedMap.get(key) != null;\n  }\n\n  get(key: DocumentKey): Document | null {\n    return this.keyedMap.get(key);\n  }\n\n  first(): Document | null {\n    return this.sortedSet.minKey();\n  }\n\n  last(): Document | null {\n    return this.sortedSet.maxKey();\n  }\n\n  isEmpty(): boolean {\n    return this.sortedSet.isEmpty();\n  }\n\n  /**\n   * Returns the index of the provided key in the document set, or -1 if the\n   * document key is not present in the set;\n   */\n  indexOf(key: DocumentKey): number {\n    const doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  }\n\n  get size(): number {\n    return this.sortedSet.size;\n  }\n\n  /** Iterates documents in order defined by \"comparator\" */\n  forEach(cb: (doc: Document) => void): void {\n    this.sortedSet.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Inserts or updates a document with the same key */\n  add(doc: Document): DocumentSet {\n    // First remove the element if we have it.\n    const set = this.delete(doc.key);\n    return set.copy(\n      set.keyedMap.insert(doc.key, doc),\n      set.sortedSet.insert(doc, null)\n    );\n  }\n\n  /** Deletes a document with a given key */\n  delete(key: DocumentKey): DocumentSet {\n    const doc = this.get(key);\n    if (!doc) {\n      return this;\n    }\n\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  }\n\n  isEqual(other: DocumentSet | null | undefined): boolean {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.sortedSet.getIterator();\n    const otherIt = other.sortedSet.getIterator();\n    while (thisIt.hasNext()) {\n      const thisDoc = thisIt.getNext().key;\n      const otherDoc = otherIt.getNext().key;\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toString(): string {\n    const docStrings: string[] = [];\n    this.forEach(doc => {\n      docStrings.push(doc.toString());\n    });\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  }\n\n  private copy(\n    keyedMap: SortedMap<DocumentKey, Document>,\n    sortedSet: SortedMap<Document, null>\n  ): DocumentSet {\n    const newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { DocumentKeySet } from '../model/collections';\nimport { Query, queryEquals } from './query';\n\nexport const enum ChangeType {\n  Added,\n  Removed,\n  Modified,\n  Metadata\n}\n\nexport interface DocumentViewChange {\n  type: ChangeType;\n  doc: Document;\n}\n\nexport const enum SyncState {\n  Local,\n  Synced\n}\n\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nexport class DocumentChangeSet {\n  private changeMap = new SortedMap<DocumentKey, DocumentViewChange>(\n    DocumentKey.comparator\n  );\n\n  track(change: DocumentViewChange): void {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n\n    // Merge the new change with the existing change.\n    if (\n      change.type !== ChangeType.Added &&\n      oldChange.type === ChangeType.Metadata\n    ) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (\n      change.type === ChangeType.Metadata &&\n      oldChange.type !== ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Added,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Removed,\n        doc: oldChange.doc\n      });\n    } else if (\n      change.type === ChangeType.Added &&\n      oldChange.type === ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail(\n        'unsupported combination of changes: ' +\n          JSON.stringify(change) +\n          ' after ' +\n          JSON.stringify(oldChange)\n      );\n    }\n  }\n\n  getChanges(): DocumentViewChange[] {\n    const changes: DocumentViewChange[] = [];\n    this.changeMap.inorderTraversal(\n      (key: DocumentKey, change: DocumentViewChange) => {\n        changes.push(change);\n      }\n    );\n    return changes;\n  }\n}\n\nexport class ViewSnapshot {\n  constructor(\n    readonly query: Query,\n    readonly docs: DocumentSet,\n    readonly oldDocs: DocumentSet,\n    readonly docChanges: DocumentViewChange[],\n    readonly mutatedKeys: DocumentKeySet,\n    readonly fromCache: boolean,\n    readonly syncStateChanged: boolean,\n    readonly excludesMetadataChanges: boolean\n  ) {}\n\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n  static fromInitialDocuments(\n    query: Query,\n    documents: DocumentSet,\n    mutatedKeys: DocumentKeySet,\n    fromCache: boolean\n  ): ViewSnapshot {\n    const changes: DocumentViewChange[] = [];\n    documents.forEach(doc => {\n      changes.push({ type: ChangeType.Added, doc });\n    });\n\n    return new ViewSnapshot(\n      query,\n      documents,\n      DocumentSet.emptySet(documents),\n      changes,\n      mutatedKeys,\n      fromCache,\n      /* syncStateChanged= */ true,\n      /* excludesMetadataChanges= */ false\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return !this.mutatedKeys.isEmpty();\n  }\n\n  isEqual(other: ViewSnapshot): boolean {\n    if (\n      this.fromCache !== other.fromCache ||\n      this.syncStateChanged !== other.syncStateChanged ||\n      !this.mutatedKeys.isEqual(other.mutatedKeys) ||\n      !queryEquals(this.query, other.query) ||\n      !this.docs.isEqual(other.docs) ||\n      !this.oldDocs.isEqual(other.oldDocs)\n    ) {\n      return false;\n    }\n    const changes: DocumentViewChange[] = this.docChanges;\n    const otherChanges: DocumentViewChange[] = other.docChanges;\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      if (\n        changes[i].type !== otherChanges[i].type ||\n        !changes[i].doc.isEqual(otherChanges[i].doc)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap,\n  MaybeDocumentMap,\n  targetIdSet\n} from '../model/collections';\nimport { SortedSet } from '../util/sorted_set';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nexport class RemoteEvent {\n  constructor(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    readonly snapshotVersion: SnapshotVersion,\n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    readonly targetChanges: Map<TargetId, TargetChange>,\n    /**\n     * A set of targets that is known to be inconsistent. Listens for these\n     * targets should be re-established without resume tokens.\n     */\n    readonly targetMismatches: SortedSet<TargetId>,\n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    readonly documentUpdates: MaybeDocumentMap,\n    /**\n     * A set of which document updates are due only to limbo resolution targets.\n     */\n    readonly resolvedLimboDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * HACK: Views require RemoteEvents in order to determine whether the view is\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\n   * used to create a synthesized RemoteEvent that can be used to apply a\n   * CURRENT status change to a View, for queries executed in a different tab.\n   */\n  // PORTING NOTE: Multi-tab only\n  static createSynthesizedRemoteEventForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n    targetChanges.set(\n      targetId,\n      TargetChange.createSynthesizedTargetChangeForCurrentChange(\n        targetId,\n        current\n      )\n    );\n    return new RemoteEvent(\n      SnapshotVersion.min(),\n      targetChanges,\n      targetIdSet(),\n      maybeDocumentMap(),\n      documentKeySet()\n    );\n  }\n}\n\n/**\n * A TargetChange specifies the set of changes for a specific target as part of\n * a RemoteEvent. These changes track which documents are added, modified or\n * removed, as well as the target's resume token and whether the target is\n * marked CURRENT.\n * The actual changes *to* documents are not part of the TargetChange since\n * documents may be part of multiple targets.\n */\nexport class TargetChange {\n  constructor(\n    /**\n     * An opaque, server-assigned token that allows watching a query to be resumed\n     * after disconnecting without retransmitting all the data that matches the\n     * query. The resume token essentially identifies a point in time from which\n     * the server should resume sending results.\n     */\n    readonly resumeToken: ByteString,\n    /**\n     * The \"current\" (synced) status of this target. Note that \"current\"\n     * has special meaning in the RPC protocol that implies that a target is\n     * both up-to-date and consistent with the rest of the watch stream.\n     */\n    readonly current: boolean,\n    /**\n     * The set of documents that were newly assigned to this target as part of\n     * this remote event.\n     */\n    readonly addedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were already assigned to this target but received\n     * an update during this remote event.\n     */\n    readonly modifiedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were removed from this target as part of this\n     * remote event.\n     */\n    readonly removedDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * This method is used to create a synthesized TargetChanges that can be used to\n   * apply a CURRENT status change to a View (for queries executed in a different\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\n   */\n  static createSynthesizedTargetChangeForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): TargetChange {\n    return new TargetChange(\n      ByteString.EMPTY_BYTE_STRING,\n      current,\n      documentKeySet(),\n      documentKeySet(),\n      documentKeySet()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { ChangeType } from '../core/view_snapshot';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ExistenceFilter } from './existence_filter';\nimport { RemoteEvent, TargetChange } from './remote_event';\nimport { ByteString } from '../util/byte_string';\nimport { isDocumentTarget } from '../core/target';\n\n/**\n * Internal representation of the watcher API protocol buffers.\n */\nexport type WatchChange =\n  | DocumentWatchChange\n  | WatchTargetChange\n  | ExistenceFilterChange;\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nexport class DocumentWatchChange {\n  constructor(\n    /** The new document applies to all of these targets. */\n    public updatedTargetIds: TargetId[],\n    /** The new document is removed from all of these targets. */\n    public removedTargetIds: TargetId[],\n    /** The key of the document for this change. */\n    public key: DocumentKey,\n    /**\n     * The new document or NoDocument if it was deleted. Is null if the\n     * document went out of view without the server sending a new document.\n     */\n    public newDoc: MaybeDocument | null\n  ) {}\n}\n\nexport class ExistenceFilterChange {\n  constructor(\n    public targetId: TargetId,\n    public existenceFilter: ExistenceFilter\n  ) {}\n}\n\nexport const enum WatchTargetChangeState {\n  NoChange,\n  Added,\n  Removed,\n  Current,\n  Reset\n}\n\nexport class WatchTargetChange {\n  constructor(\n    /** What kind of change occurred to the watch target. */\n    public state: WatchTargetChangeState,\n    /** The target IDs that were added/removed/set. */\n    public targetIds: TargetId[],\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING,\n    /** An RPC error indicating why the watch failed. */\n    public cause: FirestoreError | null = null\n  ) {}\n}\n\n/** Tracks the internal state of a Watch target. */\nclass TargetState {\n  /**\n   * The number of pending responses (adds or removes) that we are waiting on.\n   * We only consider targets active that have no pending responses.\n   */\n  private pendingResponses = 0;\n\n  /**\n   * Keeps track of the document changes since the last raised snapshot.\n   *\n   * These changes are continuously updated as we receive document updates and\n   * always reflect the current set of changes against the last issued snapshot.\n   */\n  private documentChanges: SortedMap<\n    DocumentKey,\n    ChangeType\n  > = snapshotChangesMap();\n\n  /** See public getters for explanations of these fields. */\n  private _resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n  private _current = false;\n\n  /**\n   * Whether this target state should be included in the next snapshot. We\n   * initialize to true so that newly-added targets are included in the next\n   * RemoteEvent.\n   */\n  private _hasPendingChanges = true;\n\n  /**\n   * Whether this target has been marked 'current'.\n   *\n   * 'Current' has special meaning in the RPC protocol: It implies that the\n   * Watch backend has sent us all changes up to the point at which the target\n   * was added and that the target is consistent with the rest of the watch\n   * stream.\n   */\n  get current(): boolean {\n    return this._current;\n  }\n\n  /** The last resume token sent to us for this target. */\n  get resumeToken(): ByteString {\n    return this._resumeToken;\n  }\n\n  /** Whether this target has pending target adds or target removes. */\n  get isPending(): boolean {\n    return this.pendingResponses !== 0;\n  }\n\n  /** Whether we have modified any state that should trigger a snapshot. */\n  get hasPendingChanges(): boolean {\n    return this._hasPendingChanges;\n  }\n\n  /**\n   * Applies the resume token to the TargetChange, but only when it has a new\n   * value. Empty resumeTokens are discarded.\n   */\n  updateResumeToken(resumeToken: ByteString): void {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  }\n\n  /**\n   * Creates a target change from the current set of changes.\n   *\n   * To reset the document changes after raising this snapshot, call\n   * `clearPendingChanges()`.\n   */\n  toTargetChange(): TargetChange {\n    let addedDocuments = documentKeySet();\n    let modifiedDocuments = documentKeySet();\n    let removedDocuments = documentKeySet();\n\n    this.documentChanges.forEach((key, changeType) => {\n      switch (changeType) {\n        case ChangeType.Added:\n          addedDocuments = addedDocuments.add(key);\n          break;\n        case ChangeType.Modified:\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n        case ChangeType.Removed:\n          removedDocuments = removedDocuments.add(key);\n          break;\n        default:\n          fail('Encountered invalid change type: ' + changeType);\n      }\n    });\n\n    return new TargetChange(\n      this._resumeToken,\n      this._current,\n      addedDocuments,\n      modifiedDocuments,\n      removedDocuments\n    );\n  }\n\n  /**\n   * Resets the document changes and sets `hasPendingChanges` to false.\n   */\n  clearPendingChanges(): void {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  }\n\n  addDocumentChange(key: DocumentKey, changeType: ChangeType): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  }\n\n  removeDocumentChange(key: DocumentKey): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  }\n\n  recordPendingTargetRequest(): void {\n    this.pendingResponses += 1;\n  }\n\n  recordTargetResponse(): void {\n    this.pendingResponses -= 1;\n  }\n\n  markCurrent(): void {\n    this._hasPendingChanges = true;\n    this._current = true;\n  }\n}\n\n/**\n * Interface implemented by RemoteStore to expose target metadata to the\n * WatchChangeAggregator.\n */\nexport interface TargetMetadataProvider {\n  /**\n   * Returns the set of remote document keys for the given target ID as of the\n   * last raised snapshot.\n   */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet;\n\n  /**\n   * Returns the TargetData for an active target ID or 'null' if this target\n   * has become inactive\n   */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null;\n}\n\nconst LOG_TAG = 'WatchChangeAggregator';\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent.\n */\nexport class WatchChangeAggregator {\n  constructor(private metadataProvider: TargetMetadataProvider) {}\n\n  /** The internal state of all tracked targets. */\n  private targetStates = new Map<TargetId, TargetState>();\n\n  /** Keeps track of the documents to update since the last raised snapshot. */\n  private pendingDocumentUpdates = maybeDocumentMap();\n\n  /** A mapping of document keys to their set of target IDs. */\n  private pendingDocumentTargetMapping = documentTargetMap();\n\n  /**\n   * A list of targets with existence filter mismatches. These targets are\n   * known to be inconsistent and their listens needs to be re-established by\n   * RemoteStore.\n   */\n  private pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n  /**\n   * Processes and adds the DocumentWatchChange to the current set of changes.\n   */\n  handleDocumentChange(docChange: DocumentWatchChange): void {\n    for (const targetId of docChange.updatedTargetIds) {\n      if (docChange.newDoc instanceof Document) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else if (docChange.newDoc instanceof NoDocument) {\n        this.removeDocumentFromTarget(\n          targetId,\n          docChange.key,\n          docChange.newDoc\n        );\n      }\n    }\n\n    for (const targetId of docChange.removedTargetIds) {\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  }\n\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n  handleTargetChange(targetChange: WatchTargetChange): void {\n    this.forEachTarget(targetChange, targetId => {\n      const targetState = this.ensureTargetState(targetId);\n      switch (targetChange.state) {\n        case WatchTargetChangeState.NoChange:\n          if (this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Added:\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n        case WatchTargetChangeState.Removed:\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            this.removeTarget(targetId);\n          }\n          debugAssert(\n            !targetChange.cause,\n            'WatchChangeAggregator does not handle errored targets'\n          );\n          break;\n        case WatchTargetChangeState.Current:\n          if (this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Reset:\n          if (this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            this.resetTarget(targetId);\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        default:\n          fail('Unknown target watch change state: ' + targetChange.state);\n      }\n    });\n  }\n\n  /**\n   * Iterates over all targetIds that the watch change applies to: either the\n   * targetIds explicitly listed in the change or the targetIds of all currently\n   * active targets.\n   */\n  forEachTarget(\n    targetChange: WatchTargetChange,\n    fn: (targetId: TargetId) => void\n  ): void {\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach((_, targetId) => {\n        if (this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handles existence filters and synthesizes deletes for filter mismatches.\n   * Targets that are invalidated by filter mismatches are added to\n   * `pendingTargetResets`.\n   */\n  handleExistenceFilter(watchChange: ExistenceFilterChange): void {\n    const targetId = watchChange.targetId;\n    const expectedCount = watchChange.existenceFilter.count;\n\n    const targetData = this.targetDataForActiveTarget(targetId);\n    if (targetData) {\n      const target = targetData.target;\n      if (isDocumentTarget(target)) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          const key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(\n            targetId,\n            key,\n            new NoDocument(key, SnapshotVersion.min())\n          );\n        } else {\n          hardAssert(\n            expectedCount === 1,\n            'Single document existence filter with count: ' + expectedCount\n          );\n        }\n      } else {\n        const currentSize = this.getCurrentDocumentCountForTarget(targetId);\n        if (currentSize !== expectedCount) {\n          // Existence filter mismatch: We reset the mapping and raise a new\n          // snapshot with `isFromCache:true`.\n          this.resetTarget(targetId);\n          this.pendingTargetResets = this.pendingTargetResets.add(targetId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the currently accumulated state into a remote event at the\n   * provided snapshot version. Resets the accumulated changes before returning.\n   */\n  createRemoteEvent(snapshotVersion: SnapshotVersion): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n\n    this.targetStates.forEach((targetState, targetId) => {\n      const targetData = this.targetDataForActiveTarget(targetId);\n      if (targetData) {\n        if (targetState.current && isDocumentTarget(targetData.target)) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document. This\n          // resolves the limbo state of the document, removing it from\n          // limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          const key = new DocumentKey(targetData.target.path);\n          if (\n            this.pendingDocumentUpdates.get(key) === null &&\n            !this.targetContainsDocument(targetId, key)\n          ) {\n            this.removeDocumentFromTarget(\n              targetId,\n              key,\n              new NoDocument(key, snapshotVersion)\n            );\n          }\n        }\n\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n\n    let resolvedLimboDocuments = documentKeySet();\n\n    // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n    this.pendingDocumentTargetMapping.forEach((key, targets) => {\n      let isOnlyLimboTarget = true;\n\n      targets.forEachWhile(targetId => {\n        const targetData = this.targetDataForActiveTarget(targetId);\n        if (\n          targetData &&\n          targetData.purpose !== TargetPurpose.LimboResolution\n        ) {\n          isOnlyLimboTarget = false;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n\n    const remoteEvent = new RemoteEvent(\n      snapshotVersion,\n      targetChanges,\n      this.pendingTargetResets,\n      this.pendingDocumentUpdates,\n      resolvedLimboDocuments\n    );\n\n    this.pendingDocumentUpdates = maybeDocumentMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n    return remoteEvent;\n  }\n\n  /**\n   * Adds the provided document to the internal list of document updates and\n   * its document key to the given target's mapping.\n   */\n  // Visible for testing.\n  addDocumentToTarget(targetId: TargetId, document: MaybeDocument): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const changeType = this.targetContainsDocument(targetId, document.key)\n      ? ChangeType.Modified\n      : ChangeType.Added;\n\n    const targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n      document.key,\n      document\n    );\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      document.key,\n      this.ensureDocumentTargetMapping(document.key).add(targetId)\n    );\n  }\n\n  /**\n   * Removes the provided document from the target mapping. If the\n   * document no longer matches the target, but the document's state is still\n   * known (e.g. we know that the document was deleted or we received the change\n   * that caused the filter mismatch), the new document can be provided\n   * to update the remote document cache.\n   */\n  // Visible for testing.\n  removeDocumentFromTarget(\n    targetId: TargetId,\n    key: DocumentKey,\n    updatedDocument: MaybeDocument | null\n  ): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const targetState = this.ensureTargetState(targetId);\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, ChangeType.Removed);\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      key,\n      this.ensureDocumentTargetMapping(key).delete(targetId)\n    );\n\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n        key,\n        updatedDocument\n      );\n    }\n  }\n\n  removeTarget(targetId: TargetId): void {\n    this.targetStates.delete(targetId);\n  }\n\n  /**\n   * Returns the current count of documents in the target. This includes both\n   * the number of documents that the LocalStore considers to be part of the\n   * target as well as any accumulated changes.\n   */\n  private getCurrentDocumentCountForTarget(targetId: TargetId): number {\n    const targetState = this.ensureTargetState(targetId);\n    const targetChange = targetState.toTargetChange();\n    return (\n      this.metadataProvider.getRemoteKeysForTarget(targetId).size +\n      targetChange.addedDocuments.size -\n      targetChange.removedDocuments.size\n    );\n  }\n\n  /**\n   * Increment the number of acks needed from watch before we can consider the\n   * server to be 'in-sync' with the client's active targets.\n   */\n  recordPendingTargetRequest(targetId: TargetId): void {\n    // For each request we get we need to record we need a response for it.\n    const targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  }\n\n  private ensureTargetState(targetId: TargetId): TargetState {\n    let result = this.targetStates.get(targetId);\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n    return result;\n  }\n\n  private ensureDocumentTargetMapping(key: DocumentKey): SortedSet<TargetId> {\n    let targetMapping = this.pendingDocumentTargetMapping.get(key);\n\n    if (!targetMapping) {\n      targetMapping = new SortedSet<TargetId>(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n        key,\n        targetMapping\n      );\n    }\n\n    return targetMapping;\n  }\n\n  /**\n   * Verifies that the user is still interested in this target (by calling\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\n   * from watch.\n   */\n  protected isActiveTarget(targetId: TargetId): boolean {\n    const targetActive = this.targetDataForActiveTarget(targetId) !== null;\n    if (!targetActive) {\n      logDebug(LOG_TAG, 'Detected inactive target', targetId);\n    }\n    return targetActive;\n  }\n\n  /**\n   * Returns the TargetData for an active target (i.e. a target that the user\n   * is still interested in that has no outstanding target change requests).\n   */\n  protected targetDataForActiveTarget(targetId: TargetId): TargetData | null {\n    const targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending\n      ? null\n      : this.metadataProvider.getTargetDataForTarget(targetId);\n  }\n\n  /**\n   * Resets the state of a Watch target to its initial state (e.g. sets\n   * 'current' to false, clears the resume token and removes its target mapping\n   * from all documents).\n   */\n  private resetTarget(targetId: TargetId): void {\n    debugAssert(\n      !this.targetStates.get(targetId)!.isPending,\n      'Should only reset active targets'\n    );\n    this.targetStates.set(targetId, new TargetState());\n\n    // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(key => {\n      this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\n    });\n  }\n  /**\n   * Returns whether the LocalStore considers the document to be part of the\n   * specified target.\n   */\n  private targetContainsDocument(\n    targetId: TargetId,\n    key: DocumentKey\n  ): boolean {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  }\n}\n\nfunction documentTargetMap(): SortedMap<DocumentKey, SortedSet<TargetId>> {\n  return new SortedMap<DocumentKey, SortedSet<TargetId>>(\n    DocumentKey.comparator\n  );\n}\n\nfunction snapshotChangesMap(): SortedMap<DocumentKey, ChangeType> {\n  return new SortedMap<DocumentKey, ChangeType>(DocumentKey.comparator);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { Timestamp } from '../api/timestamp';\nimport { normalizeTimestamp } from './values';\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nexport function isServerTimestamp(value: api.Value | null): boolean {\n  const type = (value?.mapValue?.fields || {})[TYPE_KEY]?.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nexport function serverTimestamp(\n  localWriteTime: Timestamp,\n  previousValue: api.Value | null\n): api.Value {\n  const mapValue: api.MapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n\n  if (previousValue) {\n    mapValue.fields![PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return { mapValue };\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nexport function getPreviousValue(value: api.Value): api.Value | null {\n  const previousValue = value.mapValue!.fields![PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nexport function getLocalWriteTime(value: api.Value): Timestamp {\n  const localWriteTime = normalizeTimestamp(\n    value.mapValue!.fields![LOCAL_WRITE_TIME_KEY].timestampValue!\n  );\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { TypeOrder } from './object_value';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach, objectSize } from '../util/obj';\nimport { ByteString } from '../util/byte_string';\nimport { isNegativeZero } from '../util/types';\nimport { DocumentKey } from './document_key';\nimport { arrayEquals, primitiveComparator } from '../util/misc';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  getLocalWriteTime,\n  getPreviousValue,\n  isServerTimestamp\n} from './server_timestamps';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/\n);\n\n/** Extracts the backend's type order for the provided value. */\nexport function typeOrder(value: api.Value): TypeOrder {\n  if ('nullValue' in value) {\n    return TypeOrder.NullValue;\n  } else if ('booleanValue' in value) {\n    return TypeOrder.BooleanValue;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return TypeOrder.NumberValue;\n  } else if ('timestampValue' in value) {\n    return TypeOrder.TimestampValue;\n  } else if ('stringValue' in value) {\n    return TypeOrder.StringValue;\n  } else if ('bytesValue' in value) {\n    return TypeOrder.BlobValue;\n  } else if ('referenceValue' in value) {\n    return TypeOrder.RefValue;\n  } else if ('geoPointValue' in value) {\n    return TypeOrder.GeoPointValue;\n  } else if ('arrayValue' in value) {\n    return TypeOrder.ArrayValue;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return TypeOrder.ServerTimestampValue;\n    }\n    return TypeOrder.ObjectValue;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nexport function valueEquals(left: api.Value, right: api.Value): boolean {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return true;\n    case TypeOrder.BooleanValue:\n      return left.booleanValue === right.booleanValue;\n    case TypeOrder.ServerTimestampValue:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case TypeOrder.TimestampValue:\n      return timestampEquals(left, right);\n    case TypeOrder.StringValue:\n      return left.stringValue === right.stringValue;\n    case TypeOrder.BlobValue:\n      return blobEquals(left, right);\n    case TypeOrder.RefValue:\n      return left.referenceValue === right.referenceValue;\n    case TypeOrder.GeoPointValue:\n      return geoPointEquals(left, right);\n    case TypeOrder.NumberValue:\n      return numberEquals(left, right);\n    case TypeOrder.ArrayValue:\n      return arrayEquals(\n        left.arrayValue!.values || [],\n        right.arrayValue!.values || [],\n        valueEquals\n      );\n    case TypeOrder.ObjectValue:\n      return objectEquals(left, right);\n    default:\n      return fail('Unexpected value type: ' + JSON.stringify(left));\n  }\n}\n\nfunction timestampEquals(left: api.Value, right: api.Value): boolean {\n  if (\n    typeof left.timestampValue === 'string' &&\n    typeof right.timestampValue === 'string' &&\n    left.timestampValue.length === right.timestampValue.length\n  ) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  const leftTimestamp = normalizeTimestamp(left.timestampValue!);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue!);\n  return (\n    leftTimestamp.seconds === rightTimestamp.seconds &&\n    leftTimestamp.nanos === rightTimestamp.nanos\n  );\n}\n\nfunction geoPointEquals(left: api.Value, right: api.Value): boolean {\n  return (\n    normalizeNumber(left.geoPointValue!.latitude) ===\n      normalizeNumber(right.geoPointValue!.latitude) &&\n    normalizeNumber(left.geoPointValue!.longitude) ===\n      normalizeNumber(right.geoPointValue!.longitude)\n  );\n}\n\nfunction blobEquals(left: api.Value, right: api.Value): boolean {\n  return normalizeByteString(left.bytesValue!).isEqual(\n    normalizeByteString(right.bytesValue!)\n  );\n}\n\nexport function numberEquals(left: api.Value, right: api.Value): boolean {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return (\n      normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue)\n    );\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue!);\n    const n2 = normalizeNumber(right.doubleValue!);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left: api.Value, right: api.Value): boolean {\n  const leftMap = left.mapValue!.fields || {};\n  const rightMap = right.mapValue!.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (\n        rightMap[key] === undefined ||\n        !valueEquals(leftMap[key], rightMap[key])\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Returns true if the ArrayValue contains the specified element. */\nexport function arrayValueContains(\n  haystack: api.ArrayValue,\n  needle: api.Value\n): boolean {\n  return (\n    (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined\n  );\n}\n\nexport function valueCompare(left: api.Value, right: api.Value): number {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return 0;\n    case TypeOrder.BooleanValue:\n      return primitiveComparator(left.booleanValue!, right.booleanValue!);\n    case TypeOrder.NumberValue:\n      return compareNumbers(left, right);\n    case TypeOrder.TimestampValue:\n      return compareTimestamps(left.timestampValue!, right.timestampValue!);\n    case TypeOrder.ServerTimestampValue:\n      return compareTimestamps(\n        getLocalWriteTime(left),\n        getLocalWriteTime(right)\n      );\n    case TypeOrder.StringValue:\n      return primitiveComparator(left.stringValue!, right.stringValue!);\n    case TypeOrder.BlobValue:\n      return compareBlobs(left.bytesValue!, right.bytesValue!);\n    case TypeOrder.RefValue:\n      return compareReferences(left.referenceValue!, right.referenceValue!);\n    case TypeOrder.GeoPointValue:\n      return compareGeoPoints(left.geoPointValue!, right.geoPointValue!);\n    case TypeOrder.ArrayValue:\n      return compareArrays(left.arrayValue!, right.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return compareMaps(left.mapValue!, right.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + leftType);\n  }\n}\n\nfunction compareNumbers(left: api.Value, right: api.Value): number {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left: api.Timestamp, right: api.Timestamp): number {\n  if (\n    typeof left === 'string' &&\n    typeof right === 'string' &&\n    left.length === right.length\n  ) {\n    return primitiveComparator(left, right);\n  }\n\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n\n  const comparison = primitiveComparator(\n    leftTimestamp.seconds,\n    rightTimestamp.seconds\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath: string, rightPath: string): number {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left: api.LatLng, right: api.LatLng): number {\n  const comparison = primitiveComparator(\n    normalizeNumber(left.latitude),\n    normalizeNumber(right.latitude)\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(\n    normalizeNumber(left.longitude),\n    normalizeNumber(right.longitude)\n  );\n}\n\nfunction compareBlobs(\n  left: string | Uint8Array,\n  right: string | Uint8Array\n): number {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left: api.ArrayValue, right: api.ArrayValue): number {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left: api.MapValue, right: api.MapValue): number {\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nexport function canonicalId(value: api.Value): string {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value: api.Value): string {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue!;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue!;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue!;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue!);\n  } else if ('stringValue' in value) {\n    return value.stringValue!;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue!);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue!);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue!);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue!);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue!);\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction canonifyByteString(byteString: string | Uint8Array): string {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp: api.Timestamp): string {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\n\nfunction canonifyGeoPoint(geoPoint: api.LatLng): string {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\n\nfunction canonifyReference(referenceValue: string): string {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue: api.MapValue): string {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields![key])}`;\n  }\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue: api.ArrayValue): string {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nexport function estimateByteSize(value: api.Value): number {\n  switch (typeOrder(value)) {\n    case TypeOrder.NullValue:\n      return 4;\n    case TypeOrder.BooleanValue:\n      return 4;\n    case TypeOrder.NumberValue:\n      return 8;\n    case TypeOrder.TimestampValue:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case TypeOrder.ServerTimestampValue:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case TypeOrder.StringValue:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue!.length * 2;\n    case TypeOrder.BlobValue:\n      return normalizeByteString(value.bytesValue!).approximateByteSize();\n    case TypeOrder.RefValue:\n      return value.referenceValue!.length;\n    case TypeOrder.GeoPointValue:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case TypeOrder.ArrayValue:\n      return estimateArrayByteSize(value.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return estimateMapByteSize(value.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction estimateMapByteSize(mapValue: api.MapValue): number {\n  let size = 0;\n  forEach(mapValue.fields || {}, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\n\nfunction estimateArrayByteSize(arrayValue: api.ArrayValue): number {\n  return (arrayValue.values || []).reduce(\n    (previousSize, value) => previousSize + estimateByteSize(value),\n    0\n  );\n}\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nexport function normalizeTimestamp(\n  date: api.Timestamp\n): { seconds: number; nanos: number } {\n  hardAssert(!!date, 'Cannot normalize null or undefined timestamp.');\n\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction, 'invalid timestamp: ' + date);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n\n    return { seconds, nanos };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return { seconds, nanos };\n  }\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nexport function normalizeNumber(value: number | string | undefined): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nexport function normalizeByteString(blob: string | Uint8Array): ByteString {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/** Returns a reference value for the provided database and key. */\nexport function refValue(databaseId: DatabaseId, key: DocumentKey): api.Value {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${\n      databaseId.database\n    }/documents/${key.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an IntegerValue . */\nexport function isInteger(\n  value?: api.Value | null\n): value is { integerValue: string | number } {\n  return !!value && 'integerValue' in value;\n}\n\n/** Returns true if `value` is a DoubleValue. */\nexport function isDouble(\n  value?: api.Value | null\n): value is { doubleValue: string | number } {\n  return !!value && 'doubleValue' in value;\n}\n\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nexport function isNumber(value?: api.Value | null): boolean {\n  return isInteger(value) || isDouble(value);\n}\n\n/** Returns true if `value` is an ArrayValue. */\nexport function isArray(\n  value?: api.Value | null\n): value is { arrayValue: api.ArrayValue } {\n  return !!value && 'arrayValue' in value;\n}\n\n/** Returns true if `value` is a ReferenceValue. */\nexport function isReferenceValue(\n  value?: api.Value | null\n): value is { referenceValue: string } {\n  return !!value && 'referenceValue' in value;\n}\n\n/** Returns true if `value` is a NullValue. */\nexport function isNullValue(\n  value?: api.Value | null\n): value is { nullValue: 'NULL_VALUE' } {\n  return !!value && 'nullValue' in value;\n}\n\n/** Returns true if `value` is NaN. */\nexport function isNanValue(\n  value?: api.Value | null\n): value is { doubleValue: 'NaN' | number } {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nexport function isMapValue(\n  value?: api.Value | null\n): value is { mapValue: api.MapValue } {\n  return !!value && 'mapValue' in value;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { Timestamp } from '../api/timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  LimitType,\n  newQuery,\n  newQueryForPath,\n  Operator,\n  OrderBy,\n  queryToTarget\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { isDocumentTarget, Target } from '../core/target';\nimport { TargetId } from '../core/types';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ObjectValue } from '../model/object_value';\nimport {\n  DeleteMutation,\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation,\n  VerifyMutation\n} from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { ByteString } from '../util/byte_string';\nimport {\n  isNegativeZero,\n  isNullOrUndefined,\n  isSafeInteger\n} from '../util/types';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform,\n  TransformOperation\n} from '../model/transform_operation';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { isNanValue, isNullValue, normalizeTimestamp } from '../model/values';\nimport {\n  TargetChangeTargetChangeType,\n  WriteResult\n} from '../protos/firestore_proto_api';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: api.OrderDirection } = {};\n  dirs[Direction.ASCENDING] = 'ASCENDING';\n  dirs[Direction.DESCENDING] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: api.FieldFilterOp } = {};\n  ops[Operator.LESS_THAN] = 'LESS_THAN';\n  ops[Operator.LESS_THAN_OR_EQUAL] = 'LESS_THAN_OR_EQUAL';\n  ops[Operator.GREATER_THAN] = 'GREATER_THAN';\n  ops[Operator.GREATER_THAN_OR_EQUAL] = 'GREATER_THAN_OR_EQUAL';\n  ops[Operator.EQUAL] = 'EQUAL';\n  ops[Operator.ARRAY_CONTAINS] = 'ARRAY_CONTAINS';\n  ops[Operator.IN] = 'IN';\n  ops[Operator.ARRAY_CONTAINS_ANY] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\n\nfunction assertPresent(value: unknown, description: string): asserts value {\n  debugAssert(!isNullOrUndefined(value), description + ' is missing');\n}\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer {\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly useProto3Json: boolean\n  ) {}\n}\n\nfunction fromRpcStatus(status: api.Status): FirestoreError {\n  const code =\n    status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\n  return new FirestoreError(code, status.message || '');\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\nfunction toInt32Proto(\n  serializer: JsonProtoSerializer,\n  val: number | null\n): number | { value: number } | null {\n  if (serializer.useProto3Json || isNullOrUndefined(val)) {\n    return val;\n  } else {\n    return { value: val };\n  }\n}\n\n/**\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\n */\nfunction fromInt32Proto(\n  val: number | { value: number } | undefined\n): number | null {\n  let result;\n  if (typeof val === 'object') {\n    result = val.value;\n  } else {\n    result = val;\n  }\n  return isNullOrUndefined(result) ? null : result;\n}\n\n/**\n * Returns an IntegerValue for `value`.\n */\nexport function toInteger(value: number): api.Value {\n  return { integerValue: '' + value };\n}\n\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\nexport function toDouble(\n  serializer: JsonProtoSerializer,\n  value: number\n): api.Value {\n  if (serializer.useProto3Json) {\n    if (isNaN(value)) {\n      return { doubleValue: 'NaN' };\n    } else if (value === Infinity) {\n      return { doubleValue: 'Infinity' };\n    } else if (value === -Infinity) {\n      return { doubleValue: '-Infinity' };\n    }\n  }\n  return { doubleValue: isNegativeZero(value) ? '-0' : value };\n}\n\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nexport function toNumber(\n  serializer: JsonProtoSerializer,\n  value: number\n): api.Value {\n  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\n}\n\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nexport function toTimestamp(\n  serializer: JsonProtoSerializer,\n  timestamp: Timestamp\n): api.Timestamp {\n  if (serializer.useProto3Json) {\n    // Serialize to ISO-8601 date format, but with full nano resolution.\n    // Since JS Date has only millis, let's only use it for the seconds and\n    // then manually add the fractions to the end.\n    const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n    // Remove .xxx frac part and Z in the end.\n    const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n    // Pad the fraction out to 9 digits (nanos).\n    const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n\n    return `${strUntilSeconds}.${nanoStr}Z`;\n  } else {\n    return {\n      seconds: '' + timestamp.seconds,\n      nanos: timestamp.nanoseconds\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  }\n}\n\nfunction fromTimestamp(date: api.Timestamp): Timestamp {\n  const timestamp = normalizeTimestamp(date);\n  return new Timestamp(timestamp.seconds, timestamp.nanos);\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nexport function toBytes(\n  serializer: JsonProtoSerializer,\n  bytes: Blob | ByteString\n): string | Uint8Array {\n  if (serializer.useProto3Json) {\n    return bytes.toBase64();\n  } else {\n    return bytes.toUint8Array();\n  }\n}\n\n/**\n * Returns a ByteString based on the proto string value.\n */\nexport function fromBytes(\n  serializer: JsonProtoSerializer,\n  value: string | Uint8Array | undefined\n): ByteString {\n  if (serializer.useProto3Json) {\n    hardAssert(\n      value === undefined || typeof value === 'string',\n      'value must be undefined or a string when using proto3 Json'\n    );\n    return ByteString.fromBase64String(value ? value : '');\n  } else {\n    hardAssert(\n      value === undefined || value instanceof Uint8Array,\n      'value must be undefined or Uint8Array'\n    );\n    return ByteString.fromUint8Array(value ? value : new Uint8Array());\n  }\n}\n\nexport function toVersion(\n  serializer: JsonProtoSerializer,\n  version: SnapshotVersion\n): api.Timestamp {\n  return toTimestamp(serializer, version.toTimestamp());\n}\n\nexport function fromVersion(version: api.Timestamp): SnapshotVersion {\n  hardAssert(!!version, \"Trying to deserialize version that isn't set\");\n  return SnapshotVersion.fromTimestamp(fromTimestamp(version));\n}\n\nexport function toResourceName(\n  databaseId: DatabaseId,\n  path: ResourcePath\n): string {\n  return fullyQualifiedPrefixPath(databaseId)\n    .child('documents')\n    .child(path)\n    .canonicalString();\n}\n\nfunction fromResourceName(name: string): ResourcePath {\n  const resource = ResourcePath.fromString(name);\n  hardAssert(\n    isValidResourceName(resource),\n    'Tried to deserialize invalid key ' + resource.toString()\n  );\n  return resource;\n}\n\nexport function toName(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey\n): string {\n  return toResourceName(serializer.databaseId, key.path);\n}\n\nexport function fromName(\n  serializer: JsonProtoSerializer,\n  name: string\n): DocumentKey {\n  const resource = fromResourceName(name);\n  hardAssert(\n    resource.get(1) === serializer.databaseId.projectId,\n    'Tried to deserialize key from different project: ' +\n      resource.get(1) +\n      ' vs ' +\n      serializer.databaseId.projectId\n  );\n  hardAssert(\n    (!resource.get(3) && !serializer.databaseId.database) ||\n      resource.get(3) === serializer.databaseId.database,\n    'Tried to deserialize key from different database: ' +\n      resource.get(3) +\n      ' vs ' +\n      serializer.databaseId.database\n  );\n  return new DocumentKey(extractLocalPathFromResourceName(resource));\n}\n\nfunction toQueryPath(\n  serializer: JsonProtoSerializer,\n  path: ResourcePath\n): string {\n  return toResourceName(serializer.databaseId, path);\n}\n\nfunction fromQueryPath(name: string): ResourcePath {\n  const resourceName = fromResourceName(name);\n  // In v1beta1 queries for collections at the root did not have a trailing\n  // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n  // ability to read the v1beta1 form for compatibility with queries persisted\n  // in the local target cache.\n  if (resourceName.length === 4) {\n    return ResourcePath.emptyPath();\n  }\n  return extractLocalPathFromResourceName(resourceName);\n}\n\nexport function getEncodedDatabaseId(serializer: JsonProtoSerializer): string {\n  const path = new ResourcePath([\n    'projects',\n    serializer.databaseId.projectId,\n    'databases',\n    serializer.databaseId.database\n  ]);\n  return path.canonicalString();\n}\n\nfunction fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n  return new ResourcePath([\n    'projects',\n    databaseId.projectId,\n    'databases',\n    databaseId.database\n  ]);\n}\n\nfunction extractLocalPathFromResourceName(\n  resourceName: ResourcePath\n): ResourcePath {\n  hardAssert(\n    resourceName.length > 4 && resourceName.get(4) === 'documents',\n    'tried to deserialize invalid key ' + resourceName.toString()\n  );\n  return resourceName.popFirst(5);\n}\n\n/** Creates an api.Document from key and fields (but no create/update time) */\nexport function toMutationDocument(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey,\n  fields: ObjectValue\n): api.Document {\n  return {\n    name: toName(serializer, key),\n    fields: fields.proto.mapValue.fields\n  };\n}\n\nexport function toDocument(\n  serializer: JsonProtoSerializer,\n  document: Document\n): api.Document {\n  debugAssert(\n    !document.hasLocalMutations,\n    \"Can't serialize documents with mutations.\"\n  );\n  return {\n    name: toName(serializer, document.key),\n    fields: document.toProto().mapValue.fields,\n    updateTime: toTimestamp(serializer, document.version.toTimestamp())\n  };\n}\n\nexport function fromDocument(\n  serializer: JsonProtoSerializer,\n  document: api.Document,\n  hasCommittedMutations?: boolean\n): Document {\n  const key = fromName(serializer, document.name!);\n  const version = fromVersion(document.updateTime!);\n  const data = new ObjectValue({ mapValue: { fields: document.fields } });\n  return new Document(key, version, data, {\n    hasCommittedMutations: !!hasCommittedMutations\n  });\n}\n\nfunction fromFound(\n  serializer: JsonProtoSerializer,\n  doc: api.BatchGetDocumentsResponse\n): Document {\n  hardAssert(\n    !!doc.found,\n    'Tried to deserialize a found document from a missing document.'\n  );\n  assertPresent(doc.found.name, 'doc.found.name');\n  assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n  const key = fromName(serializer, doc.found.name);\n  const version = fromVersion(doc.found.updateTime);\n  const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\n  return new Document(key, version, data, {});\n}\n\nfunction fromMissing(\n  serializer: JsonProtoSerializer,\n  result: api.BatchGetDocumentsResponse\n): NoDocument {\n  hardAssert(\n    !!result.missing,\n    'Tried to deserialize a missing document from a found document.'\n  );\n  hardAssert(\n    !!result.readTime,\n    'Tried to deserialize a missing document without a read time.'\n  );\n  const key = fromName(serializer, result.missing);\n  const version = fromVersion(result.readTime);\n  return new NoDocument(key, version);\n}\n\nexport function fromMaybeDocument(\n  serializer: JsonProtoSerializer,\n  result: api.BatchGetDocumentsResponse\n): MaybeDocument {\n  if ('found' in result) {\n    return fromFound(serializer, result);\n  } else if ('missing' in result) {\n    return fromMissing(serializer, result);\n  }\n  return fail('invalid batch get response: ' + JSON.stringify(result));\n}\n\nexport function fromWatchChange(\n  serializer: JsonProtoSerializer,\n  change: api.ListenResponse\n): WatchChange {\n  let watchChange: WatchChange;\n  if ('targetChange' in change) {\n    assertPresent(change.targetChange, 'targetChange');\n    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n    // if unset\n    const state = fromWatchTargetChangeState(\n      change.targetChange.targetChangeType || 'NO_CHANGE'\n    );\n    const targetIds: TargetId[] = change.targetChange.targetIds || [];\n\n    const resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\n    const causeProto = change.targetChange!.cause;\n    const cause = causeProto && fromRpcStatus(causeProto);\n    watchChange = new WatchTargetChange(\n      state,\n      targetIds,\n      resumeToken,\n      cause || null\n    );\n  } else if ('documentChange' in change) {\n    assertPresent(change.documentChange, 'documentChange');\n    const entityChange = change.documentChange;\n    assertPresent(entityChange.document, 'documentChange.name');\n    assertPresent(entityChange.document.name, 'documentChange.document.name');\n    assertPresent(\n      entityChange.document.updateTime,\n      'documentChange.document.updateTime'\n    );\n    const key = fromName(serializer, entityChange.document.name);\n    const version = fromVersion(entityChange.document.updateTime);\n    const data = new ObjectValue({\n      mapValue: { fields: entityChange.document.fields }\n    });\n    const doc = new Document(key, version, data, {});\n    const updatedTargetIds = entityChange.targetIds || [];\n    const removedTargetIds = entityChange.removedTargetIds || [];\n    watchChange = new DocumentWatchChange(\n      updatedTargetIds,\n      removedTargetIds,\n      doc.key,\n      doc\n    );\n  } else if ('documentDelete' in change) {\n    assertPresent(change.documentDelete, 'documentDelete');\n    const docDelete = change.documentDelete;\n    assertPresent(docDelete.document, 'documentDelete.document');\n    const key = fromName(serializer, docDelete.document);\n    const version = docDelete.readTime\n      ? fromVersion(docDelete.readTime)\n      : SnapshotVersion.min();\n    const doc = new NoDocument(key, version);\n    const removedTargetIds = docDelete.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n  } else if ('documentRemove' in change) {\n    assertPresent(change.documentRemove, 'documentRemove');\n    const docRemove = change.documentRemove;\n    assertPresent(docRemove.document, 'documentRemove');\n    const key = fromName(serializer, docRemove.document);\n    const removedTargetIds = docRemove.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n  } else if ('filter' in change) {\n    // TODO(dimond): implement existence filter parsing with strategy.\n    assertPresent(change.filter, 'filter');\n    const filter = change.filter;\n    assertPresent(filter.targetId, 'filter.targetId');\n    const count = filter.count || 0;\n    const existenceFilter = new ExistenceFilter(count);\n    const targetId = filter.targetId;\n    watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n  } else {\n    return fail('Unknown change type ' + JSON.stringify(change));\n  }\n  return watchChange;\n}\n\nfunction fromWatchTargetChangeState(\n  state: TargetChangeTargetChangeType\n): WatchTargetChangeState {\n  if (state === 'NO_CHANGE') {\n    return WatchTargetChangeState.NoChange;\n  } else if (state === 'ADD') {\n    return WatchTargetChangeState.Added;\n  } else if (state === 'REMOVE') {\n    return WatchTargetChangeState.Removed;\n  } else if (state === 'CURRENT') {\n    return WatchTargetChangeState.Current;\n  } else if (state === 'RESET') {\n    return WatchTargetChangeState.Reset;\n  } else {\n    return fail('Got unexpected TargetChange.state: ' + state);\n  }\n}\n\nexport function versionFromListenResponse(\n  change: api.ListenResponse\n): SnapshotVersion {\n  // We have only reached a consistent snapshot for the entire stream if there\n  // is a read_time set and it applies to all targets (i.e. the list of\n  // targets is empty). The backend is guaranteed to send such responses.\n  if (!('targetChange' in change)) {\n    return SnapshotVersion.min();\n  }\n  const targetChange = change.targetChange!;\n  if (targetChange.targetIds && targetChange.targetIds.length) {\n    return SnapshotVersion.min();\n  }\n  if (!targetChange.readTime) {\n    return SnapshotVersion.min();\n  }\n  return fromVersion(targetChange.readTime);\n}\n\nexport function toMutation(\n  serializer: JsonProtoSerializer,\n  mutation: Mutation\n): api.Write {\n  let result: api.Write;\n  if (mutation instanceof SetMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.value)\n    };\n  } else if (mutation instanceof DeleteMutation) {\n    result = { delete: toName(serializer, mutation.key) };\n  } else if (mutation instanceof PatchMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.data),\n      updateMask: toDocumentMask(mutation.fieldMask)\n    };\n  } else if (mutation instanceof TransformMutation) {\n    result = {\n      transform: {\n        document: toName(serializer, mutation.key),\n        fieldTransforms: mutation.fieldTransforms.map(transform =>\n          toFieldTransform(serializer, transform)\n        )\n      }\n    };\n  } else if (mutation instanceof VerifyMutation) {\n    result = {\n      verify: toName(serializer, mutation.key)\n    };\n  } else {\n    return fail('Unknown mutation type ' + mutation.type);\n  }\n\n  if (!mutation.precondition.isNone) {\n    result.currentDocument = toPrecondition(serializer, mutation.precondition);\n  }\n\n  return result;\n}\n\nexport function fromMutation(\n  serializer: JsonProtoSerializer,\n  proto: api.Write\n): Mutation {\n  const precondition = proto.currentDocument\n    ? fromPrecondition(proto.currentDocument)\n    : Precondition.none();\n\n  if (proto.update) {\n    assertPresent(proto.update.name, 'name');\n    const key = fromName(serializer, proto.update.name);\n    const value = new ObjectValue({\n      mapValue: { fields: proto.update.fields }\n    });\n    if (proto.updateMask) {\n      const fieldMask = fromDocumentMask(proto.updateMask);\n      return new PatchMutation(key, value, fieldMask, precondition);\n    } else {\n      return new SetMutation(key, value, precondition);\n    }\n  } else if (proto.delete) {\n    const key = fromName(serializer, proto.delete);\n    return new DeleteMutation(key, precondition);\n  } else if (proto.transform) {\n    const key = fromName(serializer, proto.transform.document!);\n    const fieldTransforms = proto.transform.fieldTransforms!.map(transform =>\n      fromFieldTransform(serializer, transform)\n    );\n    hardAssert(\n      precondition.exists === true,\n      'Transforms only support precondition \"exists == true\"'\n    );\n    return new TransformMutation(key, fieldTransforms);\n  } else if (proto.verify) {\n    const key = fromName(serializer, proto.verify);\n    return new VerifyMutation(key, precondition);\n  } else {\n    return fail('unknown mutation proto: ' + JSON.stringify(proto));\n  }\n}\n\nfunction toPrecondition(\n  serializer: JsonProtoSerializer,\n  precondition: Precondition\n): api.Precondition {\n  debugAssert(!precondition.isNone, \"Can't serialize an empty precondition\");\n  if (precondition.updateTime !== undefined) {\n    return {\n      updateTime: toVersion(serializer, precondition.updateTime)\n    };\n  } else if (precondition.exists !== undefined) {\n    return { exists: precondition.exists };\n  } else {\n    return fail('Unknown precondition');\n  }\n}\n\nfunction fromPrecondition(precondition: api.Precondition): Precondition {\n  if (precondition.updateTime !== undefined) {\n    return Precondition.updateTime(fromVersion(precondition.updateTime));\n  } else if (precondition.exists !== undefined) {\n    return Precondition.exists(precondition.exists);\n  } else {\n    return Precondition.none();\n  }\n}\n\nfunction fromWriteResult(\n  proto: WriteResult,\n  commitTime: api.Timestamp\n): MutationResult {\n  // NOTE: Deletes don't have an updateTime.\n  let version = proto.updateTime\n    ? fromVersion(proto.updateTime)\n    : fromVersion(commitTime);\n\n  if (version.isEqual(SnapshotVersion.min())) {\n    // The Firestore Emulator currently returns an update time of 0 for\n    // deletes of non-existing documents (rather than null). This breaks the\n    // test \"get deleted doc while offline with source=cache\" as NoDocuments\n    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n    // TODO(#2149): Remove this when Emulator is fixed\n    version = fromVersion(commitTime);\n  }\n\n  let transformResults: api.Value[] | null = null;\n  if (proto.transformResults && proto.transformResults.length > 0) {\n    transformResults = proto.transformResults;\n  }\n  return new MutationResult(version, transformResults);\n}\n\nexport function fromWriteResults(\n  protos: WriteResult[] | undefined,\n  commitTime?: api.Timestamp\n): MutationResult[] {\n  if (protos && protos.length > 0) {\n    hardAssert(\n      commitTime !== undefined,\n      'Received a write result without a commit time'\n    );\n    return protos.map(proto => fromWriteResult(proto, commitTime));\n  } else {\n    return [];\n  }\n}\n\nfunction toFieldTransform(\n  serializer: JsonProtoSerializer,\n  fieldTransform: FieldTransform\n): api.FieldTransform {\n  const transform = fieldTransform.transform;\n  if (transform instanceof ServerTimestampTransform) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      appendMissingElements: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      removeAllFromArray: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof NumericIncrementTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      increment: transform.operand\n    };\n  } else {\n    throw fail('Unknown transform: ' + fieldTransform.transform);\n  }\n}\n\nfunction fromFieldTransform(\n  serializer: JsonProtoSerializer,\n  proto: api.FieldTransform\n): FieldTransform {\n  let transform: TransformOperation | null = null;\n  if ('setToServerValue' in proto) {\n    hardAssert(\n      proto.setToServerValue === 'REQUEST_TIME',\n      'Unknown server value transform proto: ' + JSON.stringify(proto)\n    );\n    transform = new ServerTimestampTransform();\n  } else if ('appendMissingElements' in proto) {\n    const values = proto.appendMissingElements!.values || [];\n    transform = new ArrayUnionTransformOperation(values);\n  } else if ('removeAllFromArray' in proto) {\n    const values = proto.removeAllFromArray!.values || [];\n    transform = new ArrayRemoveTransformOperation(values);\n  } else if ('increment' in proto) {\n    transform = new NumericIncrementTransformOperation(\n      serializer,\n      proto.increment!\n    );\n  } else {\n    fail('Unknown transform proto: ' + JSON.stringify(proto));\n  }\n  const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n  return new FieldTransform(fieldPath, transform!);\n}\n\nexport function toDocumentsTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): api.DocumentsTarget {\n  return { documents: [toQueryPath(serializer, target.path)] };\n}\n\nexport function fromDocumentsTarget(\n  documentsTarget: api.DocumentsTarget\n): Target {\n  const count = documentsTarget.documents!.length;\n  hardAssert(\n    count === 1,\n    'DocumentsTarget contained other than 1 document: ' + count\n  );\n  const name = documentsTarget.documents![0];\n  return queryToTarget(newQueryForPath(fromQueryPath(name)));\n}\n\nexport function toQueryTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): api.QueryTarget {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const result: api.QueryTarget = { structuredQuery: {} };\n  const path = target.path;\n  if (target.collectionGroup !== null) {\n    debugAssert(\n      path.length % 2 === 0,\n      'Collection Group queries should be within a document path or root.'\n    );\n    result.parent = toQueryPath(serializer, path);\n    result.structuredQuery!.from = [\n      {\n        collectionId: target.collectionGroup,\n        allDescendants: true\n      }\n    ];\n  } else {\n    debugAssert(\n      path.length % 2 !== 0,\n      'Document queries with filters are not supported.'\n    );\n    result.parent = toQueryPath(serializer, path.popLast());\n    result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n  }\n\n  const where = toFilter(target.filters);\n  if (where) {\n    result.structuredQuery!.where = where;\n  }\n\n  const orderBy = toOrder(target.orderBy);\n  if (orderBy) {\n    result.structuredQuery!.orderBy = orderBy;\n  }\n\n  const limit = toInt32Proto(serializer, target.limit);\n  if (limit !== null) {\n    result.structuredQuery!.limit = limit;\n  }\n\n  if (target.startAt) {\n    result.structuredQuery!.startAt = toCursor(target.startAt);\n  }\n  if (target.endAt) {\n    result.structuredQuery!.endAt = toCursor(target.endAt);\n  }\n\n  return result;\n}\n\nexport function fromQueryTarget(target: api.QueryTarget): Target {\n  let path = fromQueryPath(target.parent!);\n\n  const query = target.structuredQuery!;\n  const fromCount = query.from ? query.from.length : 0;\n  let collectionGroup: string | null = null;\n  if (fromCount > 0) {\n    hardAssert(\n      fromCount === 1,\n      'StructuredQuery.from with more than one collection is not supported.'\n    );\n    const from = query.from![0];\n    if (from.allDescendants) {\n      collectionGroup = from.collectionId!;\n    } else {\n      path = path.child(from.collectionId!);\n    }\n  }\n\n  let filterBy: Filter[] = [];\n  if (query.where) {\n    filterBy = fromFilter(query.where);\n  }\n\n  let orderBy: OrderBy[] = [];\n  if (query.orderBy) {\n    orderBy = fromOrder(query.orderBy);\n  }\n\n  let limit: number | null = null;\n  if (query.limit) {\n    limit = fromInt32Proto(query.limit);\n  }\n\n  let startAt: Bound | null = null;\n  if (query.startAt) {\n    startAt = fromCursor(query.startAt);\n  }\n\n  let endAt: Bound | null = null;\n  if (query.endAt) {\n    endAt = fromCursor(query.endAt);\n  }\n\n  return queryToTarget(\n    newQuery(\n      path,\n      collectionGroup,\n      orderBy,\n      filterBy,\n      limit,\n      LimitType.First,\n      startAt,\n      endAt\n    )\n  );\n}\n\nexport function toListenRequestLabels(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): api.ApiClientObjectMap<string> | null {\n  const value = toLabel(serializer, targetData.purpose);\n  if (value == null) {\n    return null;\n  } else {\n    return {\n      'goog-listen-tags': value\n    };\n  }\n}\n\nfunction toLabel(\n  serializer: JsonProtoSerializer,\n  purpose: TargetPurpose\n): string | null {\n  switch (purpose) {\n    case TargetPurpose.Listen:\n      return null;\n    case TargetPurpose.ExistenceFilterMismatch:\n      return 'existence-filter-mismatch';\n    case TargetPurpose.LimboResolution:\n      return 'limbo-document';\n    default:\n      return fail('Unrecognized query purpose: ' + purpose);\n  }\n}\n\nexport function toTarget(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): api.Target {\n  let result: api.Target;\n  const target = targetData.target;\n\n  if (isDocumentTarget(target)) {\n    result = { documents: toDocumentsTarget(serializer, target) };\n  } else {\n    result = { query: toQueryTarget(serializer, target) };\n  }\n\n  result.targetId = targetData.targetId;\n\n  if (targetData.resumeToken.approximateByteSize() > 0) {\n    result.resumeToken = toBytes(serializer, targetData.resumeToken);\n  }\n\n  return result;\n}\n\nfunction toFilter(filters: Filter[]): api.Filter | undefined {\n  if (filters.length === 0) {\n    return;\n  }\n  const protos = filters.map(filter => {\n    if (filter instanceof FieldFilter) {\n      return toUnaryOrFieldFilter(filter);\n    } else {\n      return fail('Unrecognized filter: ' + JSON.stringify(filter));\n    }\n  });\n  if (protos.length === 1) {\n    return protos[0];\n  }\n  return { compositeFilter: { op: 'AND', filters: protos } };\n}\n\nfunction fromFilter(filter: api.Filter | undefined): Filter[] {\n  if (!filter) {\n    return [];\n  } else if (filter.unaryFilter !== undefined) {\n    return [fromUnaryFilter(filter)];\n  } else if (filter.fieldFilter !== undefined) {\n    return [fromFieldFilter(filter)];\n  } else if (filter.compositeFilter !== undefined) {\n    return filter.compositeFilter\n      .filters!.map(f => fromFilter(f))\n      .reduce((accum, current) => accum.concat(current));\n  } else {\n    return fail('Unknown filter: ' + JSON.stringify(filter));\n  }\n}\n\nfunction toOrder(orderBys: OrderBy[]): api.Order[] | undefined {\n  if (orderBys.length === 0) {\n    return;\n  }\n  return orderBys.map(order => toPropertyOrder(order));\n}\n\nfunction fromOrder(orderBys: api.Order[]): OrderBy[] {\n  return orderBys.map(order => fromPropertyOrder(order));\n}\n\nfunction toCursor(cursor: Bound): api.Cursor {\n  return {\n    before: cursor.before,\n    values: cursor.position\n  };\n}\n\nfunction fromCursor(cursor: api.Cursor): Bound {\n  const before = !!cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, before);\n}\n\n// visible for testing\nexport function toDirection(dir: Direction): api.OrderDirection {\n  return DIRECTIONS[dir];\n}\n\n// visible for testing\nexport function fromDirection(\n  dir: api.OrderDirection | undefined\n): Direction | undefined {\n  switch (dir) {\n    case 'ASCENDING':\n      return Direction.ASCENDING;\n    case 'DESCENDING':\n      return Direction.DESCENDING;\n    default:\n      return undefined;\n  }\n}\n\n// visible for testing\nexport function toOperatorName(op: Operator): api.FieldFilterOp {\n  return OPERATORS[op];\n}\n\nexport function fromOperatorName(op: api.FieldFilterOp): Operator {\n  switch (op) {\n    case 'EQUAL':\n      return Operator.EQUAL;\n    case 'GREATER_THAN':\n      return Operator.GREATER_THAN;\n    case 'GREATER_THAN_OR_EQUAL':\n      return Operator.GREATER_THAN_OR_EQUAL;\n    case 'LESS_THAN':\n      return Operator.LESS_THAN;\n    case 'LESS_THAN_OR_EQUAL':\n      return Operator.LESS_THAN_OR_EQUAL;\n    case 'ARRAY_CONTAINS':\n      return Operator.ARRAY_CONTAINS;\n    case 'IN':\n      return Operator.IN;\n    case 'ARRAY_CONTAINS_ANY':\n      return Operator.ARRAY_CONTAINS_ANY;\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified operator');\n    default:\n      return fail('Unknown operator');\n  }\n}\n\nexport function toFieldPathReference(path: FieldPath): api.FieldReference {\n  return { fieldPath: path.canonicalString() };\n}\n\nexport function fromFieldPathReference(\n  fieldReference: api.FieldReference\n): FieldPath {\n  return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n}\n\n// visible for testing\nexport function toPropertyOrder(orderBy: OrderBy): api.Order {\n  return {\n    field: toFieldPathReference(orderBy.field),\n    direction: toDirection(orderBy.dir)\n  };\n}\n\nexport function fromPropertyOrder(orderBy: api.Order): OrderBy {\n  return new OrderBy(\n    fromFieldPathReference(orderBy.field!),\n    fromDirection(orderBy.direction)\n  );\n}\n\nexport function fromFieldFilter(filter: api.Filter): Filter {\n  return FieldFilter.create(\n    fromFieldPathReference(filter.fieldFilter!.field!),\n    fromOperatorName(filter.fieldFilter!.op!),\n    filter.fieldFilter!.value!\n  );\n}\n\n// visible for testing\nexport function toUnaryOrFieldFilter(filter: FieldFilter): api.Filter {\n  if (filter.op === Operator.EQUAL) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NULL'\n        }\n      };\n    }\n  }\n  return {\n    fieldFilter: {\n      field: toFieldPathReference(filter.field),\n      op: toOperatorName(filter.op),\n      value: filter.value\n    }\n  };\n}\n\nexport function fromUnaryFilter(filter: api.Filter): Filter {\n  switch (filter.unaryFilter!.op!) {\n    case 'IS_NAN':\n      const nanField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nanField, Operator.EQUAL, {\n        doubleValue: NaN\n      });\n    case 'IS_NULL':\n      const nullField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nullField, Operator.EQUAL, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified filter');\n    default:\n      return fail('Unknown filter');\n  }\n}\n\nexport function toDocumentMask(fieldMask: FieldMask): api.DocumentMask {\n  const canonicalFields: string[] = [];\n  fieldMask.fields.forEach(field =>\n    canonicalFields.push(field.canonicalString())\n  );\n  return {\n    fieldPaths: canonicalFields\n  };\n}\n\nexport function fromDocumentMask(proto: api.DocumentMask): FieldMask {\n  const paths = proto.fieldPaths || [];\n  return new FieldMask(paths.map(path => FieldPath.fromServerFormat(path)));\n}\n\nexport function isValidResourceName(path: ResourcePath): boolean {\n  // Resource names have at least 4 components (project ID, database ID)\n  return (\n    path.length >= 4 &&\n    path.get(0) === 'projects' &&\n    path.get(2) === 'databases'\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { debugAssert } from '../util/assert';\nimport { JsonProtoSerializer, toDouble, toInteger } from '../remote/serializer';\nimport {\n  isArray,\n  isInteger,\n  isNumber,\n  normalizeNumber,\n  valueEquals\n} from './values';\nimport { serverTimestamp } from './server_timestamps';\nimport { arrayEquals } from '../util/misc';\n\n/** Represents a transform within a TransformMutation. */\nexport class TransformOperation {\n  // Make sure that the structural type of `TransformOperation` is unique.\n  // See https://github.com/microsoft/TypeScript/issues/5451\n  private _ = undefined;\n}\n\n/**\n * Computes the local transform result against the provided `previousValue`,\n * optionally using the provided localWriteTime.\n */\nexport function applyTransformOperationToLocalView(\n  transform: TransformOperation,\n  previousValue: api.Value | null,\n  localWriteTime: Timestamp\n): api.Value {\n  if (transform instanceof ServerTimestampTransform) {\n    return serverTimestamp(localWriteTime, previousValue);\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  } else {\n    debugAssert(\n      transform instanceof NumericIncrementTransformOperation,\n      'Expected NumericIncrementTransformOperation but was: ' + transform\n    );\n    return applyNumericIncrementTransformOperationToLocalView(\n      transform,\n      previousValue\n    );\n  }\n}\n\n/**\n * Computes a final transform result after the transform has been acknowledged\n * by the server, potentially using the server-provided transformResult.\n */\nexport function applyTransformOperationToRemoteDocument(\n  transform: TransformOperation,\n  previousValue: api.Value | null,\n  transformResult: api.Value | null\n): api.Value {\n  // The server just sends null as the transform result for array operations,\n  // so we have to calculate a result the same as we do for local\n  // applications.\n  if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  }\n\n  debugAssert(\n    transformResult !== null,\n    \"Didn't receive transformResult for non-array transform\"\n  );\n  return transformResult;\n}\n\n/**\n * If this transform operation is not idempotent, returns the base value to\n * persist for this transform. If a base value is returned, the transform\n * operation is always applied to this base value, even if document has\n * already been updated.\n *\n * Base values provide consistent behavior for non-idempotent transforms and\n * allow us to return the same latency-compensated value even if the backend\n * has already applied the transform operation. The base value is null for\n * idempotent transforms, as they can be re-played even if the backend has\n * already applied them.\n *\n * @return a base value to store along with the mutation, or null for\n * idempotent transforms.\n */\nexport function computeTransformOperationBaseValue(\n  transform: TransformOperation,\n  previousValue: api.Value | null\n): api.Value | null {\n  if (transform instanceof NumericIncrementTransformOperation) {\n    return isNumber(previousValue) ? previousValue! : { integerValue: 0 };\n  }\n  return null;\n}\n\nexport function transformOperationEquals(\n  left: TransformOperation,\n  right: TransformOperation\n): boolean {\n  if (\n    left instanceof ArrayUnionTransformOperation &&\n    right instanceof ArrayUnionTransformOperation\n  ) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (\n    left instanceof ArrayRemoveTransformOperation &&\n    right instanceof ArrayRemoveTransformOperation\n  ) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (\n    left instanceof NumericIncrementTransformOperation &&\n    right instanceof NumericIncrementTransformOperation\n  ) {\n    return valueEquals(left.operand, right.operand);\n  }\n\n  return (\n    left instanceof ServerTimestampTransform &&\n    right instanceof ServerTimestampTransform\n  );\n}\n\n/** Transforms a value into a server-generated timestamp. */\nexport class ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */\nexport class ArrayUnionTransformOperation extends TransformOperation {\n  constructor(readonly elements: api.Value[]) {\n    super();\n  }\n}\n\nfunction applyArrayUnionTransformOperation(\n  transform: ArrayUnionTransformOperation,\n  previousValue: api.Value | null\n): api.Value {\n  const values = coercedFieldValuesArray(previousValue);\n  for (const toUnion of transform.elements) {\n    if (!values.some(element => valueEquals(element, toUnion))) {\n      values.push(toUnion);\n    }\n  }\n  return { arrayValue: { values } };\n}\n\n/** Transforms an array value via a remove operation. */\nexport class ArrayRemoveTransformOperation extends TransformOperation {\n  constructor(readonly elements: api.Value[]) {\n    super();\n  }\n}\n\nfunction applyArrayRemoveTransformOperation(\n  transform: ArrayRemoveTransformOperation,\n  previousValue: api.Value | null\n): api.Value {\n  let values = coercedFieldValuesArray(previousValue);\n  for (const toRemove of transform.elements) {\n    values = values.filter(element => !valueEquals(element, toRemove));\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nexport class NumericIncrementTransformOperation extends TransformOperation {\n  constructor(\n    readonly serializer: JsonProtoSerializer,\n    readonly operand: api.Value\n  ) {\n    super();\n    debugAssert(\n      isNumber(operand),\n      'NumericIncrementTransform transform requires a NumberValue'\n    );\n  }\n}\n\nexport function applyNumericIncrementTransformOperationToLocalView(\n  transform: NumericIncrementTransformOperation,\n  previousValue: api.Value | null\n): api.Value {\n  // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n  // precision and resolves overflows by reducing precision, we do not\n  // manually cap overflows at 2^63.\n  const baseValue = computeTransformOperationBaseValue(\n    transform,\n    previousValue\n  )!;\n  const sum = asNumber(baseValue) + asNumber(transform.operand);\n  if (isInteger(baseValue) && isInteger(transform.operand)) {\n    return toInteger(sum);\n  } else {\n    return toDouble(transform.serializer, sum);\n  }\n}\n\nfunction asNumber(value: api.Value): number {\n  return normalizeNumber(value.integerValue || value.doubleValue);\n}\n\nfunction coercedFieldValuesArray(value: api.Value | null): api.Value[] {\n  return isArray(value) && value.arrayValue.values\n    ? value.arrayValue.values.slice()\n    : [];\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, hardAssert } from '../util/assert';\n\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from './document';\nimport { DocumentKey } from './document_key';\nimport { ObjectValue, ObjectValueBuilder } from './object_value';\nimport { FieldPath } from './path';\nimport {\n  applyTransformOperationToLocalView,\n  applyTransformOperationToRemoteDocument,\n  computeTransformOperationBaseValue,\n  TransformOperation,\n  transformOperationEquals\n} from './transform_operation';\nimport { arrayEquals } from '../util/misc';\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nexport class FieldMask {\n  constructor(readonly fields: FieldPath[]) {\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    fields.sort(FieldPath.comparator);\n    debugAssert(\n      !fields.some((v, i) => i !== 0 && v.isEqual(fields[i - 1])),\n      'FieldMask contains field that is not unique: ' +\n        fields.find((v, i) => i !== 0 && v.isEqual(fields[i - 1]))!\n    );\n  }\n\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath: FieldPath): boolean {\n    for (const fieldMaskPath of this.fields) {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isEqual(other: FieldMask): boolean {\n    return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\n  }\n}\n\n/** A field path and the TransformOperation to perform upon it. */\nexport class FieldTransform {\n  constructor(\n    readonly field: FieldPath,\n    readonly transform: TransformOperation\n  ) {}\n}\n\nexport function fieldTransformEquals(\n  left: FieldTransform,\n  right: FieldTransform\n): boolean {\n  return (\n    left.field.isEqual(right.field) &&\n    transformOperationEquals(left.transform, right.transform)\n  );\n}\n\n/** The result of successfully applying a mutation to the backend. */\nexport class MutationResult {\n  constructor(\n    /**\n     * The version at which the mutation was committed:\n     *\n     * - For most operations, this is the updateTime in the WriteResult.\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\n     *   not stored and have no updateTime).\n     *\n     * Note that these versions can be different: No-op writes will not change\n     * the updateTime even though the commitTime advances.\n     */\n    readonly version: SnapshotVersion,\n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    readonly transformResults: Array<api.Value | null> | null\n  ) {}\n}\n\nexport const enum MutationType {\n  Set,\n  Patch,\n  Transform,\n  Delete,\n  Verify\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nexport class Precondition {\n  private constructor(\n    readonly updateTime?: SnapshotVersion,\n    readonly exists?: boolean\n  ) {\n    debugAssert(\n      updateTime === undefined || exists === undefined,\n      'Precondition can specify \"exists\" or \"updateTime\" but not both'\n    );\n  }\n\n  /** Creates a new empty Precondition. */\n  static none(): Precondition {\n    return new Precondition();\n  }\n\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists: boolean): Precondition {\n    return new Precondition(undefined, exists);\n  }\n\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version: SnapshotVersion): Precondition {\n    return new Precondition(version);\n  }\n\n  /** Returns whether this Precondition is empty. */\n  get isNone(): boolean {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n\n  isEqual(other: Precondition): boolean {\n    return (\n      this.exists === other.exists &&\n      (this.updateTime\n        ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\n        : !other.updateTime)\n    );\n  }\n}\n\n/**\n * Returns true if the preconditions is valid for the given document\n * (or null if no document is available).\n */\nexport function preconditionIsValidForDocument(\n  precondition: Precondition,\n  maybeDoc: MaybeDocument | null\n): boolean {\n  if (precondition.updateTime !== undefined) {\n    return (\n      maybeDoc instanceof Document &&\n      maybeDoc.version.isEqual(precondition.updateTime)\n    );\n  } else if (precondition.exists !== undefined) {\n    return precondition.exists === maybeDoc instanceof Document;\n  } else {\n    debugAssert(precondition.isNone, 'Precondition should be empty');\n    return true;\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set, Patch, and Transform mutations. For Delete\n * mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set, Patch, and Transform mutations. As deletes\n * have no explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we return an `UnknownDocument` and rely on Watch to send us the\n * updated version.\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nexport abstract class Mutation {\n  abstract readonly type: MutationType;\n  abstract readonly key: DocumentKey;\n  abstract readonly precondition: Precondition;\n}\n\n/**\n * Applies this mutation to the given MaybeDocument or null for the purposes\n * of computing a new remote document. If the input document doesn't match the\n * expected state (e.g. it is null or outdated), an `UnknownDocument` can be\n * returned.\n *\n * @param mutation The mutation to apply.\n * @param maybeDoc The document to mutate. The input document can be null if\n *     the client has no knowledge of the pre-mutation state of the document.\n * @param mutationResult The result of applying the mutation from the backend.\n * @return The mutated document. The returned document may be an\n *     UnknownDocument if the mutation could not be applied to the locally\n *     cached base document.\n */\nexport function applyMutationToRemoteDocument(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): MaybeDocument {\n  verifyMutationKeyMatches(mutation, maybeDoc);\n  if (mutation instanceof SetMutation) {\n    return applySetMutationToRemoteDocument(mutation, maybeDoc, mutationResult);\n  } else if (mutation instanceof PatchMutation) {\n    return applyPatchMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  } else if (mutation instanceof TransformMutation) {\n    return applyTransformMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  } else {\n    debugAssert(\n      mutation instanceof DeleteMutation,\n      'Unexpected mutation type: ' + mutation\n    );\n    return applyDeleteMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  }\n}\n\n/**\n * Applies this mutation to the given MaybeDocument or null for the purposes\n * of computing the new local view of a document. Both the input and returned\n * documents can be null.\n *\n * @param mutation The mutation to apply.\n * @param maybeDoc The document to mutate. The input document can be null if\n *     the client has no knowledge of the pre-mutation state of the document.\n * @param baseDoc The state of the document prior to this mutation batch. The\n *     input document can be null if the client has no knowledge of the\n *     pre-mutation state of the document.\n * @param localWriteTime A timestamp indicating the local write time of the\n *     batch this mutation is a part of.\n * @return The mutated document. The returned document may be null, but only\n *     if maybeDoc was null and the mutation would not create a new document.\n */\nexport function applyMutationToLocalView(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null,\n  baseDoc: MaybeDocument | null,\n  localWriteTime: Timestamp\n): MaybeDocument | null {\n  verifyMutationKeyMatches(mutation, maybeDoc);\n\n  if (mutation instanceof SetMutation) {\n    return applySetMutationToLocalView(mutation, maybeDoc);\n  } else if (mutation instanceof PatchMutation) {\n    return applyPatchMutationToLocalView(mutation, maybeDoc);\n  } else if (mutation instanceof TransformMutation) {\n    return applyTransformMutationToLocalView(\n      mutation,\n      maybeDoc,\n      localWriteTime,\n      baseDoc\n    );\n  } else {\n    debugAssert(\n      mutation instanceof DeleteMutation,\n      'Unexpected mutation type: ' + mutation\n    );\n    return applyDeleteMutationToLocalView(mutation, maybeDoc);\n  }\n}\n\n/**\n * If this mutation is not idempotent, returns the base value to persist with\n * this mutation. If a base value is returned, the mutation is always applied\n * to this base value, even if document has already been updated.\n *\n * The base value is a sparse object that consists of only the document\n * fields for which this mutation contains a non-idempotent transformation\n * (e.g. a numeric increment). The provided value guarantees consistent\n * behavior for non-idempotent transforms and allow us to return the same\n * latency-compensated value even if the backend has already applied the\n * mutation. The base value is null for idempotent mutations, as they can be\n * re-played even if the backend has already applied them.\n *\n * @return a base value to store along with the mutation, or null for\n * idempotent mutations.\n */\nexport function extractMutationBaseValue(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): ObjectValue | null {\n  if (mutation instanceof TransformMutation) {\n    return extractTransformMutationBaseValue(mutation, maybeDoc);\n  }\n  return null;\n}\n\nexport function mutationEquals(left: Mutation, right: Mutation): boolean {\n  if (left.type !== right.type) {\n    return false;\n  }\n\n  if (!left.key.isEqual(right.key)) {\n    return false;\n  }\n\n  if (!left.precondition.isEqual(right.precondition)) {\n    return false;\n  }\n\n  if (left.type === MutationType.Set) {\n    return (left as SetMutation).value.isEqual((right as SetMutation).value);\n  }\n\n  if (left.type === MutationType.Patch) {\n    return (\n      (left as PatchMutation).data.isEqual((right as PatchMutation).data) &&\n      (left as PatchMutation).fieldMask.isEqual(\n        (right as PatchMutation).fieldMask\n      )\n    );\n  }\n\n  if (left.type === MutationType.Transform) {\n    return arrayEquals(\n      (left as TransformMutation).fieldTransforms,\n      (left as TransformMutation).fieldTransforms,\n      (l, r) => fieldTransformEquals(l, r)\n    );\n  }\n\n  return true;\n}\n\nfunction verifyMutationKeyMatches(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): void {\n  if (maybeDoc != null) {\n    debugAssert(\n      maybeDoc.key.isEqual(mutation.key),\n      'Can only apply a mutation to a document with the same key'\n    );\n  }\n}\n\n/**\n * Returns the version from the given document for use as the result of a\n * mutation. Mutations are defined to return the version of the base document\n * only if it is an existing document. Deleted and unknown documents have a\n * post-mutation version of SnapshotVersion.min().\n */\nfunction getPostMutationVersion(\n  maybeDoc: MaybeDocument | null\n): SnapshotVersion {\n  if (maybeDoc instanceof Document) {\n    return maybeDoc.version;\n  } else {\n    return SnapshotVersion.min();\n  }\n}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nexport class SetMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly value: ObjectValue,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Set;\n}\n\nfunction applySetMutationToRemoteDocument(\n  mutation: SetMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): Document {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by SetMutation.'\n  );\n\n  // Unlike applySetMutationToLocalView, if we're applying a mutation to a\n  // remote document the server has accepted the mutation so the precondition\n  // must have held.\n  return new Document(mutation.key, mutationResult.version, mutation.value, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applySetMutationToLocalView(\n  mutation: SetMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const version = getPostMutationVersion(maybeDoc);\n  return new Document(mutation.key, version, mutation.value, {\n    hasLocalMutations: true\n  });\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nexport class PatchMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Patch;\n}\n\nfunction applyPatchMutationToRemoteDocument(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): MaybeDocument {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by PatchMutation.'\n  );\n\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    // Since the mutation was not rejected, we know that the  precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and return an UnknownDocument with the\n    // known updateTime.\n    return new UnknownDocument(mutation.key, mutationResult.version);\n  }\n\n  const newData = patchDocument(mutation, maybeDoc);\n  return new Document(mutation.key, mutationResult.version, newData, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyPatchMutationToLocalView(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const version = getPostMutationVersion(maybeDoc);\n  const newData = patchDocument(mutation, maybeDoc);\n  return new Document(mutation.key, version, newData, {\n    hasLocalMutations: true\n  });\n}\n\n/**\n * Patches the data of document if available or creates a new document. Note\n * that this does not check whether or not the precondition of this patch\n * holds.\n */\nfunction patchDocument(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null\n): ObjectValue {\n  let data: ObjectValue;\n  if (maybeDoc instanceof Document) {\n    data = maybeDoc.data();\n  } else {\n    data = ObjectValue.empty();\n  }\n  return patchObject(mutation, data);\n}\n\nfunction patchObject(mutation: PatchMutation, data: ObjectValue): ObjectValue {\n  const builder = new ObjectValueBuilder(data);\n  mutation.fieldMask.fields.forEach(fieldPath => {\n    if (!fieldPath.isEmpty()) {\n      const newValue = mutation.data.field(fieldPath);\n      if (newValue !== null) {\n        builder.set(fieldPath, newValue);\n      } else {\n        builder.delete(fieldPath);\n      }\n    }\n  });\n  return builder.build();\n}\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nexport class TransformMutation extends Mutation {\n  readonly type: MutationType = MutationType.Transform;\n\n  // NOTE: We set a precondition of exists: true as a safety-check, since we\n  // always combine TransformMutations with a SetMutation or PatchMutation which\n  // (if successful) should end up with an existing document.\n  readonly precondition = Precondition.exists(true);\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly fieldTransforms: FieldTransform[]\n  ) {\n    super();\n  }\n}\n\nfunction applyTransformMutationToRemoteDocument(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): Document | UnknownDocument {\n  hardAssert(\n    mutationResult.transformResults != null,\n    'Transform results missing for TransformMutation.'\n  );\n\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    // Since the mutation was not rejected, we know that the  precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and return an UnknownDocument with the\n    // known updateTime.\n    return new UnknownDocument(mutation.key, mutationResult.version);\n  }\n\n  const doc = requireDocument(mutation, maybeDoc);\n  const transformResults = serverTransformResults(\n    mutation.fieldTransforms,\n    maybeDoc,\n    mutationResult.transformResults!\n  );\n\n  const version = mutationResult.version;\n  const newData = transformObject(mutation, doc.data(), transformResults);\n  return new Document(mutation.key, version, newData, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyTransformMutationToLocalView(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null,\n  localWriteTime: Timestamp,\n  baseDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const doc = requireDocument(mutation, maybeDoc);\n  const transformResults = localTransformResults(\n    mutation.fieldTransforms,\n    localWriteTime,\n    maybeDoc,\n    baseDoc\n  );\n  const newData = transformObject(mutation, doc.data(), transformResults);\n  return new Document(mutation.key, doc.version, newData, {\n    hasLocalMutations: true\n  });\n}\n\nfunction extractTransformMutationBaseValue(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null | Document\n): ObjectValue | null {\n  let baseObject: ObjectValueBuilder | null = null;\n  for (const fieldTransform of mutation.fieldTransforms) {\n    const existingValue =\n      maybeDoc instanceof Document\n        ? maybeDoc.field(fieldTransform.field)\n        : undefined;\n    const coercedValue = computeTransformOperationBaseValue(\n      fieldTransform.transform,\n      existingValue || null\n    );\n\n    if (coercedValue != null) {\n      if (baseObject == null) {\n        baseObject = new ObjectValueBuilder().set(\n          fieldTransform.field,\n          coercedValue\n        );\n      } else {\n        baseObject = baseObject.set(fieldTransform.field, coercedValue);\n      }\n    }\n  }\n  return baseObject ? baseObject.build() : null;\n}\n\n/**\n * Asserts that the given MaybeDocument is actually a Document and verifies\n * that it matches the key for this mutation. Since we only support\n * transformations with precondition exists this method is guaranteed to be\n * safe.\n */\nfunction requireDocument(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): Document {\n  debugAssert(\n    maybeDoc instanceof Document,\n    'Unknown MaybeDocument type ' + maybeDoc\n  );\n  debugAssert(\n    maybeDoc.key.isEqual(mutation.key),\n    'Can only transform a document with the same key'\n  );\n  return maybeDoc;\n}\n\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use after a\n * TransformMutation has been acknowledged by the server.\n *\n * @param fieldTransforms The field transforms to apply the result to.\n * @param baseDoc The document prior to applying this mutation batch.\n * @param serverTransformResults The transform results received by the server.\n * @return The transform results list.\n */\nfunction serverTransformResults(\n  fieldTransforms: FieldTransform[],\n  baseDoc: MaybeDocument | null,\n  serverTransformResults: Array<api.Value | null>\n): api.Value[] {\n  const transformResults: api.Value[] = [];\n  hardAssert(\n    fieldTransforms.length === serverTransformResults.length,\n    `server transform result count (${serverTransformResults.length}) ` +\n      `should match field transform count (${fieldTransforms.length})`\n  );\n\n  for (let i = 0; i < serverTransformResults.length; i++) {\n    const fieldTransform = fieldTransforms[i];\n    const transform = fieldTransform.transform;\n    let previousValue: api.Value | null = null;\n    if (baseDoc instanceof Document) {\n      previousValue = baseDoc.field(fieldTransform.field);\n    }\n    transformResults.push(\n      applyTransformOperationToRemoteDocument(\n        transform,\n        previousValue,\n        serverTransformResults[i]\n      )\n    );\n  }\n  return transformResults;\n}\n\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use when applying a\n * TransformMutation locally.\n *\n * @param fieldTransforms The field transforms to apply the result to.\n * @param localWriteTime The local time of the transform mutation (used to\n *     generate ServerTimestampValues).\n * @param maybeDoc The current state of the document after applying all\n *     previous mutations.\n * @param baseDoc The document prior to applying this mutation batch.\n * @return The transform results list.\n */\nfunction localTransformResults(\n  fieldTransforms: FieldTransform[],\n  localWriteTime: Timestamp,\n  maybeDoc: MaybeDocument | null,\n  baseDoc: MaybeDocument | null\n): api.Value[] {\n  const transformResults: api.Value[] = [];\n  for (const fieldTransform of fieldTransforms) {\n    const transform = fieldTransform.transform;\n\n    let previousValue: api.Value | null = null;\n    if (maybeDoc instanceof Document) {\n      previousValue = maybeDoc.field(fieldTransform.field);\n    }\n\n    if (previousValue === null && baseDoc instanceof Document) {\n      // If the current document does not contain a value for the mutated\n      // field, use the value that existed before applying this mutation\n      // batch. This solves an edge case where a PatchMutation clears the\n      // values in a nested map before the TransformMutation is applied.\n      previousValue = baseDoc.field(fieldTransform.field);\n    }\n\n    transformResults.push(\n      applyTransformOperationToLocalView(\n        transform,\n        previousValue,\n        localWriteTime\n      )\n    );\n  }\n  return transformResults;\n}\n\nfunction transformObject(\n  mutation: TransformMutation,\n  data: ObjectValue,\n  transformResults: api.Value[]\n): ObjectValue {\n  debugAssert(\n    transformResults.length === mutation.fieldTransforms.length,\n    'TransformResults length mismatch.'\n  );\n\n  const builder = new ObjectValueBuilder(data);\n  for (let i = 0; i < mutation.fieldTransforms.length; i++) {\n    const fieldTransform = mutation.fieldTransforms[i];\n    builder.set(fieldTransform.field, transformResults[i]);\n  }\n  return builder.build();\n}\n\n/** A mutation that deletes the document at the given key. */\nexport class DeleteMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Delete;\n}\n\nfunction applyDeleteMutationToRemoteDocument(\n  mutation: DeleteMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): NoDocument {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by DeleteMutation.'\n  );\n\n  // Unlike applyToLocalView, if we're applying a mutation to a remote\n  // document the server has accepted the mutation so the precondition must\n  // have held.\n\n  return new NoDocument(mutation.key, mutationResult.version, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyDeleteMutationToLocalView(\n  mutation: DeleteMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  if (maybeDoc) {\n    debugAssert(\n      maybeDoc.key.isEqual(mutation.key),\n      'Can only apply mutation to document with same key'\n    );\n  }\n  return new NoDocument(mutation.key, SnapshotVersion.min());\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nexport class VerifyMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Verify;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { debugAssert } from '../util/assert';\nimport { FieldMask } from './mutation';\nimport { FieldPath } from './path';\nimport { isServerTimestamp } from './server_timestamps';\nimport { valueEquals, isMapValue, typeOrder } from './values';\nimport { forEach } from '../util/obj';\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport const enum TypeOrder {\n  // This order is based on the backend's ordering, but modified to support\n  // server timestamps.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  ServerTimestampValue = 4,\n  StringValue = 5,\n  BlobValue = 6,\n  RefValue = 7,\n  GeoPointValue = 8,\n  ArrayValue = 9,\n  ObjectValue = 10\n}\n\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nexport class ObjectValue {\n  constructor(readonly proto: { mapValue: api.MapValue }) {\n    debugAssert(\n      !isServerTimestamp(proto),\n      'ServerTimestamps should be converted to ServerTimestampValue'\n    );\n  }\n\n  static empty(): ObjectValue {\n    return new ObjectValue({ mapValue: {} });\n  }\n\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path the path to search\n   * @return The value at the path or if there it doesn't exist.\n   */\n  field(path: FieldPath): api.Value | null {\n    if (path.isEmpty()) {\n      return this.proto;\n    } else {\n      let value: api.Value = this.proto;\n      for (let i = 0; i < path.length - 1; ++i) {\n        if (!value.mapValue!.fields) {\n          return null;\n        }\n        value = value.mapValue!.fields[path.get(i)];\n        if (!isMapValue(value)) {\n          return null;\n        }\n      }\n\n      value = (value.mapValue!.fields || {})[path.lastSegment()];\n      return value || null;\n    }\n  }\n\n  isEqual(other: ObjectValue): boolean {\n    return valueEquals(this.proto, other.proto);\n  }\n}\n\n/**\n * An Overlay, which contains an update to apply. Can either be Value proto, a\n * map of Overlay values (to represent additional nesting at the given key) or\n * `null` (to represent field deletes).\n */\ntype Overlay = Map<string, Overlay> | api.Value | null;\n\n/**\n * An ObjectValueBuilder provides APIs to set and delete fields from an\n * ObjectValue.\n */\nexport class ObjectValueBuilder {\n  /** A map that contains the accumulated changes in this builder. */\n  private overlayMap = new Map<string, Overlay>();\n\n  /**\n   * @param baseObject The object to mutate.\n   */\n  constructor(private readonly baseObject: ObjectValue = ObjectValue.empty()) {}\n\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path The field path to set.\n   * @param value The value to set.\n   * @return The current Builder instance.\n   */\n  set(path: FieldPath, value: api.Value): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot set field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, value);\n    return this;\n  }\n\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path The field path to remove.\n   * @return The current Builder instance.\n   */\n  delete(path: FieldPath): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, null);\n    return this;\n  }\n\n  /**\n   * Adds `value` to the overlay map at `path`. Creates nested map entries if\n   * needed.\n   */\n  private setOverlay(path: FieldPath, value: api.Value | null): void {\n    let currentLevel = this.overlayMap;\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      const currentSegment = path.get(i);\n      let currentValue = currentLevel.get(currentSegment);\n\n      if (currentValue instanceof Map) {\n        // Re-use a previously created map\n        currentLevel = currentValue;\n      } else if (\n        currentValue &&\n        typeOrder(currentValue) === TypeOrder.ObjectValue\n      ) {\n        // Convert the existing Protobuf MapValue into a map\n        currentValue = new Map<string, Overlay>(\n          Object.entries(currentValue.mapValue!.fields || {})\n        );\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      } else {\n        // Create an empty map to represent the current nesting level\n        currentValue = new Map<string, Overlay>();\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      }\n    }\n\n    currentLevel.set(path.lastSegment(), value);\n  }\n\n  /** Returns an ObjectValue with all mutations applied. */\n  build(): ObjectValue {\n    const mergedResult = this.applyOverlay(\n      FieldPath.emptyPath(),\n      this.overlayMap\n    );\n    if (mergedResult != null) {\n      return new ObjectValue(mergedResult);\n    } else {\n      return this.baseObject;\n    }\n  }\n\n  /**\n   * Applies any overlays from `currentOverlays` that exist at `currentPath`\n   * and returns the merged data at `currentPath` (or null if there were no\n   * changes).\n   *\n   * @param currentPath The path at the current nesting level. Can be set to\n   * FieldValue.emptyPath() to represent the root.\n   * @param currentOverlays The overlays at the current nesting level in the\n   * same format as `overlayMap`.\n   * @return The merged data at `currentPath` or null if no modifications\n   * were applied.\n   */\n  private applyOverlay(\n    currentPath: FieldPath,\n    currentOverlays: Map<string, Overlay>\n  ): { mapValue: api.MapValue } | null {\n    let modified = false;\n\n    const existingValue = this.baseObject.field(currentPath);\n    const resultAtPath = isMapValue(existingValue)\n      ? // If there is already data at the current path, base our\n        // modifications on top of the existing data.\n        { ...existingValue.mapValue.fields }\n      : {};\n\n    currentOverlays.forEach((value, pathSegment) => {\n      if (value instanceof Map) {\n        const nested = this.applyOverlay(currentPath.child(pathSegment), value);\n        if (nested != null) {\n          resultAtPath[pathSegment] = nested;\n          modified = true;\n        }\n      } else if (value !== null) {\n        resultAtPath[pathSegment] = value;\n        modified = true;\n      } else if (resultAtPath.hasOwnProperty(pathSegment)) {\n        delete resultAtPath[pathSegment];\n        modified = true;\n      }\n    });\n\n    return modified ? { mapValue: { fields: resultAtPath } } : null;\n  }\n}\n\n/**\n * Returns a FieldMask built from all fields in a MapValue.\n */\nexport function extractFieldMask(value: api.MapValue): FieldMask {\n  const fields: FieldPath[] = [];\n  forEach(value!.fields || {}, (key, value) => {\n    const currentPath = new FieldPath([key]);\n    if (isMapValue(value)) {\n      const nestedMask = extractFieldMask(value.mapValue!);\n      const nestedFields = nestedMask.fields;\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (const nestedPath of nestedFields) {\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\n\nimport { DocumentKey } from './document_key';\nimport { ObjectValue } from './object_value';\nimport { FieldPath } from './path';\nimport { valueCompare } from './values';\n\nexport interface DocumentOptions {\n  hasLocalMutations?: boolean;\n  hasCommittedMutations?: boolean;\n}\n\n/**\n * The result of a lookup for a given path may be an existing document or a\n * marker that this document does not exist at a given version.\n */\nexport abstract class MaybeDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  /**\n   * Whether this document had a local mutation applied that has not yet been\n   * acknowledged by Watch.\n   */\n  abstract get hasPendingWrites(): boolean;\n\n  abstract isEqual(other: MaybeDocument | null | undefined): boolean;\n\n  abstract toString(): string;\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether the\n * data has local mutations applied to it.\n */\nexport class Document extends MaybeDocument {\n  readonly hasLocalMutations: boolean;\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    private readonly objectValue: ObjectValue,\n    options: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasLocalMutations = !!options.hasLocalMutations;\n    this.hasCommittedMutations = !!options.hasCommittedMutations;\n  }\n\n  field(path: FieldPath): api.Value | null {\n    return this.objectValue.field(path);\n  }\n\n  data(): ObjectValue {\n    return this.objectValue;\n  }\n\n  toProto(): { mapValue: api.MapValue } {\n    return this.objectValue.proto;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.hasLocalMutations === other.hasLocalMutations &&\n      this.hasCommittedMutations === other.hasCommittedMutations &&\n      this.objectValue.isEqual(other.objectValue)\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${\n        this.version\n      }, ${this.objectValue.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}}), ` +\n      `{hasCommittedMutations: ${this.hasCommittedMutations}})`\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n}\n\n/**\n * Compares the value for field `field` in the provided documents. Throws if\n * the field does not exist in both documents.\n */\nexport function compareDocumentsByField(\n  field: FieldPath,\n  d1: Document,\n  d2: Document\n): number {\n  const v1 = d1.field(field);\n  const v2 = d2.field(field);\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail(\"Trying to compare documents on fields that don't exist\");\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument extends MaybeDocument {\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    options?: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasCommittedMutations = !!(options && options.hasCommittedMutations);\n  }\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasCommittedMutations;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof NoDocument &&\n      other.hasCommittedMutations === this.hasCommittedMutations &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n\n/**\n * A class representing an existing document whose data is unknown (e.g. a\n * document that was updated without a known base document).\n */\nexport class UnknownDocument extends MaybeDocument {\n  toString(): string {\n    return `UnknownDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return true;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof UnknownDocument &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../../../src/util/error';\n\n/**\n * Casts `obj` to `T`. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n */\nexport function cast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Type does not match the expected instance. Did you pass ' +\n          `'${constructor.name}' from a different Firestore SDK?`\n      );\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n      );\n    }\n  }\n  return obj as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BatchId } from '../core/types';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  DocumentVersionMap,\n  documentVersionMap,\n  MaybeDocumentMap\n} from './collections';\nimport { MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\nimport {\n  applyMutationToLocalView,\n  applyMutationToRemoteDocument,\n  Mutation,\n  mutationEquals,\n  MutationResult\n} from './mutation';\n\nexport const BATCHID_UNKNOWN = -1;\n\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nexport class MutationBatch {\n  /**\n   * @param batchId The unique ID of this mutation batch.\n   * @param localWriteTime The original write time of this mutation.\n   * @param baseMutations Mutations that are used to populate the base\n   * values when this mutation is applied locally. This can be used to locally\n   * overwrite values that are persisted in the remote document cache. Base\n   * mutations are never sent to the backend.\n   * @param mutations The user-provided mutations in this mutation batch.\n   * User-provided mutations are applied both locally and remotely on the\n   * backend.\n   */\n  constructor(\n    public batchId: BatchId,\n    public localWriteTime: Timestamp,\n    public baseMutations: Mutation[],\n    public mutations: Mutation[]\n  ) {\n    debugAssert(mutations.length > 0, 'Cannot create an empty mutation batch');\n  }\n\n  /**\n   * Applies all the mutations in this MutationBatch to the specified document\n   * to create a new remote document\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   * @param batchResult The result of applying the MutationBatch to the\n   * backend.\n   */\n  applyToRemoteDocument(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null,\n    batchResult: MutationBatchResult\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToRemoteDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    const mutationResults = batchResult.mutationResults;\n    debugAssert(\n      mutationResults.length === this.mutations.length,\n      `Mismatch between mutations length\n      (${this.mutations.length}) and mutation results length\n      (${mutationResults.length}).`\n    );\n\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.isEqual(docKey)) {\n        const mutationResult = mutationResults[i];\n        maybeDoc = applyMutationToRemoteDocument(\n          mutation,\n          maybeDoc,\n          mutationResult\n        );\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view of a document given all the mutations in this\n   * batch.\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   */\n  applyToLocalView(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToLocalDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (const mutation of this.baseMutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = applyMutationToLocalView(\n          mutation,\n          maybeDoc,\n          maybeDoc,\n          this.localWriteTime\n        );\n      }\n    }\n\n    const baseDoc = maybeDoc;\n\n    // Second, apply all user-provided mutations.\n    for (const mutation of this.mutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = applyMutationToLocalView(\n          mutation,\n          maybeDoc,\n          baseDoc,\n          this.localWriteTime\n        );\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view for all provided documents given the mutations in\n   * this batch.\n   */\n  applyToLocalDocumentSet(maybeDocs: MaybeDocumentMap): MaybeDocumentMap {\n    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n    let mutatedDocuments = maybeDocs;\n    this.mutations.forEach(m => {\n      const mutatedDocument = this.applyToLocalView(\n        m.key,\n        maybeDocs.get(m.key)\n      );\n      if (mutatedDocument) {\n        mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);\n      }\n    });\n    return mutatedDocuments;\n  }\n\n  keys(): DocumentKeySet {\n    return this.mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n  }\n\n  isEqual(other: MutationBatch): boolean {\n    return (\n      this.batchId === other.batchId &&\n      arrayEquals(this.mutations, other.mutations, (l, r) =>\n        mutationEquals(l, r)\n      ) &&\n      arrayEquals(this.baseMutations, other.baseMutations, (l, r) =>\n        mutationEquals(l, r)\n      )\n    );\n  }\n}\n\n/** The result of applying a mutation batch to the backend. */\nexport class MutationBatchResult {\n  private constructor(\n    readonly batch: MutationBatch,\n    readonly commitVersion: SnapshotVersion,\n    readonly mutationResults: MutationResult[],\n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    readonly docVersions: DocumentVersionMap\n  ) {}\n\n  /**\n   * Creates a new MutationBatchResult for the given batch and results. There\n   * must be one result for each mutation in the batch. This static factory\n   * caches a document=>version mapping (docVersions).\n   */\n  static from(\n    batch: MutationBatch,\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): MutationBatchResult {\n    hardAssert(\n      batch.mutations.length === results.length,\n      'Mutations sent ' +\n        batch.mutations.length +\n        ' must equal results received ' +\n        results.length\n    );\n\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n\n    return new MutationBatchResult(batch, commitVersion, results, versionMap);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\n\nexport type FulfilledHandler<T, R> =\n  | ((result: T) => R | PersistencePromise<R>)\n  | null;\nexport type RejectedHandler<R> =\n  | ((reason: Error) => R | PersistencePromise<R>)\n  | null;\nexport type Resolver<T> = (value?: T) => void;\nexport type Rejector = (error: Error) => void;\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nexport class PersistencePromise<T> {\n  // NOTE: next/catchCallback will always point to our own wrapper functions,\n  // not the user's raw next() or catch() callbacks.\n  private nextCallback: FulfilledHandler<T, unknown> = null;\n  private catchCallback: RejectedHandler<unknown> = null;\n\n  // When the operation resolves, we'll set result or error and mark isDone.\n  private result: T | undefined = undefined;\n  private error: Error | undefined = undefined;\n  private isDone = false;\n\n  // Set to true when .then() or .catch() are called and prevents additional\n  // chaining.\n  private callbackAttached = false;\n\n  constructor(callback: (resolve: Resolver<T>, reject: Rejector) => void) {\n    callback(\n      value => {\n        this.isDone = true;\n        this.result = value;\n        if (this.nextCallback) {\n          // value should be defined unless T is Void, but we can't express\n          // that in the type system.\n          this.nextCallback(value!);\n        }\n      },\n      error => {\n        this.isDone = true;\n        this.error = error;\n        if (this.catchCallback) {\n          this.catchCallback(error);\n        }\n      }\n    );\n  }\n\n  catch<R>(\n    fn: (error: Error) => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    return this.next(undefined, fn);\n  }\n\n  next<R>(\n    nextFn?: FulfilledHandler<T, R>,\n    catchFn?: RejectedHandler<R>\n  ): PersistencePromise<R> {\n    if (this.callbackAttached) {\n      fail('Called next() or catch() twice for PersistencePromise');\n    }\n    this.callbackAttached = true;\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result!);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise<R>((resolve, reject) => {\n        this.nextCallback = (value: T) => {\n          this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n        this.catchCallback = (error: Error) => {\n          this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  }\n\n  toPromise(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.next(resolve, reject);\n    });\n  }\n\n  private wrapUserFunction<R>(\n    fn: () => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    try {\n      const result = fn();\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject<R>(e);\n    }\n  }\n\n  private wrapSuccess<R>(\n    nextFn: FulfilledHandler<T, R> | undefined,\n    value: T\n  ): PersistencePromise<R> {\n    if (nextFn) {\n      return this.wrapUserFunction(() => nextFn(value));\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve<R>((value as unknown) as R);\n    }\n  }\n\n  private wrapFailure<R>(\n    catchFn: RejectedHandler<R> | undefined,\n    error: Error\n  ): PersistencePromise<R> {\n    if (catchFn) {\n      return this.wrapUserFunction(() => catchFn(error));\n    } else {\n      return PersistencePromise.reject<R>(error);\n    }\n  }\n\n  static resolve(): PersistencePromise<void>;\n  static resolve<R>(result: R): PersistencePromise<R>;\n  static resolve<R>(result?: R): PersistencePromise<R | void> {\n    return new PersistencePromise<R | void>((resolve, reject) => {\n      resolve(result);\n    });\n  }\n\n  static reject<R>(error: Error): PersistencePromise<R> {\n    return new PersistencePromise<R>((resolve, reject) => {\n      reject(error);\n    });\n  }\n\n  static waitFor(\n    // Accept all Promise types in waitFor().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    all: { forEach: (cb: (el: PersistencePromise<any>) => void) => void }\n  ): PersistencePromise<void> {\n    return new PersistencePromise<void>((resolve, reject) => {\n      let expectedCount = 0;\n      let resolvedCount = 0;\n      let done = false;\n\n      all.forEach(element => {\n        ++expectedCount;\n        element.next(\n          () => {\n            ++resolvedCount;\n            if (done && resolvedCount === expectedCount) {\n              resolve();\n            }\n          },\n          err => reject(err)\n        );\n      });\n\n      done = true;\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Given an array of predicate functions that asynchronously evaluate to a\n   * boolean, implements a short-circuiting `or` between the results. Predicates\n   * will be evaluated until one of them returns `true`, then stop. The final\n   * result will be whether any of them returned `true`.\n   */\n  static or(\n    predicates: Array<() => PersistencePromise<boolean>>\n  ): PersistencePromise<boolean> {\n    let p: PersistencePromise<boolean> = PersistencePromise.resolve<boolean>(\n      false\n    );\n    for (const predicate of predicates) {\n      p = p.next(isTrue => {\n        if (isTrue) {\n          return PersistencePromise.resolve<boolean>(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    }\n    return p;\n  }\n\n  /**\n   * Given an iterable, call the given function on each element in the\n   * collection and wait for all of the resulting concurrent PersistencePromises\n   * to resolve.\n   */\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s: S) => void) => void },\n    f:\n      | ((r: R, s: S) => PersistencePromise<void>)\n      | ((r: R) => PersistencePromise<void>)\n  ): PersistencePromise<void>;\n  static forEach<R>(\n    collection: { forEach: (cb: (r: R) => void) => void },\n    f: (r: R) => PersistencePromise<void>\n  ): PersistencePromise<void>;\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s?: S) => void) => void },\n    f: (r: R, s?: S) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    const promises: Array<PersistencePromise<void>> = [];\n    collection.forEach((r, s) => {\n      promises.push(f.call(this, r, s));\n    });\n    return this.waitFor(promises);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  isCollectionGroupQuery,\n  isDocumentQuery,\n  Query,\n  queryMatches\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  documentMap,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\n\nimport { debugAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { applyMutationToLocalView, PatchMutation } from '../model/mutation';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nexport class LocalDocumentsView {\n  constructor(\n    readonly remoteDocumentCache: RemoteDocumentCache,\n    readonly mutationQueue: MutationQueue,\n    readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Get the local view of the document identified by `key`.\n   *\n   * @return Local view of the document or null if we don't have any cached\n   * state for it.\n   */\n  getDocument(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKey(transaction, key)\n      .next(batches => this.getDocumentInternal(transaction, key, batches));\n  }\n\n  /** Internal version of `getDocument` that allows reusing batches. */\n  private getDocumentInternal(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    inBatches: MutationBatch[]\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.remoteDocumentCache.getEntry(transaction, key).next(doc => {\n      for (const batch of inBatches) {\n        doc = batch.applyToLocalView(key, doc);\n      }\n      return doc;\n    });\n  }\n\n  // Returns the view of the given `docs` as they would appear after applying\n  // all mutations in the given `batches`.\n  private applyLocalMutationsToDocuments(\n    transaction: PersistenceTransaction,\n    docs: NullableMaybeDocumentMap,\n    batches: MutationBatch[]\n  ): NullableMaybeDocumentMap {\n    let results = nullableMaybeDocumentMap();\n    docs.forEach((key, localView) => {\n      for (const batch of batches) {\n        localView = batch.applyToLocalView(key, localView);\n      }\n      results = results.insert(key, localView);\n    });\n    return results;\n  }\n\n  /**\n   * Gets the local view of the documents identified by `keys`.\n   *\n   * If we don't have cached state for a document in `keys`, a NoDocument will\n   * be stored for that key in the resulting set.\n   */\n  getDocuments(\n    transaction: PersistenceTransaction,\n    keys: DocumentKeySet\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.remoteDocumentCache\n      .getEntries(transaction, keys)\n      .next(docs => this.getLocalViewOfDocuments(transaction, docs));\n  }\n\n  /**\n   * Similar to `getDocuments`, but creates the local view from the given\n   * `baseDocs` without retrieving documents from the local store.\n   */\n  getLocalViewOfDocuments(\n    transaction: PersistenceTransaction,\n    baseDocs: NullableMaybeDocumentMap\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs)\n      .next(batches => {\n        const docs = this.applyLocalMutationsToDocuments(\n          transaction,\n          baseDocs,\n          batches\n        );\n        let results = maybeDocumentMap();\n        docs.forEach((key, maybeDoc) => {\n          // TODO(http://b/32275378): Don't conflate missing / deleted.\n          if (!maybeDoc) {\n            maybeDoc = new NoDocument(key, SnapshotVersion.min());\n          }\n          results = results.insert(key, maybeDoc);\n        });\n\n        return results;\n      });\n  }\n\n  /**\n   * Performs a query against the local view of all documents.\n   *\n   * @param transaction The persistence transaction.\n   * @param query The query to match documents against.\n   * @param sinceReadTime If not set to SnapshotVersion.min(), return only\n   *     documents that have been read since this snapshot version (exclusive).\n   */\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    if (isDocumentQuery(query)) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (isCollectionGroupQuery(query)) {\n      return this.getDocumentsMatchingCollectionGroupQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    }\n  }\n\n  private getDocumentsMatchingDocumentQuery(\n    transaction: PersistenceTransaction,\n    docPath: ResourcePath\n  ): PersistencePromise<DocumentMap> {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(\n      maybeDoc => {\n        let result = documentMap();\n        if (maybeDoc instanceof Document) {\n          result = result.insert(maybeDoc.key, maybeDoc);\n        }\n        return result;\n      }\n    );\n  }\n\n  private getDocumentsMatchingCollectionGroupQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      query.path.isEmpty(),\n      'Currently we only support collection group queries at the root.'\n    );\n    const collectionId = query.collectionGroup!;\n    let results = documentMap();\n    return this.indexManager\n      .getCollectionParents(transaction, collectionId)\n      .next(parents => {\n        // Perform a collection query against each parent that contains the\n        // collectionId and aggregate the results.\n        return PersistencePromise.forEach(parents, (parent: ResourcePath) => {\n          const collectionQuery = query.asCollectionQueryAtPath(\n            parent.child(collectionId)\n          );\n          return this.getDocumentsMatchingCollectionQuery(\n            transaction,\n            collectionQuery,\n            sinceReadTime\n          ).next(r => {\n            r.forEach((key, doc) => {\n              results = results.insert(key, doc);\n            });\n          });\n        }).next(() => results);\n      });\n  }\n\n  private getDocumentsMatchingCollectionQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    // Query the remote documents and overlay mutations.\n    let results: DocumentMap;\n    let mutationBatches: MutationBatch[];\n    return this.remoteDocumentCache\n      .getDocumentsMatchingQuery(transaction, query, sinceReadTime)\n      .next(queryResults => {\n        results = queryResults;\n        return this.mutationQueue.getAllMutationBatchesAffectingQuery(\n          transaction,\n          query\n        );\n      })\n      .next(matchingMutationBatches => {\n        mutationBatches = matchingMutationBatches;\n        // It is possible that a PatchMutation can make a document match a query, even if\n        // the version in the RemoteDocumentCache is not a match yet (waiting for server\n        // to ack). To handle this, we find all document keys affected by the PatchMutations\n        // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,\n        // otherwise those `PatchMutations` will be ignored because no base document can be found,\n        // and lead to missing result for the query.\n        return this.addMissingBaseDocuments(\n          transaction,\n          mutationBatches,\n          results\n        ).next(mergedDocuments => {\n          results = mergedDocuments;\n\n          for (const batch of mutationBatches) {\n            for (const mutation of batch.mutations) {\n              const key = mutation.key;\n              const baseDoc = results.get(key);\n              const mutatedDoc = applyMutationToLocalView(\n                mutation,\n                baseDoc,\n                baseDoc,\n                batch.localWriteTime\n              );\n              if (mutatedDoc instanceof Document) {\n                results = results.insert(key, mutatedDoc);\n              } else {\n                results = results.remove(key);\n              }\n            }\n          }\n        });\n      })\n      .next(() => {\n        // Finally, filter out any documents that don't actually match\n        // the query.\n        results.forEach((key, doc) => {\n          if (!queryMatches(query, doc)) {\n            results = results.remove(key);\n          }\n        });\n\n        return results;\n      });\n  }\n\n  private addMissingBaseDocuments(\n    transaction: PersistenceTransaction,\n    matchingMutationBatches: MutationBatch[],\n    existingDocuments: DocumentMap\n  ): PersistencePromise<DocumentMap> {\n    let missingBaseDocEntriesForPatching = documentKeySet();\n    for (const batch of matchingMutationBatches) {\n      for (const mutation of batch.mutations) {\n        if (\n          mutation instanceof PatchMutation &&\n          existingDocuments.get(mutation.key) === null\n        ) {\n          missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(\n            mutation.key\n          );\n        }\n      }\n    }\n\n    let mergedDocuments = existingDocuments;\n    return this.remoteDocumentCache\n      .getEntries(transaction, missingBaseDocEntriesForPatching)\n      .next(missingBaseDocs => {\n        missingBaseDocs.forEach((key, doc) => {\n          if (doc !== null && doc instanceof Document) {\n            mergedDocuments = mergedDocuments.insert(key, doc);\n          }\n        });\n        return mergedDocuments;\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from '../core/types';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nexport class LocalViewChanges {\n  constructor(\n    readonly targetId: TargetId,\n    readonly fromCache: boolean,\n    readonly addedKeys: DocumentKeySet,\n    readonly removedKeys: DocumentKeySet\n  ) {}\n\n  static fromSnapshot(\n    targetId: TargetId,\n    viewSnapshot: ViewSnapshot\n  ): LocalViewChanges {\n    let addedKeys = documentKeySet();\n    let removedKeys = documentKeySet();\n\n    for (const docChange of viewSnapshot.docChanges) {\n      switch (docChange.type) {\n        case ChangeType.Added:\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n        case ChangeType.Removed:\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        default:\n        // do nothing\n      }\n    }\n\n    return new LocalViewChanges(\n      targetId,\n      viewSnapshot.fromCache,\n      addedKeys,\n      removedKeys\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequenceNumber } from './types';\n\n/**\n * `SequenceNumberSyncer` defines the methods required to keep multiple instances of a\n * `ListenSequence` in sync.\n */\nexport interface SequenceNumberSyncer {\n  // Notify the syncer that a new sequence number has been used.\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n  // Setting this property allows the syncer to notify when a sequence number has been used, and\n  // and lets the ListenSequence adjust its internal previous value accordingly.\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n}\n\n/**\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\n * exceed. All subsequent calls to next will return increasing values. If provided with a\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\n * well as write out sequence numbers that it produces via `next()`.\n */\nexport class ListenSequence {\n  static readonly INVALID: ListenSequenceNumber = -1;\n\n  private writeNewSequenceNumber?: (\n    newSequenceNumber: ListenSequenceNumber\n  ) => void;\n\n  constructor(\n    private previousValue: ListenSequenceNumber,\n    sequenceNumberSyncer?: SequenceNumberSyncer\n  ) {\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber =>\n        this.setPreviousValue(sequenceNumber);\n      this.writeNewSequenceNumber = sequenceNumber =>\n        sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n    }\n  }\n\n  private setPreviousValue(\n    externalPreviousValue: ListenSequenceNumber\n  ): ListenSequenceNumber {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  }\n\n  next(): ListenSequenceNumber {\n    const nextValue = ++this.previousValue;\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n    return nextValue;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\nexport interface Rejecter {\n  (reason?: Error): void;\n}\n\nexport class Deferred<R = void> {\n  promise: Promise<R>;\n  // Assigned synchronously in constructor by Promise constructor callback.\n  resolve!: Resolver<R>;\n  reject!: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and a function from a value to a Promise. The function is run on each\n * value sequentially, waiting for the previous promise to resolve before starting the next one.\n * The returned promise resolves once the function has been run on all values.\n */\nexport function sequence<T>(\n  values: T[],\n  fn: (value: T) => Promise<void>\n): Promise<void> {\n  let p = Promise.resolve();\n  for (const value of values) {\n    p = p.then(() => fn(value));\n  }\n  return p;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { logDebug } from '../util/log';\n\nconst LOG_TAG = 'ExponentialBackoff';\n\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nexport class ExponentialBackoff {\n  private currentBaseMs: number = 0;\n  private timerPromise: DelayedOperation<void> | null = null;\n  /** The last backoff attempt, as epoch milliseconds. */\n  private lastAttemptTime = Date.now();\n\n  constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    private readonly queue: AsyncQueue,\n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    private readonly timerId: TimerId,\n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    private readonly initialDelayMs: number = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    private readonly backoffFactor: number = DEFAULT_BACKOFF_FACTOR,\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    private readonly maxDelayMs: number = DEFAULT_BACKOFF_MAX_DELAY_MS\n  ) {\n    this.reset();\n  }\n\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset(): void {\n    this.currentBaseMs = 0;\n  }\n\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax(): void {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op: () => Promise<void>): void {\n    // Cancel any pending backoff operation.\n    this.cancel();\n\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(\n      this.currentBaseMs + this.jitterDelayMs()\n    );\n\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(\n      0,\n      desiredDelayWithJitterMs - delaySoFarMs\n    );\n\n    if (remainingDelayMs > 0) {\n      logDebug(\n        LOG_TAG,\n        `Backing off for ${remainingDelayMs} ms ` +\n          `(base delay: ${this.currentBaseMs} ms, ` +\n          `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\n          `last attempt: ${delaySoFarMs} ms ago)`\n      );\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(\n      this.timerId,\n      remainingDelayMs,\n      () => {\n        this.lastAttemptTime = Date.now();\n        return op();\n      }\n    );\n\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n\n  skipBackoff(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  }\n\n  cancel(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  private jitterDelayMs(): number {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * An in-memory implementation of IndexManager.\n */\nexport class MemoryIndexManager implements IndexManager {\n  private collectionParentIndex = new MemoryCollectionParentIndex();\n\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    return PersistencePromise.resolve(\n      this.collectionParentIndex.getEntries(collectionId)\n    );\n  }\n}\n\n/**\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\n * in indexeddb_schema.ts\n */\nexport class MemoryCollectionParentIndex {\n  private index = {} as {\n    [collectionId: string]: SortedSet<ResourcePath>;\n  };\n\n  // Returns false if the entry already existed.\n  add(collectionPath: ResourcePath): boolean {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    const added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  }\n\n  has(collectionPath: ResourcePath): boolean {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  }\n\n  getEntries(collectionId: string): ResourcePath[] {\n    const parentPaths =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    return parentPaths.toArray();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from './types';\n\n/** Offset to ensure non-overlapping target ids. */\nconst OFFSET = 2;\n\n/**\n * Generates monotonically increasing target IDs for sending targets to the\n * watch stream.\n *\n * The client constructs two generators, one for the target cache, and one for\n * for the sync engine (to generate limbo documents targets). These\n * generators produce non-overlapping IDs (by using even and odd IDs\n * respectively).\n *\n * By separating the target ID space, the query cache can generate target IDs\n * that persist across client restarts, while sync engine can independently\n * generate in-memory target IDs that are transient and can be reused after a\n * restart.\n */\nexport class TargetIdGenerator {\n  constructor(private lastId: number) {}\n\n  next(): TargetId {\n    this.lastId += OFFSET;\n    return this.lastId;\n  }\n\n  static forTargetCache(): TargetIdGenerator {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  }\n\n  static forSyncEngine(): TargetIdGenerator {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\nimport { debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport { SCHEMA_VERSION } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\n\n// References to `window` are guarded by SimpleDb.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'SimpleDb';\n\n/**\n * The maximum number of retry attempts for an IndexedDb transaction that fails\n * with a DOMException.\n */\nconst TRANSACTION_RETRY_COUNT = 3;\n\n// The different modes supported by `SimpleDb.runTransaction()`\ntype SimpleDbTransactionMode = 'readonly' | 'readwrite';\n\nexport interface SimpleDbSchemaConverter {\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void>;\n}\n\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nexport class SimpleDb {\n  /**\n   * Opens the specified database, creating or upgrading it if necessary.\n   *\n   * Note that `version` must not be a downgrade. IndexedDB does not support downgrading the schema\n   * version. We currently do not support any way to do versioning outside of IndexedDB's versioning\n   * mechanism, as only version-upgrade transactions are allowed to do things like create\n   * objectstores.\n   */\n  static openOrCreate(\n    name: string,\n    version: number,\n    schemaConverter: SimpleDbSchemaConverter\n  ): Promise<SimpleDb> {\n    debugAssert(\n      SimpleDb.isAvailable(),\n      'IndexedDB not supported in current environment.'\n    );\n    logDebug(LOG_TAG, 'Opening database:', name);\n    return new PersistencePromise<SimpleDb>((resolve, reject) => {\n      // TODO(mikelehen): Investigate browser compatibility.\n      // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n      // suggests IE9 and older WebKit browsers handle upgrade\n      // differently. They expect setVersion, as described here:\n      // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n      const request = indexedDB.open(name, version);\n\n      request.onsuccess = (event: Event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        resolve(new SimpleDb(db));\n      };\n\n      request.onblocked = () => {\n        reject(\n          new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            'Cannot upgrade IndexedDB schema while another tab is open. ' +\n              'Close all tabs that access Firestore and reload this page to proceed.'\n          )\n        );\n      };\n\n      request.onerror = (event: Event) => {\n        const error: DOMException = (event.target as IDBOpenDBRequest).error!;\n        if (error.name === 'VersionError') {\n          reject(\n            new FirestoreError(\n              Code.FAILED_PRECONDITION,\n              'A newer version of the Firestore SDK was previously used and so the persisted ' +\n                'data is not compatible with the version of the SDK you are now using. The SDK ' +\n                'will operate with persistence disabled. If you need persistence, please ' +\n                're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' +\n                'data for your app to start fresh.'\n            )\n          );\n        } else {\n          reject(error);\n        }\n      };\n\n      request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n        logDebug(\n          LOG_TAG,\n          'Database \"' + name + '\" requires upgrade from version:',\n          event.oldVersion\n        );\n        const db = (event.target as IDBOpenDBRequest).result;\n        schemaConverter\n          .createOrUpgrade(\n            db,\n            request.transaction!,\n            event.oldVersion,\n            SCHEMA_VERSION\n          )\n          .next(() => {\n            logDebug(\n              LOG_TAG,\n              'Database upgrade to version ' + SCHEMA_VERSION + ' complete'\n            );\n          });\n      };\n    }).toPromise();\n  }\n\n  /** Deletes the specified database. */\n  static delete(name: string): Promise<void> {\n    logDebug(LOG_TAG, 'Removing database:', name);\n    return wrapRequest<void>(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable(): boolean {\n    if (typeof indexedDB === 'undefined') {\n      return false;\n    }\n\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    }\n\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n\n    // Check the UA string to find out the browser.\n    const ua = getUA();\n\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n    // iOS Safari: Disable for users running iOS version < 10.\n    const iOSVersion = SimpleDb.getIOSVersion(ua);\n    const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\n\n    // Android browser: Disable for userse running version < 4.5.\n    const androidVersion = SimpleDb.getAndroidVersion(ua);\n    const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n\n    if (\n      ua.indexOf('MSIE ') > 0 ||\n      ua.indexOf('Trident/') > 0 ||\n      ua.indexOf('Edge/') > 0 ||\n      isUnsupportedIOS ||\n      isUnsupportedAndroid\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\n   * (see https://github.com/axemclion/IndexedDBShim).\n   */\n  static isMockPersistence(): boolean {\n    return (\n      typeof process !== 'undefined' &&\n      process.env?.USE_MOCK_PERSISTENCE === 'YES'\n    );\n  }\n\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n  static getStore<KeyType extends IDBValidKey, ValueType extends unknown>(\n    txn: SimpleDbTransaction,\n    store: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    return txn.store<KeyType, ValueType>(store);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n  static getIOSVersion(ua: string): number {\n    const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    const version = iOSVersionRegex\n      ? iOSVersionRegex[1].split('_').slice(0, 2).join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine Android version. Returns -1 if not found. */\n  static getAndroidVersion(ua: string): number {\n    const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n    const version = androidVersionRegex\n      ? androidVersionRegex[1].split('.').slice(0, 2).join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  constructor(private db: IDBDatabase) {\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\n    // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n    if (iOSVersion === 12.2) {\n      logError(\n        'Firestore persistence suffers from a bug in iOS 12.2 ' +\n          'Safari that may cause your app to stop working. See ' +\n          'https://stackoverflow.com/q/56496296/110915 for details ' +\n          'and a potential workaround.'\n      );\n    }\n  }\n\n  setVersionChangeListener(\n    versionChangeListener: (event: IDBVersionChangeEvent) => void\n  ): void {\n    this.db.onversionchange = (event: IDBVersionChangeEvent) => {\n      return versionChangeListener(event);\n    };\n  }\n\n  async runTransaction<T>(\n    mode: SimpleDbTransactionMode,\n    objectStores: string[],\n    transactionFn: (transaction: SimpleDbTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    const readonly = mode === 'readonly';\n    let attemptNumber = 0;\n\n    while (true) {\n      ++attemptNumber;\n\n      const transaction = SimpleDbTransaction.open(\n        this.db,\n        readonly ? 'readonly' : 'readwrite',\n        objectStores\n      );\n      try {\n        const transactionFnResult = transactionFn(transaction)\n          .catch(error => {\n            // Abort the transaction if there was an error.\n            transaction.abort(error);\n            // We cannot actually recover, and calling `abort()` will cause the transaction's\n            // completion promise to be rejected. This in turn means that we won't use\n            // `transactionFnResult` below. We return a rejection here so that we don't add the\n            // possibility of returning `void` to the type of `transactionFnResult`.\n            return PersistencePromise.reject<T>(error);\n          })\n          .toPromise();\n\n        // As noted above, errors are propagated by aborting the transaction. So\n        // we swallow any error here to avoid the browser logging it as unhandled.\n        transactionFnResult.catch(() => {});\n\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        await transaction.completionPromise;\n        return transactionFnResult;\n      } catch (error) {\n        // TODO(schmidt-sebastian): We could probably be smarter about this and\n        // not retry exceptions that are likely unrecoverable (such as quota\n        // exceeded errors).\n\n        // Note: We cannot use an instanceof check for FirestoreException, since the\n        // exception is wrapped in a generic error by our async/await handling.\n        const retryable =\n          error.name !== 'FirebaseError' &&\n          attemptNumber < TRANSACTION_RETRY_COUNT;\n        logDebug(\n          LOG_TAG,\n          'Transaction failed with error: %s. Retrying: %s.',\n          error.message,\n          retryable\n        );\n\n        if (!retryable) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n\n  close(): void {\n    this.db.close();\n  }\n}\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nexport class IterationController {\n  private shouldStop = false;\n  private nextKey: IDBValidKey | null = null;\n\n  constructor(private dbCursor: IDBCursorWithValue) {}\n\n  get isDone(): boolean {\n    return this.shouldStop;\n  }\n\n  get skipToKey(): IDBValidKey | null {\n    return this.nextKey;\n  }\n\n  set cursor(value: IDBCursorWithValue) {\n    this.dbCursor = value;\n  }\n\n  /**\n   * This function can be called to stop iteration at any point.\n   */\n  done(): void {\n    this.shouldStop = true;\n  }\n\n  /**\n   * This function can be called to skip to that next key, which could be\n   * an index or a primary key.\n   */\n  skip(key: IDBValidKey): void {\n    this.nextKey = key;\n  }\n\n  /**\n   * Delete the current cursor value from the object store.\n   *\n   * NOTE: You CANNOT do this with a keysOnly query.\n   */\n  delete(): PersistencePromise<void> {\n    return wrapRequest<void>(this.dbCursor.delete());\n  }\n}\n\n/**\n * Callback used with iterate() method.\n */\nexport type IterateCallback<KeyType, ValueType> = (\n  key: KeyType,\n  value: ValueType,\n  control: IterationController\n) => void | PersistencePromise<void>;\n\n/** Options available to the iterate() method. */\nexport interface IterateOptions {\n  /** Index to iterate over (else primary keys will be iterated) */\n  index?: string;\n\n  /** IndxedDB Range to iterate over (else entire store will be iterated) */\n  range?: IDBKeyRange;\n\n  /** If true, values aren't read while iterating. */\n  keysOnly?: boolean;\n\n  /** If true, iterate over the store in reverse. */\n  reverse?: boolean;\n}\n\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\nexport class IndexedDbTransactionError extends FirestoreError {\n  name = 'IndexedDbTransactionError';\n\n  constructor(cause: Error) {\n    super(Code.UNAVAILABLE, 'IndexedDB transaction failed: ' + cause);\n  }\n}\n\n/** Verifies whether `e` is an IndexedDbTransactionError. */\nexport function isIndexedDbTransactionError(e: Error): boolean {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nexport class SimpleDbTransaction {\n  private aborted = false;\n\n  /**\n   * A promise that resolves with the result of the IndexedDb transaction.\n   */\n  private readonly completionDeferred = new Deferred<void>();\n\n  static open(\n    db: IDBDatabase,\n    mode: IDBTransactionMode,\n    objectStoreNames: string[]\n  ): SimpleDbTransaction {\n    return new SimpleDbTransaction(db.transaction(objectStoreNames, mode));\n  }\n\n  constructor(private readonly transaction: IDBTransaction) {\n    this.transaction.oncomplete = () => {\n      this.completionDeferred.resolve();\n    };\n    this.transaction.onabort = () => {\n      if (transaction.error) {\n        this.completionDeferred.reject(\n          new IndexedDbTransactionError(transaction.error)\n        );\n      } else {\n        this.completionDeferred.resolve();\n      }\n    };\n    this.transaction.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      this.completionDeferred.reject(new IndexedDbTransactionError(error));\n    };\n  }\n\n  get completionPromise(): Promise<void> {\n    return this.completionDeferred.promise;\n  }\n\n  abort(error?: Error): void {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n\n    if (!this.aborted) {\n      logDebug(\n        LOG_TAG,\n        'Aborting transaction:',\n        error ? error.message : 'Client-initiated abort'\n      );\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n\n  /**\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n   * operations performed on the SimpleDbStore happen within the context of this\n   * transaction and it cannot be used anymore once the transaction is\n   * completed.\n   *\n   * Note that we can't actually enforce that the KeyType and ValueType are\n   * correct, but they allow type safety through the rest of the consuming code.\n   */\n  store<KeyType extends IDBValidKey, ValueType extends unknown>(\n    storeName: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    const store = this.transaction.objectStore(storeName);\n    debugAssert(!!store, 'Object store not part of transaction: ' + storeName);\n    return new SimpleDbStore<KeyType, ValueType>(store);\n  }\n}\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nexport class SimpleDbStore<\n  KeyType extends IDBValidKey,\n  ValueType extends unknown\n> {\n  constructor(private store: IDBObjectStore) {}\n\n  /**\n   * Writes a value into the Object Store.\n   *\n   * @param key Optional explicit key to use when writing the object, else the\n   * key will be auto-assigned (e.g. via the defined keyPath for the store).\n   * @param value The object to write.\n   */\n  put(value: ValueType): PersistencePromise<void>;\n  put(key: KeyType, value: ValueType): PersistencePromise<void>;\n  put(\n    keyOrValue: KeyType | ValueType,\n    value?: ValueType\n  ): PersistencePromise<void> {\n    let request;\n    if (value !== undefined) {\n      logDebug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue as KeyType);\n    } else {\n      logDebug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue as ValueType);\n    }\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * Adds a new value into an Object Store and returns the new key. Similar to\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\n   *\n   * @param value The object to write.\n   * @return The key of the value to add.\n   */\n  add(value: ValueType): PersistencePromise<KeyType> {\n    logDebug(LOG_TAG, 'ADD', this.store.name, value, value);\n    const request = this.store.add(value as ValueType);\n    return wrapRequest<KeyType>(request);\n  }\n\n  /**\n   * Gets the object with the specified key from the specified store, or null\n   * if no object exists with the specified key.\n   *\n   * @key The key of the object to get.\n   * @return The object with the specified key or null if no object exists.\n   */\n  get(key: KeyType): PersistencePromise<ValueType | null> {\n    const request = this.store.get(key);\n    // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return wrapRequest<any>(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      logDebug(LOG_TAG, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n\n  delete(key: KeyType | IDBKeyRange): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * If we ever need more of the count variants, we can add overloads. For now,\n   * all we need is to count everything in a store.\n   *\n   * Returns the number of rows in the store.\n   */\n  count(): PersistencePromise<number> {\n    logDebug(LOG_TAG, 'COUNT', this.store.name);\n    const request = this.store.count();\n    return wrapRequest<number>(request);\n  }\n\n  loadAll(): PersistencePromise<ValueType[]>;\n  loadAll(range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(index: string, range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<ValueType[]> {\n    const cursor = this.cursor(this.options(indexOrRange, range));\n    const results: ValueType[] = [];\n    return this.iterateCursor(cursor, (key, value) => {\n      results.push(value);\n    }).next(() => {\n      return results;\n    });\n  }\n\n  deleteAll(): PersistencePromise<void>;\n  deleteAll(range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(index: string, range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n\n  /**\n   * Iterates over keys and values in an object store.\n   *\n   * @param options Options specifying how to iterate the objects in the store.\n   * @param callback will be called for each iterated object. Iteration can be\n   * canceled at any point by calling the doneFn passed to the callback.\n   * The callback can return a PersistencePromise if it performs async\n   * operations but note that iteration will continue without waiting for them\n   * to complete.\n   * @returns A PersistencePromise that resolves once all PersistencePromises\n   * returned by callbacks resolve.\n   */\n  iterate(\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    options: IterateOptions,\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    optionsOrCallback: IterateOptions | IterateCallback<KeyType, ValueType>,\n    callback?: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback as IterateCallback<KeyType, ValueType>;\n    } else {\n      options = optionsOrCallback as IterateOptions;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n\n  /**\n   * Iterates over a store, but waits for the given callback to complete for\n   * each entry before iterating the next entry. This allows the callback to do\n   * asynchronous work to determine if this iteration should continue.\n   *\n   * The provided callback should return `true` to continue iteration, and\n   * `false` otherwise.\n   */\n  iterateSerial(\n    callback: (k: KeyType, v: ValueType) => PersistencePromise<boolean>\n  ): PersistencePromise<void> {\n    const cursorRequest = this.cursor({});\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        const error = checkForAndReportiOSError(\n          (event.target as IDBRequest).error!\n        );\n        reject(error);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n\n        callback(cursor.primaryKey as KeyType, cursor.value).next(\n          shouldContinue => {\n            if (shouldContinue) {\n              cursor.continue();\n            } else {\n              resolve();\n            }\n          }\n        );\n      };\n    });\n  }\n\n  private iterateCursor(\n    cursorRequest: IDBRequest,\n    fn: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    const results: Array<PersistencePromise<void>> = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error!);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(\n          cursor.primaryKey as KeyType,\n          cursor.value,\n          controller\n        );\n        if (userResult instanceof PersistencePromise) {\n          const userPromise: PersistencePromise<void> = userResult.catch(\n            err => {\n              controller.done();\n              return PersistencePromise.reject(err);\n            }\n          );\n          results.push(userPromise);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => {\n      return PersistencePromise.waitFor(results);\n    });\n  }\n\n  private options(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): IterateOptions {\n    let indexName: string | undefined = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        debugAssert(\n          range === undefined,\n          '3rd argument must not be defined if 2nd is a range.'\n        );\n        range = indexOrRange;\n      }\n    }\n    return { index: indexName, range };\n  }\n\n  private cursor(options: IterateOptions): IDBRequest {\n    let direction: IDBCursorDirection = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  }\n}\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest<R>(request: IDBRequest): PersistencePromise<R> {\n  return new PersistencePromise<R>((resolve, reject) => {\n    request.onsuccess = (event: Event) => {\n      const result = (event.target as IDBRequest).result;\n      resolve(result);\n    };\n\n    request.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      reject(error);\n    };\n  });\n}\n\n// Guard so we only report the error once.\nlet reportedIOSError = false;\nfunction checkForAndReportiOSError(error: DOMException): Error {\n  const iOSVersion = SimpleDb.getIOSVersion(getUA());\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    const IOS_ERROR =\n      'An internal error was encountered in the Indexed Database server';\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      const newError = new FirestoreError(\n        'internal',\n        `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` +\n          `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` +\n          `for details and a potential workaround.`\n      );\n      if (!reportedIOSError) {\n        reportedIOSError = true;\n        // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n        setTimeout(() => {\n          throw newError;\n        }, 0);\n      }\n      return newError;\n    }\n  }\n  return error;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The Platform's 'window' implementation or null if not available. */\nexport function getWindow(): Window | null {\n  // `window` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' ? window : null;\n}\n\n/** The Platform's 'document' implementation or null if not available. */\nexport function getDocument(): Document | null {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof document !== 'undefined' ? document : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { logDebug, logError } from './log';\nimport { Deferred } from './promise';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\nimport { getWindow } from '../platform/dom';\n\nconst LOG_TAG = 'AsyncQueue';\n\n// Accept any return type from setTimeout().\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TimerHandle = any;\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n *\n * The string values are used when encoding these timer IDs in JSON spec tests.\n */\nexport const enum TimerId {\n  /** All can be used with runDelayedOperationsEarly() to run all timers. */\n  All = 'all',\n\n  /**\n   * The following 4 timers are used in persistent_stream.ts for the listen and\n   * write streams. The \"Idle\" timer is used to close the stream due to\n   * inactivity. The \"ConnectionBackoff\" timer is used to restart a stream once\n   * the appropriate backoff delay has elapsed.\n   */\n  ListenStreamIdle = 'listen_stream_idle',\n  ListenStreamConnectionBackoff = 'listen_stream_connection_backoff',\n  WriteStreamIdle = 'write_stream_idle',\n  WriteStreamConnectionBackoff = 'write_stream_connection_backoff',\n\n  /**\n   * A timer used in online_state_tracker.ts to transition from\n   * OnlineState.Unknown to Offline after a set timeout, rather than waiting\n   * indefinitely for success or failure.\n   */\n  OnlineStateTimeout = 'online_state_timeout',\n\n  /**\n   * A timer used to update the client metadata in IndexedDb, which is used\n   * to determine the primary leaseholder.\n   */\n  ClientMetadataRefresh = 'client_metadata_refresh',\n\n  /** A timer used to periodically attempt LRU Garbage collection */\n  LruGarbageCollection = 'lru_garbage_collection',\n\n  /**\n   * A timer used to retry transactions. Since there can be multiple concurrent\n   * transactions, multiple of these may be in the queue at a given time.\n   */\n  TransactionRetry = 'transaction_retry',\n\n  /**\n   * A timer used to retry operations scheduled via retryable AsyncQueue\n   * operations.\n   */\n  AsyncQueueRetry = 'async_queue_retry'\n}\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nexport class DelayedOperation<T extends unknown> implements PromiseLike<T> {\n  // handle for use with clearTimeout(), or null if the operation has been\n  // executed or canceled already.\n  private timerHandle: TimerHandle | null;\n\n  private readonly deferred = new Deferred<T>();\n\n  private constructor(\n    private readonly asyncQueue: AsyncQueue,\n    readonly timerId: TimerId,\n    readonly targetTimeMs: number,\n    private readonly op: () => Promise<T>,\n    private readonly removalCallback: (op: DelayedOperation<T>) => void\n  ) {\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue The queue to schedule the operation on.\n   * @param id A Timer ID identifying the type of operation this is.\n   * @param delayMs The delay (ms) before the operation should be scheduled.\n   * @param op The operation to run.\n   * @param removalCallback A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule<R extends unknown>(\n    asyncQueue: AsyncQueue,\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<R>,\n    removalCallback: (op: DelayedOperation<R>) => void\n  ): DelayedOperation<R> {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(\n      asyncQueue,\n      timerId,\n      targetTime,\n      op,\n      removalCallback\n    );\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  private start(delayMs: number): void {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay(): void {\n    return this.handleDelayElapsed();\n  }\n\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason?: string): void {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(\n        new FirestoreError(\n          Code.CANCELLED,\n          'Operation cancelled' + (reason ? ': ' + reason : '')\n        )\n      );\n    }\n  }\n\n  then = this.deferred.promise.then.bind(this.deferred.promise);\n\n  private handleDelayElapsed(): void {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  private clearTimeout(): void {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n\nexport class AsyncQueue {\n  // The last promise in the queue.\n  private tail: Promise<unknown> = Promise.resolve();\n\n  // A list of retryable operations. Retryable operations are run in order and\n  // retried with backoff.\n  private retryableOps: Array<() => Promise<void>> = [];\n\n  // Is this AsyncQueue being shut down? Once it is set to true, it will not\n  // be changed again.\n  private _isShuttingDown: boolean = false;\n\n  // Operations scheduled to be queued in the future. Operations are\n  // automatically removed after they are run or canceled.\n  private delayedOperations: Array<DelayedOperation<unknown>> = [];\n\n  // visible for testing\n  failure: Error | null = null;\n\n  // Flag set while there's an outstanding AsyncQueue operation, used for\n  // assertion sanity-checks.\n  private operationInProgress = false;\n\n  // List of TimerIds to fast-forward delays for.\n  private timerIdsToSkip: TimerId[] = [];\n\n  // Backoff timer used to schedule retries for retryable operations\n  private backoff = new ExponentialBackoff(this, TimerId.AsyncQueueRetry);\n\n  // Visibility handler that triggers an immediate retry of all retryable\n  // operations. Meant to speed up recovery when we regain file system access\n  // after page comes into foreground.\n  private visibilityHandler = (): void => this.backoff.skipBackoff();\n\n  constructor() {\n    const window = getWindow();\n    if (window && typeof window.addEventListener === 'function') {\n      window.addEventListener('visibilitychange', this.visibilityHandler);\n    }\n  }\n\n  // Is this AsyncQueue being shut down? If true, this instance will not enqueue\n  // any new operations, Promises from enqueue requests will not resolve.\n  get isShuttingDown(): boolean {\n    return this._isShuttingDown;\n  }\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue without waiting for it to complete (i.e. we ignore the Promise result).\n   */\n  enqueueAndForgetEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): void {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue.\n   */\n  private enqueueEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): Promise<T> {\n    this.verifyNotFailed();\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Adds a new operation to the queue and initialize the shut down of this queue.\n   * Returns a promise that will be resolved when the promise returned by the new\n   * operation is (with its value).\n   * Once this method is called, the only possible way to request running an operation\n   * is through `enqueueAndForgetEvenAfterShutdown`.\n   */\n  async enqueueAndInitiateShutdown(op: () => Promise<void>): Promise<void> {\n    this.verifyNotFailed();\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      const window = getWindow();\n      if (window) {\n        window.removeEventListener('visibilitychange', this.visibilityHandler);\n      }\n      await this.enqueueEvenAfterShutdown(op);\n    }\n  }\n\n  /**\n   * Adds a new operation to the queue. Returns a promise that will be resolved\n   * when the promise returned by the new operation is (with its value).\n   */\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise<T>(resolve => {});\n    }\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Enqueue a retryable operation.\n   *\n   * A retryable operation is rescheduled with backoff if it fails with a\n   * IndexedDbTransactionError (the error type used by SimpleDb). All\n   * retryable operations are executed in order and only run if all prior\n   * operations were retried successfully.\n   */\n  enqueueRetryable(op: () => Promise<void>): void {\n    this.retryableOps.push(op);\n    this.enqueueAndForget(() => this.retryNextOp());\n  }\n\n  /**\n   * Runs the next operation from the retryable queue. If the operation fails,\n   * reschedules with backoff.\n   */\n  private async retryNextOp(): Promise<void> {\n    if (this.retryableOps.length === 0) {\n      return;\n    }\n\n    try {\n      await this.retryableOps[0]();\n      this.retryableOps.shift();\n      this.backoff.reset();\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n      } else {\n        throw e; // Failure will be handled by AsyncQueue\n      }\n    }\n\n    if (this.retryableOps.length > 0) {\n      // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.backoff.backoffAndRun(() => this.retryNextOp());\n    }\n  }\n\n  private enqueueInternal<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op()\n        .catch((error: FirestoreError) => {\n          this.failure = error;\n          this.operationInProgress = false;\n          const message = getMessageOrStack(error);\n          logError('INTERNAL UNHANDLED ERROR: ', message);\n\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw error;\n        })\n        .then(result => {\n          this.operationInProgress = false;\n          return result;\n        });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n\n  /**\n   * Schedules an operation to be queued on the AsyncQueue once the specified\n   * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel\n   * or fast-forward the operation prior to its running.\n   */\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): DelayedOperation<T> {\n    this.verifyNotFailed();\n\n    debugAssert(\n      delayMs >= 0,\n      `Attempted to schedule an operation with a negative delay of ${delayMs}`\n    );\n\n    // Fast-forward delays for timerIds that have been overriden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    const delayedOp = DelayedOperation.createAndSchedule<T>(\n      this,\n      timerId,\n      delayMs,\n      op,\n      removedOp =>\n        this.removeDelayedOperation(removedOp as DelayedOperation<unknown>)\n    );\n    this.delayedOperations.push(delayedOp as DelayedOperation<unknown>);\n    return delayedOp;\n  }\n\n  private verifyNotFailed(): void {\n    if (this.failure) {\n      fail('AsyncQueue is already failed: ' + getMessageOrStack(this.failure));\n    }\n  }\n\n  /**\n   * Verifies there's an operation currently in-progress on the AsyncQueue.\n   * Unfortunately we can't verify that the running code is in the promise chain\n   * of that operation, so this isn't a foolproof check, but it should be enough\n   * to catch some bugs.\n   */\n  verifyOperationInProgress(): void {\n    debugAssert(\n      this.operationInProgress,\n      'verifyOpInProgress() called when no op in progress on this queue.'\n    );\n  }\n\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain(): Promise<void> {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail: Promise<unknown>;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId: TimerId): boolean {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId Delayed operations up to and including this TimerId will\n   *  be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runAllDelayedOperationsUntil(lastTimerId: TimerId): Promise<void> {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return this.drain();\n    });\n  }\n\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId: TimerId): void {\n    this.timerIdsToSkip.push(timerId);\n  }\n\n  /** Called once a DelayedOperation is run or canceled. */\n  private removeDelayedOperation(op: DelayedOperation<unknown>): void {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    debugAssert(index >= 0, 'Delayed operation not found.');\n    this.delayedOperations.splice(index, 1);\n  }\n}\n\n/**\n * Returns a FirestoreError that can be surfaced to the user if the provided\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\n */\nexport function wrapInUserErrorIfRecoverable(\n  e: Error,\n  msg: string\n): FirestoreError {\n  logError(LOG_TAG, `${msg}: ${e}`);\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\n  } else {\n    throw e;\n  }\n}\n\n/**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error Error or FirestoreError\n */\nfunction getMessageOrStack(error: Error): string {\n  let message = error.message || '';\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n  return message;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { getLogLevel, logDebug, LogLevel } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from './local_store';\nimport {\n  GarbageCollectionScheduler,\n  PersistenceTransaction\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetData } from './target_data';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LruGarbageCollector';\n\n/**\n * Persistence layers intending to use LRU Garbage collection should have reference delegates that\n * implement this interface. This interface defines the operations that the LRU garbage collector\n * needs from the persistence layer.\n */\nexport interface LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  /** Enumerates all the targets in the TargetCache. */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (target: TargetData) => void\n  ): PersistencePromise<void>;\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number>;\n\n  /**\n   * Enumerates sequence numbers for documents not associated with a target.\n   * Note that this may include duplicate sequence numbers.\n   */\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes all targets that have a sequence number less than or equal to `upperBound`, and are not\n   * present in the `activeTargetIds` set.\n   *\n   * @return the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number>;\n\n  /**\n   * Removes all unreferenced documents from the cache that have a sequence number less than or\n   * equal to the given `upperBound`.\n   *\n   * @return the number of documents removed.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number>;\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number>;\n}\n\n/**\n * Describes a map whose keys are active target ids. We do not care about the type of the\n * values.\n */\nexport type ActiveTargets = SortedMap<TargetId, unknown>;\n\n// The type and comparator for the items contained in the SortedSet used in\n// place of a priority queue for the RollingSequenceNumberBuffer.\ntype BufferEntry = [ListenSequenceNumber, number];\nfunction bufferEntryComparator(\n  [aSequence, aIndex]: BufferEntry,\n  [bSequence, bIndex]: BufferEntry\n): number {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n\n/**\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\n * lowest n values passed to `addElement`, and finally reports the largest of\n * them in `maxValue`.\n */\nclass RollingSequenceNumberBuffer {\n  private buffer: SortedSet<BufferEntry> = new SortedSet<BufferEntry>(\n    bufferEntryComparator\n  );\n\n  private previousIndex = 0;\n\n  constructor(private readonly maxElements: number) {}\n\n  private nextIndex(): number {\n    return ++this.previousIndex;\n  }\n\n  addElement(sequenceNumber: ListenSequenceNumber): void {\n    const entry: BufferEntry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last()!;\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n\n  get maxValue(): ListenSequenceNumber {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()![0];\n  }\n}\n\n/**\n * Describes the results of a garbage collection run. `didRun` will be set to\n * `false` if collection was skipped (either it is disabled or the cache size\n * has not hit the threshold). If collection ran, the other fields will be\n * filled in with the details of the results.\n */\nexport interface LruResults {\n  readonly didRun: boolean;\n  readonly sequenceNumbersCollected: number;\n  readonly targetsRemoved: number;\n  readonly documentsRemoved: number;\n}\n\nconst GC_DID_NOT_RUN: LruResults = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\n\nexport class LruParams {\n  static readonly COLLECTION_DISABLED = -1;\n  static readonly MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n  static readonly DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\n  private static readonly DEFAULT_COLLECTION_PERCENTILE = 10;\n  private static readonly DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\n\n  static withCacheSize(cacheSize: number): LruParams {\n    return new LruParams(\n      cacheSize,\n      LruParams.DEFAULT_COLLECTION_PERCENTILE,\n      LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n    );\n  }\n\n  static readonly DEFAULT: LruParams = new LruParams(\n    LruParams.DEFAULT_CACHE_SIZE_BYTES,\n    LruParams.DEFAULT_COLLECTION_PERCENTILE,\n    LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n  );\n\n  static readonly DISABLED: LruParams = new LruParams(\n    LruParams.COLLECTION_DISABLED,\n    0,\n    0\n  );\n\n  constructor(\n    // When we attempt to collect, we will only do so if the cache size is greater than this\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n    readonly cacheSizeCollectionThreshold: number,\n    // The percentage of sequence numbers that we will attempt to collect\n    readonly percentileToCollect: number,\n    // A cap on the total number of sequence numbers that will be collected. This prevents\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\n    readonly maximumSequenceNumbersToCollect: number\n  ) {}\n}\n\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\n\n/**\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\n * whether or not GC is enabled, as well as which delay to use before the next run.\n */\nexport class LruScheduler implements GarbageCollectionScheduler {\n  private hasRun: boolean = false;\n  private gcTask: DelayedOperation<void> | null;\n\n  constructor(\n    private readonly garbageCollector: LruGarbageCollector,\n    private readonly asyncQueue: AsyncQueue\n  ) {\n    this.gcTask = null;\n  }\n\n  start(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot start an already started LruScheduler'\n    );\n    if (\n      this.garbageCollector.params.cacheSizeCollectionThreshold !==\n      LruParams.COLLECTION_DISABLED\n    ) {\n      this.scheduleGC(localStore);\n    }\n  }\n\n  stop(): void {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n\n  get started(): boolean {\n    return this.gcTask !== null;\n  }\n\n  private scheduleGC(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot schedule GC while a task is pending'\n    );\n    const delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;\n    logDebug(\n      'LruGarbageCollector',\n      `Garbage collection scheduled in ${delay}ms`\n    );\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\n      TimerId.LruGarbageCollection,\n      delay,\n      async () => {\n        this.gcTask = null;\n        this.hasRun = true;\n        try {\n          await localStore.collectGarbage(this.garbageCollector);\n        } catch (e) {\n          if (isIndexedDbTransactionError(e)) {\n            logDebug(\n              LOG_TAG,\n              'Ignoring IndexedDB error during garbage collection: ',\n              e\n            );\n          } else {\n            await ignoreIfPrimaryLeaseLoss(e);\n          }\n        }\n        await this.scheduleGC(localStore);\n      }\n    );\n  }\n}\n\n/** Implements the steps for LRU garbage collection. */\nexport class LruGarbageCollector {\n  constructor(\n    private readonly delegate: LruDelegate,\n    readonly params: LruParams\n  ) {}\n\n  /** Given a percentile of target to collect, returns the number of targets to collect. */\n  calculateTargetCount(\n    txn: PersistenceTransaction,\n    percentile: number\n  ): PersistencePromise<number> {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor((percentile / 100.0) * targetCount);\n    });\n  }\n\n  /** Returns the nth sequence number, counting in order from the smallest. */\n  nthSequenceNumber(\n    txn: PersistenceTransaction,\n    n: number\n  ): PersistencePromise<ListenSequenceNumber> {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate\n      .forEachTarget(txn, target => buffer.addElement(target.sequenceNumber))\n      .next(() => {\n        return this.delegate.forEachOrphanedDocumentSequenceNumber(\n          txn,\n          sequenceNumber => buffer.addElement(sequenceNumber)\n        );\n      })\n      .next(() => buffer.maxValue);\n  }\n\n  /**\n   * Removes targets with a sequence number equal to or less than the given upper bound, and removes\n   * document associations with those targets.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  /**\n   * Removes documents that have a sequence number equal to or less than the upper bound and are not\n   * otherwise pinned.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n\n  collect(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    if (\n      this.params.cacheSizeCollectionThreshold === LruParams.COLLECTION_DISABLED\n    ) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug(\n          'LruGarbageCollector',\n          `Garbage collection skipped; Cache size ${cacheSize} ` +\n            `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`\n        );\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.delegate.getCacheSize(txn);\n  }\n\n  private runGarbageCollection(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    let upperBoundSequenceNumber: number;\n    let sequenceNumbersToCollect: number, targetsRemoved: number;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs: number,\n      foundUpperBoundTs: number,\n      removedTargetsTs: number,\n      removedDocumentsTs: number;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect)\n      .next(sequenceNumbers => {\n        // Cap at the configured max\n        if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n          logDebug(\n            'LruGarbageCollector',\n            'Capping sequence numbers to collect down ' +\n              `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` +\n              `from ${sequenceNumbers}`\n          );\n          sequenceNumbersToCollect = this.params\n            .maximumSequenceNumbersToCollect;\n        } else {\n          sequenceNumbersToCollect = sequenceNumbers;\n        }\n        countedTargetsTs = Date.now();\n\n        return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n      })\n      .next(upperBound => {\n        upperBoundSequenceNumber = upperBound;\n        foundUpperBoundTs = Date.now();\n\n        return this.removeTargets(\n          txn,\n          upperBoundSequenceNumber,\n          activeTargetIds\n        );\n      })\n      .next(numTargetsRemoved => {\n        targetsRemoved = numTargetsRemoved;\n        removedTargetsTs = Date.now();\n\n        return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n      })\n      .next(documentsRemoved => {\n        removedDocumentsTs = Date.now();\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          const desc =\n            'LRU Garbage Collection\\n' +\n            `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` +\n            `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` +\n            `${foundUpperBoundTs - countedTargetsTs}ms\\n` +\n            `\\tRemoved ${targetsRemoved} targets in ` +\n            `${removedTargetsTs - foundUpperBoundTs}ms\\n` +\n            `\\tRemoved ${documentsRemoved} documents in ` +\n            `${removedDocumentsTs - removedTargetsTs}ms\\n` +\n            `Total Duration: ${removedDocumentsTs - startTs}ms`;\n          logDebug('LruGarbageCollector', desc);\n        }\n\n        return PersistencePromise.resolve<LruResults>({\n          didRun: true,\n          sequenceNumbersCollected: sequenceNumbersToCollect,\n          targetsRemoved,\n          documentsRemoved\n        });\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { Query, queryToTarget } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { canonifyTarget, Target, targetEquals } from '../core/target';\nimport { BatchId, TargetId } from '../core/types';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  maybeDocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  Mutation,\n  PatchMutation,\n  Precondition,\n  extractMutationBaseValue\n} from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { debugAssert, debugCast, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { LocalDocumentsView } from './local_documents_view';\nimport { LocalViewChanges } from './local_view_changes';\nimport { LruGarbageCollector, LruResults } from './lru_garbage_collector';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PRIMARY_LEASE_LOST_ERROR_MSG\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { QueryEngine } from './query_engine';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { ClientId } from './shared_client_state';\nimport { TargetData, TargetPurpose } from './target_data';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { IndexedDbTargetCache } from './indexeddb_target_cache';\nimport { extractFieldMask } from '../model/object_value';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LocalStore';\n\n/** The result of a write to the local store. */\nexport interface LocalWriteResult {\n  batchId: BatchId;\n  changes: MaybeDocumentMap;\n}\n\n/** The result of a user-change operation in the local store. */\nexport interface UserChangeResult {\n  readonly affectedDocuments: MaybeDocumentMap;\n  readonly removedBatchIds: BatchId[];\n  readonly addedBatchIds: BatchId[];\n}\n\n/** The result of executing a query against the local store. */\nexport interface QueryResult {\n  readonly documents: DocumentMap;\n  readonly remoteKeys: DocumentKeySet;\n}\n\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nexport interface LocalStore {\n  /**\n   * Tells the LocalStore that the currently authenticated user has changed.\n   *\n   * In response the local store switches the mutation queue to the new user and\n   * returns any resulting document changes.\n   */\n  // PORTING NOTE: Android and iOS only return the documents affected by the\n  // change.\n  handleUserChange(user: User): Promise<UserChangeResult>;\n\n  /* Accept locally generated Mutations and commit them to storage. */\n  localWrite(mutations: Mutation[]): Promise<LocalWriteResult>;\n\n  /**\n   * Acknowledge the given batch.\n   *\n   * On the happy path when a batch is acknowledged, the local store will\n   *\n   *  + remove the batch from the mutation queue;\n   *  + apply the changes to the remote document cache;\n   *  + recalculate the latency compensated view implied by those changes (there\n   *    may be mutations in the queue that affect the documents but haven't been\n   *    acknowledged yet); and\n   *  + give the changed documents back the sync engine\n   *\n   * @returns The resulting (modified) documents.\n   */\n  acknowledgeBatch(batchResult: MutationBatchResult): Promise<MaybeDocumentMap>;\n\n  /**\n   * Remove mutations from the MutationQueue for the specified batch;\n   * LocalDocuments will be recalculated.\n   *\n   * @returns The resulting modified documents.\n   */\n  rejectBatch(batchId: BatchId): Promise<MaybeDocumentMap>;\n\n  /**\n   * Returns the largest (latest) batch id in mutation queue that is pending\n   * server response.\n   *\n   * Returns `BATCHID_UNKNOWN` if the queue is empty.\n   */\n  getHighestUnacknowledgedBatchId(): Promise<BatchId>;\n\n  /**\n   * Returns the last consistent snapshot processed (used by the RemoteStore to\n   * determine whether to buffer incoming snapshots from the backend).\n   */\n  getLastRemoteSnapshotVersion(): Promise<SnapshotVersion>;\n\n  /**\n   * Update the \"ground-state\" (remote) documents. We assume that the remote\n   * event reflects any write batches that have been acknowledged or rejected\n   * (i.e. we do not re-apply local mutations to updates from this event).\n   *\n   * LocalDocuments are re-calculated if there are remaining mutations in the\n   * queue.\n   */\n  applyRemoteEvent(remoteEvent: RemoteEvent): Promise<MaybeDocumentMap>;\n\n  /**\n   * Notify local store of the changed views to locally pin documents.\n   */\n  notifyLocalViewChanges(viewChanges: LocalViewChanges[]): Promise<void>;\n\n  /**\n   * Gets the mutation batch after the passed in batchId in the mutation queue\n   * or null if empty.\n   * @param afterBatchId If provided, the batch to search after.\n   * @returns The next mutation or null if there wasn't one.\n   */\n  nextMutationBatch(afterBatchId?: BatchId): Promise<MutationBatch | null>;\n\n  /**\n   * Read the current value of a Document with a given key or null if not\n   * found - used for testing.\n   */\n  readDocument(key: DocumentKey): Promise<MaybeDocument | null>;\n\n  /**\n   * Assigns the given target an internal ID so that its results can be pinned so\n   * they don't get GC'd. A target must be allocated in the local store before\n   * the store can be used to manage its view.\n   *\n   * Allocating an already allocated `Target` will return the existing `TargetData`\n   * for that `Target`.\n   */\n  allocateTarget(target: Target): Promise<TargetData>;\n\n  /**\n   * Returns the TargetData as seen by the LocalStore, including updates that may\n   * have not yet been persisted to the TargetCache.\n   */\n  // Visible for testing.\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null>;\n\n  /**\n   * Unpin all the documents associated with the given target. If\n   * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\n   * directly removes the associated target data from the target cache.\n   *\n   * Releasing a non-existing `Target` is a no-op.\n   */\n  // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\n  releaseTarget(\n    targetId: number,\n    keepPersistedTargetData: boolean\n  ): Promise<void>;\n\n  /**\n   * Runs the specified query against the local store and returns the results,\n   * potentially taking advantage of query data from previous executions (such\n   * as the set of remote keys).\n   *\n   * @param usePreviousResults Whether results from previous executions can\n   * be used to optimize this query execution.\n   */\n  executeQuery(query: Query, usePreviousResults: boolean): Promise<QueryResult>;\n\n  collectGarbage(garbageCollector: LruGarbageCollector): Promise<LruResults>;\n}\n\n/**\n * Implements `LocalStore` interface.\n *\n * Note: some field defined in this class might have public access level, but\n * the class is not exported so they are only accessible from this module.\n * This is useful to implement optional features (like bundles) in free\n * functions, such that they are tree-shakeable.\n */\nclass LocalStoreImpl implements LocalStore {\n  /**\n   * The maximum time to leave a resume token buffered without writing it out.\n   * This value is arbitrary: it's long enough to avoid several writes\n   * (possibly indefinitely if updates come more frequently than this) but\n   * short enough that restarting after crashing will still have a pretty\n   * recent resume token.\n   */\n  private static readonly RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  mutationQueue: MutationQueue;\n\n  /** The set of all cached remote documents. */\n  remoteDocuments: RemoteDocumentCache;\n\n  /**\n   * The \"local\" view of all documents (layering mutationQueue on top of\n   * remoteDocumentCache).\n   */\n  localDocuments: LocalDocumentsView;\n\n  /** Maps a target to its `TargetData`. */\n  targetCache: TargetCache;\n\n  /**\n   * Maps a targetID to data about its target.\n   *\n   * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\n   * of `applyRemoteEvent()` idempotent.\n   */\n  targetDataByTarget = new SortedMap<TargetId, TargetData>(primitiveComparator);\n\n  /** Maps a target to its targetID. */\n  // TODO(wuandy): Evaluate if TargetId can be part of Target.\n  private targetIdByTarget = new ObjectMap<Target, TargetId>(\n    t => canonifyTarget(t),\n    targetEquals\n  );\n\n  /**\n   * The read time of the last entry processed by `getNewDocumentChanges()`.\n   *\n   * PORTING NOTE: This is only used for multi-tab synchronization.\n   */\n  lastDocumentChangeReadTime = SnapshotVersion.min();\n\n  constructor(\n    /** Manages our in-memory or durable persistence. */\n    readonly persistence: Persistence,\n    private queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    debugAssert(\n      persistence.started,\n      'LocalStore was passed an unstarted persistence implementation'\n    );\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.localDocuments = new LocalDocumentsView(\n      this.remoteDocuments,\n      this.mutationQueue,\n      this.persistence.getIndexManager()\n    );\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n  }\n\n  async handleUserChange(user: User): Promise<UserChangeResult> {\n    let newMutationQueue = this.mutationQueue;\n    let newLocalDocuments = this.localDocuments;\n\n    const result = await this.persistence.runTransaction(\n      'Handle user change',\n      'readonly',\n      txn => {\n        // Swap out the mutation queue, grabbing the pending mutation batches\n        // before and after.\n        let oldBatches: MutationBatch[];\n        return this.mutationQueue\n          .getAllMutationBatches(txn)\n          .next(promisedOldBatches => {\n            oldBatches = promisedOldBatches;\n\n            newMutationQueue = this.persistence.getMutationQueue(user);\n\n            // Recreate our LocalDocumentsView using the new\n            // MutationQueue.\n            newLocalDocuments = new LocalDocumentsView(\n              this.remoteDocuments,\n              newMutationQueue,\n              this.persistence.getIndexManager()\n            );\n            return newMutationQueue.getAllMutationBatches(txn);\n          })\n          .next(newBatches => {\n            const removedBatchIds: BatchId[] = [];\n            const addedBatchIds: BatchId[] = [];\n\n            // Union the old/new changed keys.\n            let changedKeys = documentKeySet();\n\n            for (const batch of oldBatches) {\n              removedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            for (const batch of newBatches) {\n              addedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            // Return the set of all (potentially) changed documents and the list\n            // of mutation batch IDs that were affected by change.\n            return newLocalDocuments\n              .getDocuments(txn, changedKeys)\n              .next(affectedDocuments => {\n                return {\n                  affectedDocuments,\n                  removedBatchIds,\n                  addedBatchIds\n                };\n              });\n          });\n      }\n    );\n\n    this.mutationQueue = newMutationQueue;\n    this.localDocuments = newLocalDocuments;\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n\n    return result;\n  }\n\n  localWrite(mutations: Mutation[]): Promise<LocalWriteResult> {\n    const localWriteTime = Timestamp.now();\n    const keys = mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n\n    let existingDocs: MaybeDocumentMap;\n\n    return this.persistence\n      .runTransaction('Locally write mutations', 'readwrite', txn => {\n        // Load and apply all existing mutations. This lets us compute the\n        // current base state for all non-idempotent transforms before applying\n        // any additional user-provided writes.\n        return this.localDocuments.getDocuments(txn, keys).next(docs => {\n          existingDocs = docs;\n\n          // For non-idempotent mutations (such as `FieldValue.increment()`),\n          // we record the base state in a separate patch mutation. This is\n          // later used to guarantee consistent values and prevents flicker\n          // even if the backend sends us an update that already includes our\n          // transform.\n          const baseMutations: Mutation[] = [];\n\n          for (const mutation of mutations) {\n            const baseValue = extractMutationBaseValue(\n              mutation,\n              existingDocs.get(mutation.key)\n            );\n            if (baseValue != null) {\n              // NOTE: The base state should only be applied if there's some\n              // existing document to override, so use a Precondition of\n              // exists=true\n              baseMutations.push(\n                new PatchMutation(\n                  mutation.key,\n                  baseValue,\n                  extractFieldMask(baseValue.proto.mapValue!),\n                  Precondition.exists(true)\n                )\n              );\n            }\n          }\n\n          return this.mutationQueue.addMutationBatch(\n            txn,\n            localWriteTime,\n            baseMutations,\n            mutations\n          );\n        });\n      })\n      .then(batch => {\n        const changes = batch.applyToLocalDocumentSet(existingDocs);\n        return { batchId: batch.batchId, changes };\n      });\n  }\n\n  acknowledgeBatch(\n    batchResult: MutationBatchResult\n  ): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Acknowledge batch',\n      'readwrite-primary',\n      txn => {\n        const affected = batchResult.batch.keys();\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n        return this.applyWriteToRemoteDocuments(\n          txn,\n          batchResult,\n          documentBuffer\n        )\n          .next(() => documentBuffer.apply(txn))\n          .next(() => this.mutationQueue.performConsistencyCheck(txn))\n          .next(() => this.localDocuments.getDocuments(txn, affected));\n      }\n    );\n  }\n\n  rejectBatch(batchId: BatchId): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Reject batch',\n      'readwrite-primary',\n      txn => {\n        let affectedKeys: DocumentKeySet;\n        return this.mutationQueue\n          .lookupMutationBatch(txn, batchId)\n          .next((batch: MutationBatch | null) => {\n            hardAssert(batch !== null, 'Attempt to reject nonexistent batch!');\n            affectedKeys = batch.keys();\n            return this.mutationQueue.removeMutationBatch(txn, batch);\n          })\n          .next(() => {\n            return this.mutationQueue.performConsistencyCheck(txn);\n          })\n          .next(() => {\n            return this.localDocuments.getDocuments(txn, affectedKeys);\n          });\n      }\n    );\n  }\n\n  getHighestUnacknowledgedBatchId(): Promise<BatchId> {\n    return this.persistence.runTransaction(\n      'Get highest unacknowledged batch id',\n      'readonly',\n      txn => {\n        return this.mutationQueue.getHighestUnacknowledgedBatchId(txn);\n      }\n    );\n  }\n\n  getLastRemoteSnapshotVersion(): Promise<SnapshotVersion> {\n    return this.persistence.runTransaction(\n      'Get last remote snapshot version',\n      'readonly',\n      txn => this.targetCache.getLastRemoteSnapshotVersion(txn)\n    );\n  }\n\n  applyRemoteEvent(remoteEvent: RemoteEvent): Promise<MaybeDocumentMap> {\n    const remoteVersion = remoteEvent.snapshotVersion;\n    let newTargetDataByTargetMap = this.targetDataByTarget;\n\n    return this.persistence\n      .runTransaction('Apply remote event', 'readwrite-primary', txn => {\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n\n        // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n        newTargetDataByTargetMap = this.targetDataByTarget;\n\n        const promises = [] as Array<PersistencePromise<void>>;\n        remoteEvent.targetChanges.forEach((change, targetId) => {\n          const oldTargetData = newTargetDataByTargetMap.get(targetId);\n          if (!oldTargetData) {\n            return;\n          }\n\n          // Only update the remote keys if the target is still active. This\n          // ensures that we can persist the updated target data along with\n          // the updated assignment.\n          promises.push(\n            this.targetCache\n              .removeMatchingKeys(txn, change.removedDocuments, targetId)\n              .next(() => {\n                return this.targetCache.addMatchingKeys(\n                  txn,\n                  change.addedDocuments,\n                  targetId\n                );\n              })\n          );\n\n          const resumeToken = change.resumeToken;\n          // Update the resume token if the change includes one.\n          if (resumeToken.approximateByteSize() > 0) {\n            const newTargetData = oldTargetData\n              .withResumeToken(resumeToken, remoteVersion)\n              .withSequenceNumber(txn.currentSequenceNumber);\n            newTargetDataByTargetMap = newTargetDataByTargetMap.insert(\n              targetId,\n              newTargetData\n            );\n\n            // Update the target data if there are target changes (or if\n            // sufficient time has passed since the last update).\n            if (\n              LocalStoreImpl.shouldPersistTargetData(\n                oldTargetData,\n                newTargetData,\n                change\n              )\n            ) {\n              promises.push(\n                this.targetCache.updateTargetData(txn, newTargetData)\n              );\n            }\n          }\n        });\n\n        let changedDocs = maybeDocumentMap();\n        let updatedKeys = documentKeySet();\n        remoteEvent.documentUpdates.forEach((key, doc) => {\n          updatedKeys = updatedKeys.add(key);\n        });\n\n        // Each loop iteration only affects its \"own\" doc, so it's safe to get all the remote\n        // documents in advance in a single call.\n        promises.push(\n          documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\n            remoteEvent.documentUpdates.forEach((key, doc) => {\n              const existingDoc = existingDocs.get(key);\n\n              // Note: The order of the steps below is important, since we want\n              // to ensure that rejected limbo resolutions (which fabricate\n              // NoDocuments with SnapshotVersion.min()) never add documents to\n              // cache.\n              if (\n                doc instanceof NoDocument &&\n                doc.version.isEqual(SnapshotVersion.min())\n              ) {\n                // NoDocuments with SnapshotVersion.min() are used in manufactured\n                // events. We remove these documents from cache since we lost\n                // access.\n                documentBuffer.removeEntry(key, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else if (\n                existingDoc == null ||\n                doc.version.compareTo(existingDoc.version) > 0 ||\n                (doc.version.compareTo(existingDoc.version) === 0 &&\n                  existingDoc.hasPendingWrites)\n              ) {\n                debugAssert(\n                  !SnapshotVersion.min().isEqual(remoteVersion),\n                  'Cannot add a document when the remote version is zero'\n                );\n                documentBuffer.addEntry(doc, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else {\n                logDebug(\n                  LOG_TAG,\n                  'Ignoring outdated watch update for ',\n                  key,\n                  '. Current version:',\n                  existingDoc.version,\n                  ' Watch version:',\n                  doc.version\n                );\n              }\n\n              if (remoteEvent.resolvedLimboDocuments.has(key)) {\n                promises.push(\n                  this.persistence.referenceDelegate.updateLimboDocument(\n                    txn,\n                    key\n                  )\n                );\n              }\n            });\n          })\n        );\n\n        // HACK: The only reason we allow a null snapshot version is so that we\n        // can synthesize remote events when we get permission denied errors while\n        // trying to resolve the state of a locally cached document that is in\n        // limbo.\n        if (!remoteVersion.isEqual(SnapshotVersion.min())) {\n          const updateRemoteVersion = this.targetCache\n            .getLastRemoteSnapshotVersion(txn)\n            .next(lastRemoteSnapshotVersion => {\n              debugAssert(\n                remoteVersion.compareTo(lastRemoteSnapshotVersion) >= 0,\n                'Watch stream reverted to previous snapshot?? ' +\n                  remoteVersion +\n                  ' < ' +\n                  lastRemoteSnapshotVersion\n              );\n              return this.targetCache.setTargetsMetadata(\n                txn,\n                txn.currentSequenceNumber,\n                remoteVersion\n              );\n            });\n          promises.push(updateRemoteVersion);\n        }\n\n        return PersistencePromise.waitFor(promises)\n          .next(() => documentBuffer.apply(txn))\n          .next(() => {\n            return this.localDocuments.getLocalViewOfDocuments(\n              txn,\n              changedDocs\n            );\n          });\n      })\n      .then(changedDocs => {\n        this.targetDataByTarget = newTargetDataByTargetMap;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Returns true if the newTargetData should be persisted during an update of\n   * an active target. TargetData should always be persisted when a target is\n   * being released and should not call this function.\n   *\n   * While the target is active, TargetData updates can be omitted when nothing\n   * about the target has changed except metadata like the resume token or\n   * snapshot version. Occasionally it's worth the extra write to prevent these\n   * values from getting too stale after a crash, but this doesn't have to be\n   * too frequent.\n   */\n  private static shouldPersistTargetData(\n    oldTargetData: TargetData,\n    newTargetData: TargetData,\n    change: TargetChange\n  ): boolean {\n    hardAssert(\n      newTargetData.resumeToken.approximateByteSize() > 0,\n      'Attempted to persist target data with no resume token'\n    );\n\n    // Always persist target data if we don't already have a resume token.\n    if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n      return true;\n    }\n\n    // Don't allow resume token changes to be buffered indefinitely. This\n    // allows us to be reasonably up-to-date after a crash and avoids needing\n    // to loop over all active queries on shutdown. Especially in the browser\n    // we may not get time to do anything interesting while the current tab is\n    // closing.\n    const timeDelta =\n      newTargetData.snapshotVersion.toMicroseconds() -\n      oldTargetData.snapshotVersion.toMicroseconds();\n    if (timeDelta >= this.RESUME_TOKEN_MAX_AGE_MICROS) {\n      return true;\n    }\n\n    // Otherwise if the only thing that has changed about a target is its resume\n    // token it's not worth persisting. Note that the RemoteStore keeps an\n    // in-memory view of the currently active targets which includes the current\n    // resume token, so stream failure or user changes will still use an\n    // up-to-date resume token regardless of what we do here.\n    const changes =\n      change.addedDocuments.size +\n      change.modifiedDocuments.size +\n      change.removedDocuments.size;\n    return changes > 0;\n  }\n\n  async notifyLocalViewChanges(viewChanges: LocalViewChanges[]): Promise<void> {\n    try {\n      await this.persistence.runTransaction(\n        'notifyLocalViewChanges',\n        'readwrite',\n        txn => {\n          return PersistencePromise.forEach(\n            viewChanges,\n            (viewChange: LocalViewChanges) => {\n              return PersistencePromise.forEach(\n                viewChange.addedKeys,\n                (key: DocumentKey) =>\n                  this.persistence.referenceDelegate.addReference(\n                    txn,\n                    viewChange.targetId,\n                    key\n                  )\n              ).next(() =>\n                PersistencePromise.forEach(\n                  viewChange.removedKeys,\n                  (key: DocumentKey) =>\n                    this.persistence.referenceDelegate.removeReference(\n                      txn,\n                      viewChange.targetId,\n                      key\n                    )\n                )\n              );\n            }\n          );\n        }\n      );\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        // If `notifyLocalViewChanges` fails, we did not advance the sequence\n        // number for the documents that were included in this transaction.\n        // This might trigger them to be deleted earlier than they otherwise\n        // would have, but it should not invalidate the integrity of the data.\n        logDebug(LOG_TAG, 'Failed to update sequence numbers: ' + e);\n      } else {\n        throw e;\n      }\n    }\n\n    for (const viewChange of viewChanges) {\n      const targetId = viewChange.targetId;\n\n      if (!viewChange.fromCache) {\n        const targetData = this.targetDataByTarget.get(targetId);\n        debugAssert(\n          targetData !== null,\n          `Can't set limbo-free snapshot version for unknown target: ${targetId}`\n        );\n\n        // Advance the last limbo free snapshot version\n        const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n        const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(\n          lastLimboFreeSnapshotVersion\n        );\n        this.targetDataByTarget = this.targetDataByTarget.insert(\n          targetId,\n          updatedTargetData\n        );\n      }\n    }\n  }\n\n  nextMutationBatch(afterBatchId?: BatchId): Promise<MutationBatch | null> {\n    return this.persistence.runTransaction(\n      'Get next mutation batch',\n      'readonly',\n      txn => {\n        if (afterBatchId === undefined) {\n          afterBatchId = BATCHID_UNKNOWN;\n        }\n        return this.mutationQueue.getNextMutationBatchAfterBatchId(\n          txn,\n          afterBatchId\n        );\n      }\n    );\n  }\n\n  readDocument(key: DocumentKey): Promise<MaybeDocument | null> {\n    return this.persistence.runTransaction('read document', 'readonly', txn => {\n      return this.localDocuments.getDocument(txn, key);\n    });\n  }\n\n  allocateTarget(target: Target): Promise<TargetData> {\n    return this.persistence\n      .runTransaction('Allocate target', 'readwrite', txn => {\n        let targetData: TargetData;\n        return this.targetCache\n          .getTargetData(txn, target)\n          .next((cached: TargetData | null) => {\n            if (cached) {\n              // This target has been listened to previously, so reuse the\n              // previous targetID.\n              // TODO(mcg): freshen last accessed date?\n              targetData = cached;\n              return PersistencePromise.resolve(targetData);\n            } else {\n              return this.targetCache.allocateTargetId(txn).next(targetId => {\n                targetData = new TargetData(\n                  target,\n                  targetId,\n                  TargetPurpose.Listen,\n                  txn.currentSequenceNumber\n                );\n                return this.targetCache\n                  .addTargetData(txn, targetData)\n                  .next(() => targetData);\n              });\n            }\n          });\n      })\n      .then(targetData => {\n        // If Multi-Tab is enabled, the existing target data may be newer than\n        // the in-memory data\n        const cachedTargetData = this.targetDataByTarget.get(\n          targetData.targetId\n        );\n        if (\n          cachedTargetData === null ||\n          targetData.snapshotVersion.compareTo(\n            cachedTargetData.snapshotVersion\n          ) > 0\n        ) {\n          this.targetDataByTarget = this.targetDataByTarget.insert(\n            targetData.targetId,\n            targetData\n          );\n          this.targetIdByTarget.set(target, targetData.targetId);\n        }\n        return targetData;\n      });\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetId = this.targetIdByTarget.get(target);\n    if (targetId !== undefined) {\n      return PersistencePromise.resolve<TargetData | null>(\n        this.targetDataByTarget.get(targetId)\n      );\n    } else {\n      return this.targetCache.getTargetData(transaction, target);\n    }\n  }\n\n  async releaseTarget(\n    targetId: number,\n    keepPersistedTargetData: boolean\n  ): Promise<void> {\n    const targetData = this.targetDataByTarget.get(targetId);\n    debugAssert(\n      targetData !== null,\n      `Tried to release nonexistent target: ${targetId}`\n    );\n\n    const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n\n    try {\n      if (!keepPersistedTargetData) {\n        await this.persistence.runTransaction('Release target', mode, txn => {\n          return this.persistence.referenceDelegate.removeTarget(\n            txn,\n            targetData!\n          );\n        });\n      }\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        // All `releaseTarget` does is record the final metadata state for the\n        // target, but we've been recording this periodically during target\n        // activity. If we lose this write this could cause a very slight\n        // difference in the order of target deletion during GC, but we\n        // don't define exact LRU semantics so this is acceptable.\n        logDebug(\n          LOG_TAG,\n          `Failed to update sequence numbers for target ${targetId}: ${e}`\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    this.targetDataByTarget = this.targetDataByTarget.remove(targetId);\n    this.targetIdByTarget.delete(targetData!.target);\n  }\n\n  executeQuery(\n    query: Query,\n    usePreviousResults: boolean\n  ): Promise<QueryResult> {\n    let lastLimboFreeSnapshotVersion = SnapshotVersion.min();\n    let remoteKeys = documentKeySet();\n\n    return this.persistence.runTransaction('Execute query', 'readonly', txn => {\n      return this.getTargetData(txn, queryToTarget(query))\n        .next(targetData => {\n          if (targetData) {\n            lastLimboFreeSnapshotVersion =\n              targetData.lastLimboFreeSnapshotVersion;\n            return this.targetCache\n              .getMatchingKeysForTargetId(txn, targetData.targetId)\n              .next(result => {\n                remoteKeys = result;\n              });\n          }\n        })\n        .next(() =>\n          this.queryEngine.getDocumentsMatchingQuery(\n            txn,\n            query,\n            usePreviousResults\n              ? lastLimboFreeSnapshotVersion\n              : SnapshotVersion.min(),\n            usePreviousResults ? remoteKeys : documentKeySet()\n          )\n        )\n        .next(documents => {\n          return { documents, remoteKeys };\n        });\n    });\n  }\n\n  private applyWriteToRemoteDocuments(\n    txn: PersistenceTransaction,\n    batchResult: MutationBatchResult,\n    documentBuffer: RemoteDocumentChangeBuffer\n  ): PersistencePromise<void> {\n    const batch = batchResult.batch;\n    const docKeys = batch.keys();\n    let promiseChain = PersistencePromise.resolve();\n    docKeys.forEach(docKey => {\n      promiseChain = promiseChain\n        .next(() => {\n          return documentBuffer.getEntry(txn, docKey);\n        })\n        .next((remoteDoc: MaybeDocument | null) => {\n          let doc = remoteDoc;\n          const ackVersion = batchResult.docVersions.get(docKey);\n          hardAssert(\n            ackVersion !== null,\n            'ackVersions should contain every doc in the write.'\n          );\n          if (!doc || doc.version.compareTo(ackVersion!) < 0) {\n            doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n            if (!doc) {\n              debugAssert(\n                !remoteDoc,\n                'Mutation batch ' +\n                  batch +\n                  ' applied to document ' +\n                  remoteDoc +\n                  ' resulted in null'\n              );\n            } else {\n              // We use the commitVersion as the readTime rather than the\n              // document's updateTime since the updateTime is not advanced\n              // for updates that do not modify the underlying document.\n              documentBuffer.addEntry(doc, batchResult.commitVersion);\n            }\n          }\n        });\n    });\n    return promiseChain.next(() =>\n      this.mutationQueue.removeMutationBatch(txn, batch)\n    );\n  }\n\n  collectGarbage(garbageCollector: LruGarbageCollector): Promise<LruResults> {\n    return this.persistence.runTransaction(\n      'Collect garbage',\n      'readwrite-primary',\n      txn => garbageCollector.collect(txn, this.targetDataByTarget)\n    );\n  }\n}\n\nexport function newLocalStore(\n  /** Manages our in-memory or durable persistence. */\n  persistence: Persistence,\n  queryEngine: QueryEngine,\n  initialUser: User\n): LocalStore {\n  return new LocalStoreImpl(persistence, queryEngine, initialUser);\n}\n\n/** Returns the local view of the documents affected by a mutation batch. */\n// PORTING NOTE: Multi-Tab only.\nexport function lookupMutationDocuments(\n  localStore: LocalStore,\n  batchId: BatchId\n): Promise<MaybeDocumentMap | null> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const mutationQueueImpl = debugCast(\n    localStoreImpl.mutationQueue,\n    IndexedDbMutationQueue // We only support IndexedDb in multi-tab mode.\n  );\n  return localStoreImpl.persistence.runTransaction(\n    'Lookup mutation documents',\n    'readonly',\n    txn => {\n      return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(keys => {\n        if (keys) {\n          return localStoreImpl.localDocuments.getDocuments(\n            txn,\n            keys\n          ) as PersistencePromise<MaybeDocumentMap | null>;\n        } else {\n          return PersistencePromise.resolve<MaybeDocumentMap | null>(null);\n        }\n      });\n    }\n  );\n}\n\n// PORTING NOTE: Multi-Tab only.\nexport function removeCachedMutationBatchMetadata(\n  localStore: LocalStore,\n  batchId: BatchId\n): void {\n  const mutationQueueImpl = debugCast(\n    debugCast(localStore, LocalStoreImpl).mutationQueue,\n    IndexedDbMutationQueue // We only support IndexedDb in multi-tab mode.\n  );\n  mutationQueueImpl.removeCachedMutationKeys(batchId);\n}\n\n// PORTING NOTE: Multi-Tab only.\nexport function getActiveClientsFromPersistence(\n  localStore: LocalStore\n): Promise<ClientId[]> {\n  const persistenceImpl = debugCast(\n    debugCast(localStore, LocalStoreImpl).persistence,\n    IndexedDbPersistence // We only support IndexedDb in multi-tab mode.\n  );\n  return persistenceImpl.getActiveClients();\n}\n\n// PORTING NOTE: Multi-Tab only.\nexport function getCachedTarget(\n  localStore: LocalStore,\n  targetId: TargetId\n): Promise<Target | null> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const targetCacheImpl = debugCast(\n    localStoreImpl.targetCache,\n    IndexedDbTargetCache // We only support IndexedDb in multi-tab mode.\n  );\n  const cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);\n  if (cachedTargetData) {\n    return Promise.resolve(cachedTargetData.target);\n  } else {\n    return localStoreImpl.persistence.runTransaction(\n      'Get target data',\n      'readonly',\n      txn => {\n        return targetCacheImpl\n          .getTargetDataForTarget(txn, targetId)\n          .next(targetData => (targetData ? targetData.target : null));\n      }\n    );\n  }\n}\n\n/**\n * Returns the set of documents that have been updated since the last call.\n * If this is the first call, returns the set of changes since client\n * initialization. Further invocations will return document that have changed\n * since the prior call.\n */\n// PORTING NOTE: Multi-Tab only.\nexport function getNewDocumentChanges(\n  localStore: LocalStore\n): Promise<MaybeDocumentMap> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const remoteDocumentCacheImpl = debugCast(\n    localStoreImpl.remoteDocuments,\n    IndexedDbRemoteDocumentCache // We only support IndexedDb in multi-tab mode.\n  );\n  return localStoreImpl.persistence\n    .runTransaction('Get new document changes', 'readonly', txn =>\n      remoteDocumentCacheImpl.getNewDocumentChanges(\n        txn,\n        localStoreImpl.lastDocumentChangeReadTime\n      )\n    )\n    .then(({ changedDocs, readTime }) => {\n      localStoreImpl.lastDocumentChangeReadTime = readTime;\n      return changedDocs;\n    });\n}\n\n/**\n * Reads the newest document change from persistence and moves the internal\n * synchronization marker forward so that calls to `getNewDocumentChanges()`\n * only return changes that happened after client initialization.\n */\n// PORTING NOTE: Multi-Tab only.\nexport async function synchronizeLastDocumentChangeReadTime(\n  localStore: LocalStore\n): Promise<void> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const remoteDocumentCacheImpl = debugCast(\n    localStoreImpl.remoteDocuments,\n    IndexedDbRemoteDocumentCache // We only support IndexedDb in multi-tab mode.\n  );\n  return localStoreImpl.persistence\n    .runTransaction(\n      'Synchronize last document change read time',\n      'readonly',\n      txn => remoteDocumentCacheImpl.getLastReadTime(txn)\n    )\n    .then(readTime => {\n      localStoreImpl.lastDocumentChangeReadTime = readTime;\n    });\n}\n\n/**\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\n * operation fails because the primary lease has been taken by another client,\n * we ignore the error (the persistence layer will immediately call\n * `applyPrimaryLease` to propagate the primary state change). All other errors\n * are re-thrown.\n *\n * @param err An error returned by a LocalStore operation.\n * @return A Promise that resolves after we recovered, or the original error.\n */\nexport async function ignoreIfPrimaryLeaseLoss(\n  err: FirestoreError\n): Promise<void> {\n  if (\n    err.code === Code.FAILED_PRECONDITION &&\n    err.message === PRIMARY_LEASE_LOST_ERROR_MSG\n  ) {\n    logDebug(LOG_TAG, 'Unexpectedly lost primary lease');\n  } else {\n    throw err;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { IndexManager } from './index_manager';\nimport { LocalStore } from './local_store';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { TargetData } from './target_data';\n\nexport const PRIMARY_LEASE_LOST_ERROR_MSG =\n  'The current tab is not in the required state to perform this operation. ' +\n  'It might be necessary to refresh the browser tab.';\n\n/**\n * A base class representing a persistence transaction, encapsulating both the\n * transaction's sequence numbers as well as a list of onCommitted listeners.\n *\n * When you call Persistence.runTransaction(), it will create a transaction and\n * pass it to your callback. You then pass it to any method that operates\n * on persistence.\n */\nexport abstract class PersistenceTransaction {\n  private readonly onCommittedListeners: Array<() => void> = [];\n\n  abstract readonly currentSequenceNumber: ListenSequenceNumber;\n\n  addOnCommittedListener(listener: () => void): void {\n    this.onCommittedListeners.push(listener);\n  }\n\n  raiseOnCommittedEvent(): void {\n    this.onCommittedListeners.forEach(listener => listener());\n  }\n}\n\n/** The different modes supported by `IndexedDbPersistence.runTransaction()`. */\nexport type PersistenceTransactionMode =\n  | 'readonly'\n  | 'readwrite'\n  | 'readwrite-primary';\n\n/**\n * Callback type for primary state notifications. This callback can be\n * registered with the persistence layer to get notified when we transition from\n * primary to secondary state and vice versa.\n *\n * Note: Instances can only toggle between Primary and Secondary state if\n * IndexedDB persistence is enabled and multiple clients are active. If this\n * listener is registered with MemoryPersistence, the callback will be called\n * exactly once marking the current instance as Primary.\n */\nexport type PrimaryStateListener = (isPrimary: boolean) => Promise<void>;\n\n/**\n * A ReferenceDelegate instance handles all of the hooks into the document-reference lifecycle. This\n * includes being added to a target, being removed from a target, being subject to mutation, and\n * being mutated by the user.\n *\n * Different implementations may do different things with each of these events. Not every\n * implementation needs to do something with every lifecycle hook.\n *\n * PORTING NOTE: since sequence numbers are attached to transactions in this\n * client, the ReferenceDelegate does not need to deal in transactional\n * semantics (onTransactionStarted/Committed()), nor does it need to track and\n * generate sequence numbers (getCurrentSequenceNumber()).\n */\nexport interface ReferenceDelegate {\n  /** Notify the delegate that the given document was added to a target. */\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that the given document was removed from a target. */\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a target was removed. The delegate may, but is not obligated to,\n   * actually delete the target and associated data.\n   */\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a document may no longer be part of any views or\n   * have any mutations associated.\n   */\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that a limbo document was updated. */\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n}\n\n/**\n * Persistence is the lowest-level shared interface to persistent storage in\n * Firestore.\n *\n * Persistence is used to create MutationQueue and RemoteDocumentCache\n * instances backed by persistence (which might be in-memory or LevelDB).\n *\n * Persistence also exposes an API to create and run PersistenceTransactions\n * against persistence. All read / write operations must be wrapped in a\n * transaction. Implementations of PersistenceTransaction / Persistence only\n * need to guarantee that writes made against the transaction are not made to\n * durable storage until the transaction resolves its PersistencePromise.\n * Since memory-only storage components do not alter durable storage, they are\n * free to ignore the transaction.\n *\n * This contract is enough to allow the LocalStore be be written\n * independently of whether or not the stored state actually is durably\n * persisted. If persistent storage is enabled, writes are grouped together to\n * avoid inconsistent state that could cause crashes.\n *\n * Concretely, when persistent storage is enabled, the persistent versions of\n * MutationQueue, RemoteDocumentCache, and others (the mutators) will\n * defer their writes into a transaction. Once the local store has completed\n * one logical operation, it commits the transaction.\n *\n * When persistent storage is disabled, the non-persistent versions of the\n * mutators ignore the transaction. This short-cut is allowed because\n * memory-only storage leaves no state so it cannot be inconsistent.\n *\n * This simplifies the implementations of the mutators and allows memory-only\n * implementations to supplement the persistent ones without requiring any\n * special dual-store implementation of Persistence. The cost is that the\n * LocalStore needs to be slightly careful about the order of its reads and\n * writes in order to avoid relying on being able to read back uncommitted\n * writes.\n */\nexport interface Persistence {\n  /**\n   * Whether or not this persistence instance has been started.\n   */\n  readonly started: boolean;\n\n  readonly referenceDelegate: ReferenceDelegate;\n\n  /** Starts persistence. */\n  start(): Promise<void>;\n\n  /**\n   * Releases any resources held during eager shutdown.\n   */\n  shutdown(): Promise<void>;\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void;\n\n  /**\n   * Adjusts the current network state in the client's metadata, potentially\n   * affecting the primary lease.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setNetworkEnabled(networkEnabled: boolean): void;\n\n  /**\n   * Returns a MutationQueue representing the persisted mutations for the\n   * given user.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called for a given user. In particular, the memory-backed\n   * implementation does this to emulate the persisted implementation to the\n   * extent possible (e.g. in the case of uid switching from\n   * sally=>jack=>sally, sally's mutation queue will be preserved).\n   */\n  getMutationQueue(user: User): MutationQueue;\n\n  /**\n   * Returns a TargetCache representing the persisted cache of targets.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getTargetCache(): TargetCache;\n\n  /**\n   * Returns a RemoteDocumentCache representing the persisted cache of remote\n   * documents.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getRemoteDocumentCache(): RemoteDocumentCache;\n\n  /**\n   * Returns an IndexManager instance that manages our persisted query indexes.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getIndexManager(): IndexManager;\n\n  /**\n   * Performs an operation inside a persistence transaction. Any reads or writes\n   * against persistence must be performed within a transaction. Writes will be\n   * committed atomically once the transaction completes.\n   *\n   * Persistence operations are asynchronous and therefore the provided\n   * transactionOperation must return a PersistencePromise. When it is resolved,\n   * the transaction will be committed and the Promise returned by this method\n   * will resolve.\n   *\n   * @param action A description of the action performed by this transaction,\n   * used for logging.\n   * @param mode The underlying mode of the IndexedDb transaction. Can be\n   * 'readonly`, 'readwrite' or 'readwrite-primary'. Transactions marked\n   * 'readwrite-primary' can only be executed by the primary client. In this\n   * mode, the transactionOperation will not be run if the primary lease cannot\n   * be acquired and the returned promise will be rejected with a\n   * FAILED_PRECONDITION error.\n   * @param transactionOperation The operation to run inside a transaction.\n   * @return A promise that is resolved once the transaction completes.\n   */\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T>;\n}\n\n/**\n * Interface implemented by the LRU scheduler to start(), stop() and restart\n * garbage collection.\n */\nexport interface GarbageCollectionScheduler {\n  readonly started: boolean;\n  start(localStore: LocalStore): void;\n  stop(): void;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, TargetId } from '../core/types';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { ResourcePath } from '../model/path';\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nexport class ReferenceSet {\n  // A set of outstanding references to a document sorted by key.\n  private refsByKey = new SortedSet(DocReference.compareByKey);\n\n  // A set of outstanding references to a document sorted by target id.\n  private refsByTarget = new SortedSet(DocReference.compareByTargetId);\n\n  /** Returns true if the reference set contains no references. */\n  isEmpty(): boolean {\n    return this.refsByKey.isEmpty();\n  }\n\n  /** Adds a reference to the given document key for the given ID. */\n  addReference(key: DocumentKey, id: TargetId | BatchId): void {\n    const ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  }\n\n  /** Add references to the given document keys for the given ID. */\n  addReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.addReference(key, id));\n  }\n\n  /**\n   * Removes a reference to the given document key for the given\n   * ID.\n   */\n  removeReference(key: DocumentKey, id: TargetId | BatchId): void {\n    this.removeRef(new DocReference(key, id));\n  }\n\n  removeReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.removeReference(key, id));\n  }\n\n  /**\n   * Clears all references with a given ID. Calls removeRef() for each key\n   * removed.\n   */\n  removeReferencesForId(id: TargetId | BatchId): DocumentKey[] {\n    const emptyKey = new DocumentKey(new ResourcePath([]));\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    const keys: DocumentKey[] = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      this.removeRef(ref);\n      keys.push(ref.key);\n    });\n    return keys;\n  }\n\n  removeAllReferences(): void {\n    this.refsByKey.forEach(ref => this.removeRef(ref));\n  }\n\n  private removeRef(ref: DocReference): void {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  }\n\n  referencesForId(id: TargetId | BatchId): DocumentKeySet {\n    const emptyKey = new DocumentKey(new ResourcePath([]));\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    let keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  }\n\n  containsKey(key: DocumentKey): boolean {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  }\n}\n\nexport class DocReference {\n  constructor(\n    public key: DocumentKey,\n    public targetOrBatchId: TargetId | BatchId\n  ) {}\n\n  /** Compare by key then by ID */\n  static compareByKey(left: DocReference, right: DocReference): number {\n    return (\n      DocumentKey.comparator(left.key, right.key) ||\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId)\n    );\n  }\n\n  /** Compare by ID then by key */\n  static compareByTargetId(left: DocReference, right: DocReference): number {\n    return (\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n      DocumentKey.comparator(left.key, right.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { Dict, forEach } from './obj';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\n/**\n * Validates that no arguments were passed in the invocation of functionName.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateNoArgs('myFunction', arguments);\n */\nexport function validateNoArgs(functionName: string, args: IArguments): void {\n  if (args.length !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() does not support arguments, ` +\n        'but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(\n  functionName: string,\n  args: ArrayLike<unknown>,\n  numberOfArgs: number\n): void {\n  if (args.length !== numberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires ` +\n        formatPlural(numberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires at least ` +\n        formatPlural(minNumberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number,\n  maxNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires between ${minNumberOfArgs} and ` +\n        `${maxNumberOfArgs} arguments, but was called with ` +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements<T>(\n  functionName: string,\n  value: T[],\n  name: string,\n  minNumberOfElements: number\n): void {\n  if (!(value instanceof Array) || value.length < minNumberOfElements) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${name} argument to be an ` +\n        'array with at least ' +\n        `${formatPlural(minNumberOfElements, 'element')}.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${ordinal(position)} argument`, argument);\n}\n\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateArgType(functionName, type, position, argument);\n  }\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${optionName} option`, argument);\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateNamedType(functionName, type, optionName, argument);\n  }\n}\n\nexport function validateArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[],\n  validator: (arg0: T) => boolean\n): void {\n  if (!(argument instanceof Array)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${optionName} ` +\n        `option to be an array, but it was: ${valueDescription(argument)}`\n    );\n  }\n\n  for (let i = 0; i < argument.length; ++i) {\n    if (!validator(argument[i])) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${functionName}() requires all ${optionName} ` +\n          `elements to be ${typeDescription}, but the value at index ${i} ` +\n          `was: ${valueDescription(argument[i])}`\n      );\n    }\n  }\n}\n\nexport function validateOptionalArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[] | undefined,\n  validator: (arg0: T) => boolean\n): void {\n  if (argument !== undefined) {\n    validateArrayElements(\n      functionName,\n      optionName,\n      typeDescription,\n      argument,\n      validator\n    );\n  }\n}\n\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nexport function validateNamedPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  const expectedDescription: string[] = [];\n\n  for (const val of expected) {\n    if (val === input) {\n      return;\n    }\n    expectedDescription.push(valueDescription(val));\n  }\n\n  const actualDescription = valueDescription(input);\n  throw new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Invalid value ${actualDescription} provided to function ${functionName}() for option ` +\n      `\"${optionName}\". Acceptable values: ${expectedDescription.join(', ')}`\n  );\n}\n\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nexport function validateNamedOptionalPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  if (input !== undefined) {\n    validateNamedPropertyEquals(\n      functionName,\n      inputName,\n      optionName,\n      input,\n      expected\n    );\n  }\n}\n\n/**\n * Validates that the provided argument is a valid enum.\n *\n * @param functionName Function making the validation call.\n * @param enums Array containing all possible values for the enum.\n * @param position Position of the argument in `functionName`.\n * @param argument Argument to validate.\n * @return The value as T if the argument can be converted.\n */\nexport function validateStringEnum<T>(\n  functionName: string,\n  enums: T[],\n  position: number,\n  argument: unknown\n): T {\n  if (!enums.some(element => element === argument)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value ${valueDescription(argument)} provided to function ` +\n        `${functionName}() for its ${ordinal(position)} argument. Acceptable ` +\n        `values: ${enums.join(', ')}`\n    );\n  }\n  return argument as T;\n}\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nexport function validateDocumentPath(path: ResourcePath): void {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid document reference. Document references must have an even number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nexport function validateCollectionPath(path: ResourcePath): void {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection reference. Collection references must have an odd number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/** Helper to validate the type of a provided input. */\nfunction validateType(\n  functionName: string,\n  type: ValidationType,\n  inputName: string,\n  input: unknown\n): void {\n  let valid = false;\n  if (type === 'object') {\n    valid = isPlainObject(input);\n  } else if (type === 'non-empty string') {\n    valid = typeof input === 'string' && input !== '';\n  } else {\n    valid = typeof input === type;\n  }\n\n  if (!valid) {\n    const description = valueDescription(input);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${inputName} ` +\n        `to be of type ${type}, but it was: ${description}`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/** Validates the provided argument is defined. */\nexport function validateDefined(\n  functionName: string,\n  position: number,\n  argument: unknown\n): void {\n  if (argument === undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a valid ${ordinal(position)} ` +\n        `argument, but it was undefined.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(\n  functionName: string,\n  options: object,\n  optionNames: string[]\n): void {\n  forEach(options as Dict<unknown>, (key, _) => {\n    if (optionNames.indexOf(key) < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Unknown option '${key}' passed to function ${functionName}(). ` +\n          'Available options: ' +\n          optionNames.join(', ')\n      );\n    }\n  });\n}\n\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: unknown\n): Error {\n  const description = valueDescription(argument);\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Function ${functionName}() requires its ${ordinal(position)} ` +\n      `argument to be a ${type}, but it was: ${description}`\n  );\n}\n\nexport function validatePositiveNumber(\n  functionName: string,\n  position: number,\n  n: number\n): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${ordinal(\n        position\n      )} argument to be a positive number, but it was: ${n}.`\n    );\n  }\n}\n\n/** Converts a number to its english word representation */\nfunction ordinal(num: number): string {\n  switch (num) {\n    case 1:\n      return 'first';\n    case 2:\n      return 'second';\n    case 3:\n      return 'third';\n    default:\n      return num + 'th';\n  }\n}\n\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num: number, str: string): string {\n  return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBase64Available } from '../platform/base64';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { ByteString } from '../util/byte_string';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!isBase64Available()) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob {\n  // Prefix with underscore to signal that we consider this not part of the\n  // public API and to prevent it from showing up for autocompletion.\n  _byteString: ByteString;\n\n  constructor(byteString: ByteString) {\n    assertBase64Available();\n    this._byteString = byteString;\n  }\n\n  static fromBase64String(base64: string): Blob {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try {\n      return new Blob(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    }\n    return new Blob(ByteString.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return this._byteString.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    return this._byteString.toUint8Array();\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateNamedArrayAtLeastNumberOfElements\n} from '../util/input_validation';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A field class base class that is shared by the lite, full and legacy SDK,\n * which supports shared code that deals with FieldPaths.\n */\nexport abstract class BaseFieldPath {\n  /** Internal representation of a Firestore field path. */\n  readonly _internalPath: InternalFieldPath;\n\n  constructor(fieldNames: string[]) {\n    validateNamedArrayAtLeastNumberOfElements(\n      'FieldPath',\n      fieldNames,\n      'fieldNames',\n      1\n    );\n\n    for (let i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n}\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath extends BaseFieldPath implements firestore.FieldPath {\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    super(fieldNames);\n  }\n\n  static documentId(): FieldPath {\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    return new FieldPath(InternalFieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other: firestore.FieldPath): boolean {\n    if (!(other instanceof FieldPath)) {\n      throw invalidClassError('isEqual', 'FieldPath', 1, other);\n    }\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\nimport {\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateExactNumberOfArgs,\n  validateNoArgs\n} from '../util/input_validation';\nimport { FieldTransform } from '../model/mutation';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform\n} from '../model/transform_operation';\nimport { ParseContext, parseData, UserDataSource } from './user_data_reader';\nimport { debugAssert } from '../util/assert';\nimport { toNumber } from '../remote/serializer';\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API that\n * is shared between the full, lite and legacy SDK.\n */\nexport abstract class SerializableFieldValue {\n  /** The public API endpoint that returns this class. */\n  abstract readonly _methodName: string;\n\n  /** A pointer to the implementing class. */\n  readonly _delegate: SerializableFieldValue = this;\n\n  abstract _toFieldTransform(context: ParseContext): FieldTransform | null;\n\n  abstract isEqual(other: SerializableFieldValue): boolean;\n}\n\nexport class DeleteFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): null {\n    if (context.dataSource === UserDataSource.MergeSet) {\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      context.fieldMask.push(context.path!);\n    } else if (context.dataSource === UserDataSource.Update) {\n      debugAssert(\n        context.path!.length > 0,\n        `${this._methodName}() at the top level should have already ` +\n          'been handled.'\n      );\n      throw context.createError(\n        `${this._methodName}() can only appear at the top level ` +\n          'of your update data'\n      );\n    } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(\n        `${this._methodName}() cannot be used with set() unless you pass ` +\n          '{merge:true}'\n      );\n    }\n    return null;\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof DeleteFieldValueImpl;\n  }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue The sentinel FieldValue for which to create a child\n *     context.\n * @param context The parent context.\n * @param arrayElement Whether or not the FieldValue has an array.\n */\nfunction createSentinelChildContext(\n  fieldValue: SerializableFieldValue,\n  context: ParseContext,\n  arrayElement: boolean\n): ParseContext {\n  return new ParseContext(\n    {\n      dataSource: UserDataSource.Argument,\n      targetDoc: context.settings.targetDoc,\n      methodName: fieldValue._methodName,\n      arrayElement\n    },\n    context.databaseId,\n    context.serializer,\n    context.ignoreUndefinedProperties\n  );\n}\n\nexport class ServerTimestampFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    return new FieldTransform(context.path!, new ServerTimestampTransform());\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof ServerTimestampFieldValueImpl;\n  }\n}\n\nexport class ArrayUnionFieldValueImpl extends SerializableFieldValue {\n  constructor(\n    readonly _methodName: string,\n    private readonly _elements: unknown[]\n  ) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const parseContext = createSentinelChildContext(\n      this,\n      context,\n      /*array=*/ true\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class ArrayRemoveFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string, readonly _elements: unknown[]) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const parseContext = createSentinelChildContext(\n      this,\n      context,\n      /*array=*/ true\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class NumericIncrementFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string, private readonly _operand: number) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const numericIncrement = new NumericIncrementTransformOperation(\n      context.serializer,\n      toNumber(context.serializer, this._operand)\n    );\n    return new FieldTransform(context.path!, numericIncrement);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\n/** The public FieldValue class of the lite API. */\nexport abstract class FieldValue extends SerializableFieldValue\n  implements firestore.FieldValue {\n  protected constructor() {\n    super();\n  }\n\n  static delete(): firestore.FieldValue {\n    validateNoArgs('FieldValue.delete', arguments);\n    return new FieldValueDelegate(\n      new DeleteFieldValueImpl('FieldValue.delete')\n    );\n  }\n\n  static serverTimestamp(): firestore.FieldValue {\n    validateNoArgs('FieldValue.serverTimestamp', arguments);\n    return new FieldValueDelegate(\n      new ServerTimestampFieldValueImpl('FieldValue.serverTimestamp')\n    );\n  }\n\n  static arrayUnion(...elements: unknown[]): firestore.FieldValue {\n    validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new FieldValueDelegate(\n      new ArrayUnionFieldValueImpl('FieldValue.arrayUnion', elements)\n    );\n  }\n\n  static arrayRemove(...elements: unknown[]): firestore.FieldValue {\n    validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new FieldValueDelegate(\n      new ArrayRemoveFieldValueImpl('FieldValue.arrayRemove', elements)\n    );\n  }\n\n  static increment(n: number): firestore.FieldValue {\n    validateArgType('FieldValue.increment', 'number', 1, n);\n    validateExactNumberOfArgs('FieldValue.increment', arguments, 1);\n    return new FieldValueDelegate(\n      new NumericIncrementFieldValueImpl('FieldValue.increment', n)\n    );\n  }\n}\n\n/**\n * A delegate class that allows the FieldValue implementations returned by\n * deleteField(), serverTimestamp(), arrayUnion(), arrayRemove() and\n * increment() to be an instance of the legacy FieldValue class declared above.\n *\n * We don't directly subclass `FieldValue` in the various field value\n * implementations as the base FieldValue class differs between the lite, full\n * and legacy SDK.\n */\nclass FieldValueDelegate extends FieldValue implements firestore.FieldValue {\n  readonly _methodName: string;\n\n  constructor(readonly _delegate: SerializableFieldValue) {\n    super();\n    this._methodName = _delegate._methodName;\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform | null {\n    return this._delegate._toFieldTransform(context);\n  }\n\n  isEqual(other: firestore.FieldValue): boolean {\n    if (!(other instanceof FieldValueDelegate)) {\n      return false;\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  constructor(latitude: number, longitude: number) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * Returns the latitude of this geo point, a number between -90 and 90.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * Returns the longitude of this geo point, a number between -180 and 180.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  isEqual(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Return the Platform-specific serializer monitor. */\nimport { DatabaseId } from '../../core/database_info';\nimport { JsonProtoSerializer } from '../../remote/serializer';\n\nexport function newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n  return new JsonProtoSerializer(databaseId, /* useProto3Json= */ true);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation\n} from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { Dict, forEach, isEmpty } from '../util/obj';\nimport { ObjectValue, ObjectValueBuilder } from '../model/object_value';\nimport {\n  JsonProtoSerializer,\n  toBytes,\n  toNumber,\n  toResourceName,\n  toTimestamp\n} from '../remote/serializer';\nimport { Blob } from './blob';\nimport { BaseFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, SerializableFieldValue } from './field_value';\nimport { GeoPoint } from './geo_point';\nimport { newSerializer } from '../platform/serializer';\n\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n\n/**\n * An untyped Firestore Data Converter interface that is shared between the\n * lite, full and legacy SDK.\n */\nexport interface UntypedFirestoreDataConverter<T> {\n  toFirestore(modelObject: T): firestore.DocumentData;\n  toFirestore(\n    modelObject: Partial<T>,\n    options: firestore.SetOptions\n  ): firestore.DocumentData;\n  fromFirestore(snapshot: unknown, options?: unknown): T;\n}\n\n/**\n * A reference to a document in a Firebase project.\n *\n * This class serves as a common base class for the public DocumentReferences\n * exposed in the lite, full and legacy SDK.\n */\nexport class DocumentKeyReference<T> {\n  constructor(\n    readonly _databaseId: DatabaseId,\n    readonly _key: DocumentKey,\n    readonly _converter: UntypedFirestoreDataConverter<T> | null\n  ) {}\n}\n\n/** The result of parsing document data (e.g. for a setData call). */\nexport class ParsedSetData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask | null,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [] as Mutation[];\n    if (this.fieldMask !== null) {\n      mutations.push(\n        new PatchMutation(key, this.data, this.fieldMask, precondition)\n      );\n    } else {\n      mutations.push(new SetMutation(key, this.data, precondition));\n    }\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nexport class ParsedUpdateData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [\n      new PatchMutation(key, this.data, this.fieldMask, precondition)\n    ] as Mutation[];\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nexport const enum UserDataSource {\n  Set,\n  Update,\n  MergeSet,\n  /**\n   * Indicates the source is a where clause, cursor bound, arrayUnion()\n   * element, etc. Of note, isWrite(source) will return false.\n   */\n  Argument,\n  /**\n   * Indicates that the source is an Argument that may directly contain nested\n   * arrays (e.g. the operand of an `in` query).\n   */\n  ArrayArgument\n}\n\nfunction isWrite(dataSource: UserDataSource): boolean {\n  switch (dataSource) {\n    case UserDataSource.Set: // fall through\n    case UserDataSource.MergeSet: // fall through\n    case UserDataSource.Update:\n      return true;\n    case UserDataSource.Argument:\n    case UserDataSource.ArrayArgument:\n      return false;\n    default:\n      throw fail(`Unexpected case for UserDataSource: ${dataSource}`);\n  }\n}\n\n/** Contains the settings that are mutated as we parse user data. */\ninterface ContextSettings {\n  /** Indicates what kind of API method this data came from. */\n  readonly dataSource: UserDataSource;\n  /** The name of the method the user called to create the ParseContext. */\n  readonly methodName: string;\n  /** The document the user is attempting to modify, if that applies. */\n  readonly targetDoc?: DocumentKey;\n  /**\n   * A path within the object being parsed. This could be an empty path (in\n   * which case the context represents the root of the data being parsed), or a\n   * nonempty path (indicating the context represents a nested location within\n   * the data).\n   */\n  readonly path?: FieldPath;\n  /**\n   * Whether or not this context corresponds to an element of an array.\n   * If not set, elements are treated as if they were outside of arrays.\n   */\n  readonly arrayElement?: boolean;\n  /**\n   * Whether or not a converter was specified in this context. If true, error\n   * messages will reference the converter when invalid data is provided.\n   */\n  readonly hasConverter?: boolean;\n}\n\n/** A \"context\" object passed around while parsing user data. */\nexport class ParseContext {\n  readonly fieldTransforms: FieldTransform[];\n  readonly fieldMask: FieldPath[];\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings The settings for the parser.\n   * @param databaseId The database ID of the Firestore instance.\n   * @param serializer The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms A mutable list of field transforms encountered while\n   *     parsing the data.\n   * @param fieldMask A mutable list of field paths encountered while parsing\n   *     the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(\n    readonly settings: ContextSettings,\n    readonly databaseId: DatabaseId,\n    readonly serializer: JsonProtoSerializer,\n    readonly ignoreUndefinedProperties: boolean,\n    fieldTransforms?: FieldTransform[],\n    fieldMask?: FieldPath[]\n  ) {\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  get path(): FieldPath | undefined {\n    return this.settings.path;\n  }\n\n  get dataSource(): UserDataSource {\n    return this.settings.dataSource;\n  }\n\n  /** Returns a new context with the specified settings overwritten. */\n  contextWith(configuration: Partial<ContextSettings>): ParseContext {\n    return new ParseContext(\n      { ...this.settings, ...configuration },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n  }\n\n  childContextForField(field: string): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePathSegment(field);\n    return context;\n  }\n\n  childContextForFieldPath(field: FieldPath): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePath();\n    return context;\n  }\n\n  childContextForArray(index: number): ParseContext {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({ path: undefined, arrayElement: true });\n  }\n\n  createError(reason: string): Error {\n    return createError(\n      reason,\n      this.settings.methodName,\n      this.settings.hasConverter || false,\n      this.path,\n      this.settings.targetDoc\n    );\n  }\n\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath: FieldPath): boolean {\n    return (\n      this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\n      this.fieldTransforms.find(transform =>\n        fieldPath.isPrefixOf(transform.field)\n      ) !== undefined\n    );\n  }\n\n  private validatePath(): void {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n\n  private validatePathSegment(segment: string): void {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nexport class UserDataReader {\n  private readonly serializer: JsonProtoSerializer;\n\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly ignoreUndefinedProperties: boolean,\n    serializer?: JsonProtoSerializer\n  ) {\n    this.serializer = serializer || newSerializer(databaseId);\n  }\n\n  /** Creates a new top-level parse context. */\n  createContext(\n    dataSource: UserDataSource,\n    methodName: string,\n    targetDoc?: DocumentKey,\n    hasConverter = false\n  ): ParseContext {\n    return new ParseContext(\n      {\n        dataSource,\n        methodName,\n        targetDoc,\n        path: FieldPath.emptyPath(),\n        arrayElement: false,\n        hasConverter\n      },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties\n    );\n  }\n}\n\n/** Parse document data from a set() call. */\nexport function parseSetData(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  input: unknown,\n  hasConverter: boolean,\n  options: firestore.SetOptions = {}\n): ParsedSetData {\n  const context = userDataReader.createContext(\n    options.merge || options.mergeFields\n      ? UserDataSource.MergeSet\n      : UserDataSource.Set,\n    methodName,\n    targetDoc,\n    hasConverter\n  );\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  const updateData = parseObject(input, context)!;\n\n  let fieldMask: FieldMask | null;\n  let fieldTransforms: FieldTransform[];\n\n  if (options.merge) {\n    fieldMask = new FieldMask(context.fieldMask);\n    fieldTransforms = context.fieldTransforms;\n  } else if (options.mergeFields) {\n    const validatedFieldPaths: FieldPath[] = [];\n\n    for (const stringOrFieldPath of options.mergeFields) {\n      let fieldPath: FieldPath;\n\n      if (stringOrFieldPath instanceof BaseFieldPath) {\n        fieldPath = stringOrFieldPath._internalPath;\n      } else if (typeof stringOrFieldPath === 'string') {\n        fieldPath = fieldPathFromDotSeparatedString(\n          methodName,\n          stringOrFieldPath,\n          targetDoc\n        );\n      } else {\n        throw fail('Expected stringOrFieldPath to be a string or a FieldPath');\n      }\n\n      if (!context.contains(fieldPath)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Field '${fieldPath}' is specified in your field mask but missing from your input data.`\n        );\n      }\n\n      if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n        validatedFieldPaths.push(fieldPath);\n      }\n    }\n\n    fieldMask = new FieldMask(validatedFieldPaths);\n    fieldTransforms = context.fieldTransforms.filter(transform =>\n      fieldMask!.covers(transform.field)\n    );\n  } else {\n    fieldMask = null;\n    fieldTransforms = context.fieldTransforms;\n  }\n\n  return new ParsedSetData(\n    new ObjectValue(updateData),\n    fieldMask,\n    fieldTransforms\n  );\n}\n\n/** Parse update data from an update() call. */\nexport function parseUpdateData(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  input: unknown\n): ParsedUpdateData {\n  const context = userDataReader.createContext(\n    UserDataSource.Update,\n    methodName,\n    targetDoc\n  );\n  validatePlainObject('Data must be an object, but it was:', context, input);\n\n  const fieldMaskPaths: FieldPath[] = [];\n  const updateData = new ObjectValueBuilder();\n  forEach(input as Dict<unknown>, (key, value) => {\n    const path = fieldPathFromDotSeparatedString(methodName, key, targetDoc);\n\n    const childContext = context.childContextForFieldPath(path);\n    if (\n      value instanceof SerializableFieldValue &&\n      value._delegate instanceof DeleteFieldValueImpl\n    ) {\n      // Add it to the field mask, but don't add anything to updateData.\n      fieldMaskPaths.push(path);\n    } else {\n      const parsedValue = parseData(value, childContext);\n      if (parsedValue != null) {\n        fieldMaskPaths.push(path);\n        updateData.set(path, parsedValue);\n      }\n    }\n  });\n\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(\n    updateData.build(),\n    mask,\n    context.fieldTransforms\n  );\n}\n\n/** Parse update data from a list of field/value arguments. */\nexport function parseUpdateVarargs(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  field: string | BaseFieldPath,\n  value: unknown,\n  moreFieldsAndValues: unknown[]\n): ParsedUpdateData {\n  const context = userDataReader.createContext(\n    UserDataSource.Update,\n    methodName,\n    targetDoc\n  );\n  const keys = [fieldPathFromArgument(methodName, field, targetDoc)];\n  const values = [value];\n\n  if (moreFieldsAndValues.length % 2 !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() needs to be called with an even number ` +\n        'of arguments that alternate between field names and values.'\n    );\n  }\n\n  for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n    keys.push(\n      fieldPathFromArgument(\n        methodName,\n        moreFieldsAndValues[i] as string | BaseFieldPath\n      )\n    );\n    values.push(moreFieldsAndValues[i + 1]);\n  }\n\n  const fieldMaskPaths: FieldPath[] = [];\n  const updateData = new ObjectValueBuilder();\n\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (let i = keys.length - 1; i >= 0; --i) {\n    if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n      const path = keys[i];\n      const value = values[i];\n      const childContext = context.childContextForFieldPath(path);\n      if (\n        value instanceof SerializableFieldValue &&\n        value._delegate instanceof DeleteFieldValueImpl\n      ) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        const parsedValue = parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n  }\n\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(\n    updateData.build(),\n    mask,\n    context.fieldTransforms\n  );\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\nexport function parseQueryValue(\n  userDataReader: UserDataReader,\n  methodName: string,\n  input: unknown,\n  allowArrays = false\n): api.Value {\n  const context = userDataReader.createContext(\n    allowArrays ? UserDataSource.ArrayArgument : UserDataSource.Argument,\n    methodName\n  );\n  const parsed = parseData(input, context);\n  debugAssert(parsed != null, 'Parsed data should not be null.');\n  debugAssert(\n    context.fieldTransforms.length === 0,\n    'Field transforms should have been disallowed.'\n  );\n  return parsed;\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input Data to be parsed.\n * @param context A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @return The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nexport function parseData(\n  input: unknown,\n  context: ParseContext\n): api.Value | null {\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof SerializableFieldValue) {\n    // FieldValues usually parse into transforms (except FieldValue.delete())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (\n        context.settings.arrayElement &&\n        context.dataSource !== UserDataSource.ArrayArgument\n      ) {\n        throw context.createError('Nested arrays are not supported');\n      }\n      return parseArray(input as unknown[], context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\n\nfunction parseObject(\n  obj: Dict<unknown>,\n  context: ParseContext\n): { mapValue: api.MapValue } {\n  const fields: Dict<api.Value> = {};\n\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, (key: string, val: unknown) => {\n      const parsedValue = parseData(val, context.childContextForField(key));\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n\n  return { mapValue: { fields } };\n}\n\nfunction parseArray(array: unknown[], context: ParseContext): api.Value {\n  const values: api.Value[] = [];\n  let entryIndex = 0;\n  for (const entry of array) {\n    let parsedEntry = parseData(\n      entry,\n      context.childContextForArray(entryIndex)\n    );\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = { nullValue: 'NULL_VALUE' };\n    }\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\nfunction parseSentinelFieldValue(\n  value: SerializableFieldValue,\n  context: ParseContext\n): void {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(\n      `${value._methodName}() can only be used with update() and set()`\n    );\n  }\n  if (!context.path) {\n    throw context.createError(\n      `${value._methodName}() is not currently supported inside arrays`\n    );\n  }\n\n  const fieldTransform = value._toFieldTransform(context);\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n\n/**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @return The parsed value\n */\nfunction parseScalarValue(\n  value: unknown,\n  context: ParseContext\n): api.Value | null {\n  if (value === null) {\n    return { nullValue: 'NULL_VALUE' };\n  } else if (typeof value === 'number') {\n    return toNumber(context.serializer, value);\n  } else if (typeof value === 'boolean') {\n    return { booleanValue: value };\n  } else if (typeof value === 'string') {\n    return { stringValue: value };\n  } else if (value instanceof Date) {\n    const timestamp = Timestamp.fromDate(value);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    const timestamp = new Timestamp(\n      value.seconds,\n      Math.floor(value.nanoseconds / 1000) * 1000\n    );\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Blob) {\n    return { bytesValue: toBytes(context.serializer, value) };\n  } else if (value instanceof DocumentKeyReference) {\n    const thisDb = context.databaseId;\n    const otherDb = value._databaseId;\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError(\n        'Document reference is for database ' +\n          `${otherDb.projectId}/${otherDb.database} but should be ` +\n          `for database ${thisDb.projectId}/${thisDb.database}`\n      );\n    }\n    return {\n      referenceValue: toResourceName(\n        value._databaseId || context.databaseId,\n        value._key.path\n      )\n    };\n  } else if (value === undefined && context.ignoreUndefinedProperties) {\n    return null;\n  } else {\n    throw context.createError(\n      `Unsupported field value: ${valueDescription(value)}`\n    );\n  }\n}\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    !(input instanceof Array) &&\n    !(input instanceof Date) &&\n    !(input instanceof Timestamp) &&\n    !(input instanceof GeoPoint) &&\n    !(input instanceof Blob) &&\n    !(input instanceof DocumentKeyReference) &&\n    !(input instanceof SerializableFieldValue)\n  );\n}\n\nfunction validatePlainObject(\n  message: string,\n  context: ParseContext,\n  input: unknown\n): asserts input is Dict<unknown> {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  path: string | BaseFieldPath,\n  targetDoc?: DocumentKey\n): FieldPath {\n  if (path instanceof BaseFieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or FieldPath.';\n    throw createError(\n      message,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n}\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n * @param targetDoc The document against which the field path will be evaluated.\n */\nexport function fieldPathFromDotSeparatedString(\n  methodName: string,\n  path: string,\n  targetDoc?: DocumentKey\n): FieldPath {\n  try {\n    return fromDotSeparatedString(path)._internalPath;\n  } catch (e) {\n    const message = errorMessage(e);\n    throw createError(\n      message,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n}\n\nfunction createError(\n  reason: string,\n  methodName: string,\n  hasConverter: boolean,\n  path?: FieldPath,\n  targetDoc?: DocumentKey\n): Error {\n  const hasPath = path && !path.isEmpty();\n  const hasDocument = targetDoc !== undefined;\n  let message = `Function ${methodName}() called with invalid data`;\n  if (hasConverter) {\n    message += ' (via `toFirestore()`)';\n  }\n  message += '. ';\n\n  let description = '';\n  if (hasPath || hasDocument) {\n    description += ' (found';\n\n    if (hasPath) {\n      description += ` in field ${path}`;\n    }\n    if (hasDocument) {\n      description += ` in document ${targetDoc}`;\n    }\n    description += ')';\n  }\n\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    message + reason + description\n  );\n}\n\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error: Error | object): string {\n  return error instanceof Error ? error.message : error.toString();\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction fieldMaskContains(haystack: FieldPath[], needle: FieldPath): boolean {\n  return haystack.some(v => v.isEqual(needle));\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isAuthenticated(): boolean {\n    return this.uid != null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n\n  isEqual(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { logDebug } from '../util/log';\n\n// TODO(mikelehen): This should be split into multiple files and probably\n// moved to an auth/ folder to match other platforms.\n\nexport interface FirstPartyCredentialsSettings {\n  type: 'gapi';\n  client: unknown;\n  sessionIndex: string;\n}\n\nexport interface ProviderCredentialsSettings {\n  type: 'provider';\n  client: CredentialsProvider;\n}\n\n/** Settings for private credentials */\nexport type CredentialsSettings =\n  | FirstPartyCredentialsSettings\n  | ProviderCredentialsSettings;\n\nexport type TokenType = 'OAuth' | 'FirstParty';\nexport interface Token {\n  /** Type of token. */\n  type: TokenType;\n\n  /**\n   * The user with which the token is associated (used for persisting user\n   * state on disk, etc.).\n   */\n  user: User;\n\n  /** Extra header values to be passed along with a request */\n  authHeaders: { [header: string]: string };\n}\n\nexport class OAuthToken implements Token {\n  type = 'OAuth' as TokenType;\n  authHeaders: { [header: string]: string };\n  constructor(value: string, public user: User) {\n    this.authHeaders = {};\n    // Set the headers using Object Literal notation to avoid minification\n    this.authHeaders['Authorization'] = `Bearer ${value}`;\n  }\n}\n\n/**\n * A Listener for credential change events. The listener should fetch a new\n * token and may need to invalidate other state if the current user has also\n * changed.\n */\nexport type CredentialChangeListener = (user: User) => void;\n\n/**\n * Provides methods for getting the uid and token for the current user and\n * listening for changes.\n */\nexport interface CredentialsProvider {\n  /** Requests a token for the current user. */\n  getToken(): Promise<Token | null>;\n\n  /**\n   * Marks the last retrieved token as invalid, making the next GetToken request\n   * force-refresh the token.\n   */\n  invalidateToken(): void;\n\n  /**\n   * Specifies a listener to be notified of credential changes\n   * (sign-in / sign-out, token changes). It is immediately called once with the\n   * initial user.\n   */\n  setChangeListener(changeListener: CredentialChangeListener): void;\n\n  /** Removes the previously-set change listener. */\n  removeChangeListener(): void;\n}\n\n/** A CredentialsProvider that always yields an empty token. */\nexport class EmptyCredentialsProvider implements CredentialsProvider {\n  /**\n   * Stores the listener registered with setChangeListener()\n   * This isn't actually necessary since the UID never changes, but we use this\n   * to verify the listen contract is adhered to in tests.\n   */\n  private changeListener: CredentialChangeListener | null = null;\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(null);\n  }\n\n  invalidateToken(): void {}\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    changeListener(User.UNAUTHENTICATED);\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() when no listener registered'\n    );\n    this.changeListener = null;\n  }\n}\n\nexport class FirebaseCredentialsProvider implements CredentialsProvider {\n  /**\n   * The auth token listener registered with FirebaseApp, retained here so we\n   * can unregister it.\n   */\n  private tokenListener: ((token: string | null) => void) | null = null;\n\n  /** Tracks the current User. */\n  private currentUser: User = User.UNAUTHENTICATED;\n  private receivedInitialUser: boolean = false;\n\n  /**\n   * Counter used to detect if the token changed while a getToken request was\n   * outstanding.\n   */\n  private tokenCounter = 0;\n\n  /** The listener registered with setChangeListener(). */\n  private changeListener: CredentialChangeListener | null = null;\n\n  private forceRefresh = false;\n\n  private auth: FirebaseAuthInternal | null;\n\n  constructor(authProvider: Provider<FirebaseAuthInternalName>) {\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      this.receivedInitialUser = true;\n      if (this.changeListener) {\n        this.changeListener(this.currentUser);\n      }\n    };\n\n    this.tokenCounter = 0;\n\n    this.auth = authProvider.getImmediate({ optional: true });\n\n    if (this.auth) {\n      this.auth.addAuthTokenListener(this.tokenListener!);\n    } else {\n      // if auth is not available, invoke tokenListener once with null token\n      this.tokenListener(null);\n      authProvider.get().then(\n        auth => {\n          this.auth = auth;\n          if (this.tokenListener) {\n            // tokenListener can be removed by removeChangeListener()\n            this.auth.addAuthTokenListener(this.tokenListener);\n          }\n        },\n        () => {\n          /* this.authProvider.get() never rejects */\n        }\n      );\n    }\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'getToken cannot be called after listener removed.'\n    );\n\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        logDebug(\n          'FirebaseCredentialsProvider',\n          'getToken aborted due to token change.'\n        );\n        return this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(\n            typeof tokenData.accessToken === 'string',\n            'Invalid tokenData returned from getToken():' + tokenData\n          );\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n\n    // Fire the initial event\n    if (this.receivedInitialUser) {\n      changeListener(this.currentUser);\n    }\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.tokenListener != null,\n      'removeChangeListener() called twice'\n    );\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() called when no listener registered'\n    );\n\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener!);\n    }\n    this.tokenListener = null;\n    this.changeListener = null;\n  }\n\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  private getUser(): User {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(\n      currentUid === null || typeof currentUid === 'string',\n      'Received invalid UID: ' + currentUid\n    );\n    return new User(currentUid);\n  }\n}\n\n// Manual type definition for the subset of Gapi we use.\ninterface Gapi {\n  auth: {\n    getAuthHeaderValueForFirstParty: (\n      userIdentifiers: Array<{ [key: string]: string }>\n    ) => string | null;\n  };\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nexport class FirstPartyToken implements Token {\n  type = 'FirstParty' as TokenType;\n  user = User.FIRST_PARTY;\n\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  get authHeaders(): { [header: string]: string } {\n    const headers: { [header: string]: string } = {\n      'X-Goog-AuthUser': this.sessionIndex\n    };\n    const authHeader = this.gapi.auth.getAuthHeaderValueForFirstParty([]);\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    return headers;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nexport class FirstPartyCredentialsProvider implements CredentialsProvider {\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    // Fire with initial uid.\n    changeListener(User.FIRST_PARTY);\n  }\n\n  removeChangeListener(): void {}\n\n  invalidateToken(): void {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(\n  credentials?: CredentialsSettings\n): CredentialsProvider {\n  if (!credentials) {\n    return new EmptyCredentialsProvider();\n  }\n\n  switch (credentials.type) {\n    case 'gapi':\n      const client = credentials.client as Gapi;\n      // Make sure this really is a Gapi client.\n      hardAssert(\n        !!(\n          typeof client === 'object' &&\n          client !== null &&\n          client['auth'] &&\n          client['auth']['getAuthHeaderValueForFirstParty']\n        ),\n        'unexpected gapi interface'\n      );\n      return new FirstPartyCredentialsProvider(\n        client,\n        credentials.sessionIndex || '0'\n      );\n\n    case 'provider':\n      return credentials.client;\n\n    default:\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'makeCredentialsProvider failed due to invalid credential type'\n      );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider, Token } from '../api/credentials';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { TargetData } from '../local/target_data';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\n\nimport { isNullOrUndefined } from '../util/types';\nimport { ExponentialBackoff } from './backoff';\nimport { Connection, Stream } from './connection';\nimport {\n  fromVersion,\n  fromWatchChange,\n  fromWriteResults,\n  getEncodedDatabaseId,\n  JsonProtoSerializer,\n  toListenRequestLabels,\n  toMutation,\n  toTarget,\n  versionFromListenResponse\n} from './serializer';\nimport { WatchChange } from './watch_change';\n\nconst LOG_TAG = 'PersistentStream';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface ListenRequest extends api.ListenRequest {\n  database?: string;\n}\nexport interface WriteRequest extends api.WriteRequest {\n  database?: string;\n}\n/**\n * PersistentStream can be in one of 5 states (each described in detail below)\n * based on the following state transition diagram:\n *\n *          start() called             auth & connection succeeded\n * INITIAL ----------------> STARTING -----------------------------> OPEN\n *                             ^  |                                   |\n *                             |  |                    error occurred |\n *                             |  \\-----------------------------v-----/\n *                             |                                |\n *                    backoff  |                                |\n *                    elapsed  |              start() called    |\n *                             \\--- BACKOFF <---------------- ERROR\n *\n * [any state] --------------------------> INITIAL\n *               stop() called or\n *               idle timer expired\n */\nconst enum PersistentStreamState {\n  /**\n   * The streaming RPC is not yet running and there's no error condition.\n   * Calling start() will start the stream immediately without backoff.\n   * While in this state isStarted() will return false.\n   */\n  Initial,\n\n  /**\n   * The stream is starting, either waiting for an auth token or for the stream\n   * to successfully open. While in this state, isStarted() will return true but\n   * isOpen() will return false.\n   */\n  Starting,\n\n  /**\n   * The streaming RPC is up and running. Requests and responses can flow\n   * freely. Both isStarted() and isOpen() will return true.\n   */\n  Open,\n\n  /**\n   * The stream encountered an error. The next start attempt will back off.\n   * While in this state isStarted() will return false.\n   */\n  Error,\n\n  /**\n   * An in-between state after an error where the stream is waiting before\n   * re-starting. After waiting is complete, the stream will try to open.\n   * While in this state isStarted() will return true but isOpen() will return\n   * false.\n   */\n  Backoff\n}\n\n/**\n * Provides a common interface that is shared by the listeners for stream\n * events by the concrete implementation classes.\n */\nexport interface PersistentStreamListener {\n  /**\n   * Called after the stream was established and can accept outgoing\n   * messages\n   */\n  onOpen: () => Promise<void>;\n  /**\n   * Called after the stream has closed. If there was an error, the\n   * FirestoreError will be set.\n   */\n  onClose: (err?: FirestoreError) => Promise<void>;\n}\n\n/** The time a stream stays open after it is marked idle. */\nconst IDLE_TIMEOUT_MS = 60 * 1000;\n\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *   - Closing idle streams after 60 seconds of inactivity\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be start()ed before messages can\n * be sent and received. The PersistentStream will call the onOpen() function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a start() fail, PersistentStream will call the registered onClose()\n * listener with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nexport abstract class PersistentStream<\n  SendType,\n  ReceiveType,\n  ListenerType extends PersistentStreamListener\n> {\n  private state = PersistentStreamState.Initial;\n  /**\n   * A close count that's incremented every time the stream is closed; used by\n   * getCloseGuardedDispatcher() to invalidate callbacks that happen after\n   * close.\n   */\n  private closeCount = 0;\n\n  private idleTimer: DelayedOperation<void> | null = null;\n  private stream: Stream<SendType, ReceiveType> | null = null;\n\n  protected backoff: ExponentialBackoff;\n\n  constructor(\n    private queue: AsyncQueue,\n    connectionTimerId: TimerId,\n    private idleTimerId: TimerId,\n    protected connection: Connection,\n    private credentialsProvider: CredentialsProvider,\n    protected listener: ListenerType\n  ) {\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n\n  /**\n   * Returns true if start() has been called and no error has occurred. True\n   * indicates the stream is open or in the process of opening (which\n   * encompasses respecting backoff, getting auth tokens, and starting the\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\n   * outbound requests.\n   */\n  isStarted(): boolean {\n    return (\n      this.state === PersistentStreamState.Starting ||\n      this.state === PersistentStreamState.Open ||\n      this.state === PersistentStreamState.Backoff\n    );\n  }\n\n  /**\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\n   * called) and the stream is ready for outbound requests.\n   */\n  isOpen(): boolean {\n    return this.state === PersistentStreamState.Open;\n  }\n\n  /**\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\n   * ready for outbound requests, at which point isOpen() will return true.\n   *\n   * When start returns, isStarted() will return true.\n   */\n  start(): void {\n    if (this.state === PersistentStreamState.Error) {\n      this.performBackoff();\n      return;\n    }\n\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Already started'\n    );\n    this.auth();\n  }\n\n  /**\n   * Stops the RPC. This call is idempotent and allowed regardless of the\n   * current isStarted() state.\n   *\n   * When stop returns, isStarted() and isOpen() will both return false.\n   */\n  async stop(): Promise<void> {\n    if (this.isStarted()) {\n      await this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /**\n   * After an error the stream will usually back off on the next attempt to\n   * start it. If the error warrants an immediate restart of the stream, the\n   * sender can use this to indicate that the receiver should not back off.\n   *\n   * Each error will call the onClose() listener. That function can decide to\n   * inhibit backoff if required.\n   */\n  inhibitBackoff(): void {\n    debugAssert(\n      !this.isStarted(),\n      'Can only inhibit backoff in a stopped state'\n    );\n\n    this.state = PersistentStreamState.Initial;\n    this.backoff.reset();\n  }\n\n  /**\n   * Marks this stream as idle. If no further actions are performed on the\n   * stream for one minute, the stream will automatically close itself and\n   * notify the stream's onClose() handler with Status.OK. The stream will then\n   * be in a !isStarted() state, requiring the caller to start the stream again\n   * before further use.\n   *\n   * Only streams that are in state 'Open' can be marked idle, as all other\n   * states imply pending network operations.\n   */\n  markIdle(): void {\n    // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(\n        this.idleTimerId,\n        IDLE_TIMEOUT_MS,\n        () => this.handleIdleCloseTimer()\n      );\n    }\n  }\n\n  /** Sends a message to the underlying stream. */\n  protected sendRequest(msg: SendType): void {\n    this.cancelIdleCheck();\n    this.stream!.send(msg);\n  }\n\n  /** Called by the idle timer when the stream should close due to inactivity. */\n  private async handleIdleCloseTimer(): Promise<void> {\n    if (this.isOpen()) {\n      // When timing out an idle stream there's no reason to force the stream into backoff when\n      // it restarts so set the stream state to Initial instead of Error.\n      return this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /** Marks the stream as active again. */\n  private cancelIdleCheck(): void {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  }\n\n  /**\n   * Closes the stream and cleans up as necessary:\n   *\n   * * closes the underlying GRPC stream;\n   * * calls the onClose handler with the given 'error';\n   * * sets internal stream state to 'finalState';\n   * * adjusts the backoff timer based on the error\n   *\n   * A new stream can be opened by calling start().\n   *\n   * @param finalState the intended state of the stream after closing.\n   * @param error the error the connection was closed with.\n   */\n  private async close(\n    finalState: PersistentStreamState,\n    error?: FirestoreError\n  ): Promise<void> {\n    debugAssert(this.isStarted(), 'Only started streams should be closed.');\n    debugAssert(\n      finalState === PersistentStreamState.Error || isNullOrUndefined(error),\n      \"Can't provide an error when not in an error state.\"\n    );\n\n    // Cancel any outstanding timers (they're guaranteed not to execute).\n    this.cancelIdleCheck();\n    this.backoff.cancel();\n\n    // Invalidates any stream-related callbacks (e.g. from auth or the\n    // underlying stream), guaranteeing they won't execute.\n    this.closeCount++;\n\n    if (finalState !== PersistentStreamState.Error) {\n      // If this is an intentional close ensure we don't delay our next connection attempt.\n      this.backoff.reset();\n    } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n      logError(error.toString());\n      logError(\n        'Using maximum backoff delay to prevent overloading the backend.'\n      );\n      this.backoff.resetToMax();\n    } else if (error && error.code === Code.UNAUTHENTICATED) {\n      // \"unauthenticated\" error means the token was rejected. Try force refreshing it in case it\n      // just expired.\n      this.credentialsProvider.invalidateToken();\n    }\n\n    // Clean up the underlying stream because we are no longer interested in events.\n    if (this.stream !== null) {\n      this.tearDown();\n      this.stream.close();\n      this.stream = null;\n    }\n\n    // This state must be assigned before calling onClose() to allow the callback to\n    // inhibit backoff or otherwise manipulate the state in its non-started state.\n    this.state = finalState;\n\n    // Notify the listener that the stream closed.\n    await this.listener.onClose(error);\n  }\n\n  /**\n   * Can be overridden to perform additional cleanup before the stream is closed.\n   * Calling super.tearDown() is not required.\n   */\n  protected tearDown(): void {}\n\n  /**\n   * Used by subclasses to start the concrete RPC and return the underlying\n   * connection stream.\n   */\n  protected abstract startRpc(\n    token: Token | null\n  ): Stream<SendType, ReceiveType>;\n\n  /**\n   * Called after the stream has received a message. The function will be\n   * called on the right queue and must return a Promise.\n   * @param message The message received from the stream.\n   */\n  protected abstract onMessage(message: ReceiveType): Promise<void>;\n\n  private auth(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Must be in initial state to auth'\n    );\n\n    this.state = PersistentStreamState.Starting;\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n    const closeCount = this.closeCount;\n\n    this.credentialsProvider.getToken().then(\n      token => {\n        // Stream can be stopped while waiting for authentication.\n        // TODO(mikelehen): We really should just use dispatchIfNotClosed\n        // and let this dispatch onto the queue, but that opened a spec test can\n        // of worms that I don't want to deal with in this PR.\n        if (this.closeCount === closeCount) {\n          // Normally we'd have to schedule the callback on the AsyncQueue.\n          // However, the following calls are safe to be called outside the\n          // AsyncQueue since they don't chain asynchronous calls\n          this.startStream(token);\n        }\n      },\n      (error: Error) => {\n        dispatchIfNotClosed(() => {\n          const rpcError = new FirestoreError(\n            Code.UNKNOWN,\n            'Fetching auth token failed: ' + error.message\n          );\n          return this.handleStreamClose(rpcError);\n        });\n      }\n    );\n  }\n\n  private startStream(token: Token | null): void {\n    debugAssert(\n      this.state === PersistentStreamState.Starting,\n      'Trying to start stream in a non-starting state'\n    );\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    this.stream = this.startRpc(token);\n    this.stream.onOpen(() => {\n      dispatchIfNotClosed(() => {\n        debugAssert(\n          this.state === PersistentStreamState.Starting,\n          'Expected stream to be in state Starting, but was ' + this.state\n        );\n        this.state = PersistentStreamState.Open;\n        return this.listener!.onOpen();\n      });\n    });\n    this.stream.onClose((error?: FirestoreError) => {\n      dispatchIfNotClosed(() => {\n        return this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage((msg: ReceiveType) => {\n      dispatchIfNotClosed(() => {\n        return this.onMessage(msg);\n      });\n    });\n  }\n\n  private performBackoff(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Error,\n      'Should only perform backoff when in Error state'\n    );\n    this.state = PersistentStreamState.Backoff;\n\n    this.backoff.backoffAndRun(async () => {\n      debugAssert(\n        this.state === PersistentStreamState.Backoff,\n        'Backoff elapsed but state is now: ' + this.state\n      );\n\n      this.state = PersistentStreamState.Initial;\n      this.start();\n      debugAssert(this.isStarted(), 'PersistentStream should have started');\n    });\n  }\n\n  // Visible for tests\n  handleStreamClose(error?: FirestoreError): Promise<void> {\n    debugAssert(\n      this.isStarted(),\n      \"Can't handle server close on non-started stream\"\n    );\n    logDebug(LOG_TAG, `close with error: ${error}`);\n\n    this.stream = null;\n\n    // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n    return this.close(PersistentStreamState.Error, error);\n  }\n\n  /**\n   * Returns a \"dispatcher\" function that dispatches operations onto the\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\n   * re-opened, etc.\n   */\n  private getCloseGuardedDispatcher(\n    startCloseCount: number\n  ): (fn: () => Promise<void>) => void {\n    return (fn: () => Promise<void>): void => {\n      this.queue.enqueueAndForget(() => {\n        if (this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(\n            LOG_TAG,\n            'stream callback skipped by getCloseGuardedDispatcher.'\n          );\n          return Promise.resolve();\n        }\n      });\n    };\n  }\n}\n\n/** Listener for the PersistentWatchStream */\nexport interface WatchStreamListener extends PersistentStreamListener {\n  /**\n   * Called on a watchChange. The snapshot parameter will be MIN if the watch\n   * change did not have a snapshot associated with it.\n   */\n  onWatchChange: (\n    watchChange: WatchChange,\n    snapshot: SnapshotVersion\n  ) => Promise<void>;\n}\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the onOpen() listener, any number of\n * listen() and unlisten() calls can be made to control what changes will be\n * sent from the server for ListenResponses.\n */\nexport class PersistentListenStream extends PersistentStream<\n  api.ListenRequest,\n  api.ListenResponse,\n  WatchStreamListener\n> {\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WatchStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.ListenStreamConnectionBackoff,\n      TimerId.ListenStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.ListenRequest, api.ListenResponse> {\n    return this.connection.openStream<api.ListenRequest, api.ListenResponse>(\n      'Listen',\n      token\n    );\n  }\n\n  protected onMessage(watchChangeProto: api.ListenResponse): Promise<void> {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n\n    const watchChange = fromWatchChange(this.serializer, watchChangeProto);\n    const snapshot = versionFromListenResponse(watchChangeProto);\n    return this.listener!.onWatchChange(watchChange, snapshot);\n  }\n\n  /**\n   * Registers interest in the results of the given target. If the target\n   * includes a resumeToken it will be included in the request. Results that\n   * affect the target will be streamed back as WatchChange messages that\n   * reference the targetId.\n   */\n  watch(targetData: TargetData): void {\n    const request: ListenRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.addTarget = toTarget(this.serializer, targetData);\n\n    const labels = toListenRequestLabels(this.serializer, targetData);\n    if (labels) {\n      request.labels = labels;\n    }\n\n    this.sendRequest(request);\n  }\n\n  /**\n   * Unregisters interest in the results of the target associated with the\n   * given targetId.\n   */\n  unwatch(targetId: TargetId): void {\n    const request: ListenRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  }\n}\n\n/** Listener for the PersistentWriteStream */\nexport interface WriteStreamListener extends PersistentStreamListener {\n  /**\n   * Called by the PersistentWriteStream upon a successful handshake response\n   * from the server, which is the receiver's cue to send any pending writes.\n   */\n  onHandshakeComplete: () => Promise<void>;\n\n  /**\n   * Called by the PersistentWriteStream upon receiving a StreamingWriteResponse\n   * from the server that contains a mutation result.\n   */\n  onMutationResult: (\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ) => Promise<void>;\n}\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nexport class PersistentWriteStream extends PersistentStream<\n  api.WriteRequest,\n  api.WriteResponse,\n  WriteStreamListener\n> {\n  private handshakeComplete_ = false;\n\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WriteStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.WriteStreamConnectionBackoff,\n      TimerId.WriteStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  /**\n   * The last received stream token from the server, used to acknowledge which\n   * responses the client has processed. Stream tokens are opaque checkpoint\n   * markers whose only real value is their inclusion in the next request.\n   *\n   * PersistentWriteStream manages propagating this value from responses to the\n   * next request.\n   */\n  private lastStreamToken: string | Uint8Array | undefined;\n\n  /**\n   * Tracks whether or not a handshake has been successfully exchanged and\n   * the stream is ready to accept mutations.\n   */\n  get handshakeComplete(): boolean {\n    return this.handshakeComplete_;\n  }\n\n  // Override of PersistentStream.start\n  start(): void {\n    this.handshakeComplete_ = false;\n    this.lastStreamToken = undefined;\n    super.start();\n  }\n\n  protected tearDown(): void {\n    if (this.handshakeComplete_) {\n      this.writeMutations([]);\n    }\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.WriteRequest, api.WriteResponse> {\n    return this.connection.openStream<api.WriteRequest, api.WriteResponse>(\n      'Write',\n      token\n    );\n  }\n\n  protected onMessage(responseProto: api.WriteResponse): Promise<void> {\n    // Always capture the last stream token.\n    hardAssert(\n      !!responseProto.streamToken,\n      'Got a write response without a stream token'\n    );\n    this.lastStreamToken = responseProto.streamToken;\n\n    if (!this.handshakeComplete_) {\n      // The first response is always the handshake response\n      hardAssert(\n        !responseProto.writeResults || responseProto.writeResults.length === 0,\n        'Got mutation results for handshake'\n      );\n      this.handshakeComplete_ = true;\n      return this.listener!.onHandshakeComplete();\n    } else {\n      // A successful first write response means the stream is healthy,\n      // Note, that we could consider a successful handshake healthy, however,\n      // the write itself might be causing an error we want to back off from.\n      this.backoff.reset();\n\n      const results = fromWriteResults(\n        responseProto.writeResults,\n        responseProto.commitTime\n      );\n      const commitVersion = fromVersion(responseProto.commitTime!);\n      return this.listener!.onMutationResult(commitVersion, results);\n    }\n  }\n\n  /**\n   * Sends an initial streamToken to the server, performing the handshake\n   * required to make the StreamingWrite RPC work. Subsequent\n   * calls should wait until onHandshakeComplete was called.\n   */\n  writeHandshake(): void {\n    debugAssert(this.isOpen(), 'Writing handshake requires an opened stream');\n    debugAssert(!this.handshakeComplete_, 'Handshake already completed');\n    debugAssert(\n      !this.lastStreamToken,\n      'Stream token should be empty during handshake'\n    );\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    const request: WriteRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    this.sendRequest(request);\n  }\n\n  /** Sends a group of mutations to the Firestore backend to apply. */\n  writeMutations(mutations: Mutation[]): void {\n    debugAssert(this.isOpen(), 'Writing mutations requires an opened stream');\n    debugAssert(\n      this.handshakeComplete_,\n      'Handshake must be complete before writing mutations'\n    );\n    debugAssert(\n      !!this.lastStreamToken,\n      'Trying to write mutation without a token'\n    );\n\n    const request: WriteRequest = {\n      streamToken: this.lastStreamToken,\n      writes: mutations.map(mutation => toMutation(this.serializer, mutation))\n    };\n\n    this.sendRequest(request);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, debugCast, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { Connection } from './connection';\nimport {\n  fromDocument,\n  fromMaybeDocument,\n  getEncodedDatabaseId,\n  JsonProtoSerializer,\n  toMutation,\n  toName,\n  toQueryTarget\n} from './serializer';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream,\n  WatchStreamListener,\n  WriteStreamListener\n} from './persistent_stream';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Query, queryToTarget } from '../core/query';\n\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\nexport abstract class Datastore {\n  abstract start(connection: Connection): void;\n}\n\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass DatastoreImpl extends Datastore {\n  connection!: Connection;\n  terminated = false;\n\n  constructor(\n    readonly credentials: CredentialsProvider,\n    readonly serializer: JsonProtoSerializer\n  ) {\n    super();\n  }\n\n  verifyInitialized(): void {\n    debugAssert(!!this.connection, 'Datastore.start() not called');\n    if (this.terminated) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  start(connection: Connection): void {\n    debugAssert(!this.connection, 'Datastore.start() already called');\n    this.connection = connection;\n  }\n\n  /** Gets an auth token and invokes the provided RPC. */\n  invokeRPC<Req, Resp>(rpcName: string, request: Req): Promise<Resp> {\n    this.verifyInitialized();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeRPC<Req, Resp>(rpcName, request, token);\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req\n  ): Promise<Resp[]> {\n    this.verifyInitialized();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeStreamingRPC<Req, Resp>(\n          rpcName,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nexport function newDatastore(\n  credentials: CredentialsProvider,\n  serializer: JsonProtoSerializer\n): Datastore {\n  return new DatastoreImpl(credentials, serializer);\n}\n\nexport async function invokeCommitRpc(\n  datastore: Datastore,\n  mutations: Mutation[]\n): Promise<void> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const params = {\n    database: getEncodedDatabaseId(datastoreImpl.serializer),\n    writes: mutations.map(m => toMutation(datastoreImpl.serializer, m))\n  };\n  await datastoreImpl.invokeRPC('Commit', params);\n}\n\nexport async function invokeBatchGetDocumentsRpc(\n  datastore: Datastore,\n  keys: DocumentKey[]\n): Promise<MaybeDocument[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const params = {\n    database: getEncodedDatabaseId(datastoreImpl.serializer),\n    documents: keys.map(k => toName(datastoreImpl.serializer, k))\n  };\n  const response = await datastoreImpl.invokeStreamingRPC<\n    api.BatchGetDocumentsRequest,\n    api.BatchGetDocumentsResponse\n  >('BatchGetDocuments', params);\n\n  const docs = new Map<string, MaybeDocument>();\n  response.forEach(proto => {\n    const doc = fromMaybeDocument(datastoreImpl.serializer, proto);\n    docs.set(doc.key.toString(), doc);\n  });\n  const result: MaybeDocument[] = [];\n  keys.forEach(key => {\n    const doc = docs.get(key.toString());\n    hardAssert(!!doc, 'Missing entity in write response for ' + key);\n    result.push(doc);\n  });\n  return result;\n}\n\nexport async function invokeRunQueryRpc(\n  datastore: Datastore,\n  query: Query\n): Promise<Document[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const { structuredQuery, parent } = toQueryTarget(\n    datastoreImpl.serializer,\n    queryToTarget(query)\n  );\n  const params = {\n    database: getEncodedDatabaseId(datastoreImpl.serializer),\n    parent,\n    structuredQuery\n  };\n\n  const response = await datastoreImpl.invokeStreamingRPC<\n    api.RunQueryRequest,\n    api.RunQueryResponse\n  >('RunQuery', params);\n\n  return (\n    response\n      // Omit RunQueryResponses that only contain readTimes.\n      .filter(proto => !!proto.document)\n      .map(proto =>\n        fromDocument(datastoreImpl.serializer, proto.document!, undefined)\n      )\n  );\n}\n\nexport function newPersistentWriteStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WriteStreamListener\n): PersistentWriteStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.verifyInitialized();\n  return new PersistentWriteStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function newPersistentWatchStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WatchStreamListener\n): PersistentListenStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.verifyInitialized();\n  return new PersistentListenStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function terminateDatastore(datastore: Datastore): void {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.terminated = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedSetData, ParsedUpdateData } from '../api/user_data_reader';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\n\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition,\n  VerifyMutation\n} from '../model/mutation';\nimport {\n  Datastore,\n  invokeBatchGetDocumentsRpc,\n  invokeCommitRpc\n} from '../remote/datastore';\nimport { fail, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { SnapshotVersion } from './snapshot_version';\nimport { ResourcePath } from '../model/path';\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nexport class Transaction {\n  // The version of each document that was read during this transaction.\n  private readVersions = new Map</* path */ string, SnapshotVersion>();\n  private mutations: Mutation[] = [];\n  private committed = false;\n\n  /**\n   * A deferred usage error that occurred previously in this transaction that\n   * will cause the transaction to fail once it actually commits.\n   */\n  private lastWriteError: FirestoreError | null = null;\n\n  /**\n   * Set of documents that have been written in the transaction.\n   *\n   * When there's more than one write to the same key in a transaction, any\n   * writes after the first are handled differently.\n   */\n  private writtenDocs: Set<DocumentKey> = new Set();\n\n  constructor(private datastore: Datastore) {}\n\n  async lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    this.ensureCommitNotCalled();\n\n    if (this.mutations.length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Firestore transactions require all reads to be executed before all writes.'\n      );\n    }\n    const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\n    docs.forEach(doc => {\n      if (doc instanceof NoDocument || doc instanceof Document) {\n        this.recordVersion(doc);\n      } else {\n        fail('Document in a transaction was a ' + doc.constructor.name);\n      }\n    });\n    return docs;\n  }\n\n  set(key: DocumentKey, data: ParsedSetData): void {\n    this.write(data.toMutations(key, this.precondition(key)));\n    this.writtenDocs.add(key);\n  }\n\n  update(key: DocumentKey, data: ParsedUpdateData): void {\n    try {\n      this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e;\n    }\n    this.writtenDocs.add(key);\n  }\n\n  delete(key: DocumentKey): void {\n    this.write([new DeleteMutation(key, this.precondition(key))]);\n    this.writtenDocs.add(key);\n  }\n\n  async commit(): Promise<void> {\n    this.ensureCommitNotCalled();\n\n    if (this.lastWriteError) {\n      throw this.lastWriteError;\n    }\n    const unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten.delete(mutation.key.toString());\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((_, path) => {\n      const key = new DocumentKey(ResourcePath.fromString(path));\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await invokeCommitRpc(this.datastore, this.mutations);\n    this.committed = true;\n  }\n\n  private recordVersion(doc: MaybeDocument): void {\n    let docVersion: SnapshotVersion;\n\n    if (doc instanceof Document) {\n      docVersion = doc.version;\n    } else if (doc instanceof NoDocument) {\n      // For deleted docs, we must use baseVersion 0 when we overwrite them.\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail('Document in a transaction was a ' + doc.constructor.name);\n    }\n\n    const existingVersion = this.readVersions.get(doc.key.toString());\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(\n          Code.ABORTED,\n          'Document version changed between two reads.'\n        );\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  }\n\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  private precondition(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    if (!this.writtenDocs.has(key) && version) {\n      return Precondition.updateTime(version);\n    } else {\n      return Precondition.none();\n    }\n  }\n\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  private preconditionForUpdate(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't update a document that doesn't exist.\"\n        );\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n\n  private write(mutations: Mutation[]): void {\n    this.ensureCommitNotCalled();\n    this.mutations = this.mutations.concat(mutations);\n  }\n\n  private ensureCommitNotCalled(): void {\n    debugAssert(\n      !this.committed,\n      'A transaction object cannot be used after its update callback has been invoked.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnlineState } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\n\nconst LOG_TAG = 'OnlineStateTracker';\n\n// To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\nconst MAX_WATCH_STREAM_FAILURES = 1;\n\n// To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n\n/**\n * A component used by the RemoteStore to track the OnlineState (that is,\n * whether or not the client as a whole should be considered to be online or\n * offline), implementing the appropriate heuristics.\n *\n * In particular, when the client is trying to connect to the backend, we\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\n * a connection to succeed. If we have too many failures or the timeout elapses,\n * then we set the OnlineState to Offline, and the client will behave as if\n * it is offline (get()s will return cached data, etc.).\n */\nexport class OnlineStateTracker {\n  /** The current OnlineState. */\n  private state = OnlineState.Unknown;\n\n  /**\n   * A count of consecutive failures to open the stream. If it reaches the\n   * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\n   * Offline.\n   */\n  private watchStreamFailures = 0;\n\n  /**\n   * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\n   * transition from OnlineState.Unknown to OnlineState.Offline without waiting\n   * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\n   */\n  private onlineStateTimer: DelayedOperation<void> | null = null;\n\n  /**\n   * Whether the client should log a warning message if it fails to connect to\n   * the backend (initially true, cleared after a successful stream, or if we've\n   * logged the message already).\n   */\n  private shouldWarnClientIsOffline = true;\n\n  constructor(\n    private asyncQueue: AsyncQueue,\n    private onlineStateHandler: (onlineState: OnlineState) => void\n  ) {}\n\n  /**\n   * Called by RemoteStore when a watch stream is started (including on each\n   * backoff attempt).\n   *\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\n   * the onlineStateTimer.\n   */\n  handleWatchStreamStart(): void {\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      debugAssert(\n        this.onlineStateTimer === null,\n        `onlineStateTimer shouldn't be started yet`\n      );\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\n        TimerId.OnlineStateTimeout,\n        ONLINE_STATE_TIMEOUT_MS,\n        () => {\n          this.onlineStateTimer = null;\n          debugAssert(\n            this.state === OnlineState.Unknown,\n            'Timer should be canceled if we transitioned to a different state.'\n          );\n          this.logClientOfflineWarningIfNecessary(\n            `Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` +\n              `seconds.`\n          );\n          this.setAndBroadcast(OnlineState.Offline);\n\n          // NOTE: handleWatchStreamFailure() will continue to increment\n          // watchStreamFailures even though we are already marked Offline,\n          // but this is non-harmful.\n\n          return Promise.resolve();\n        }\n      );\n    }\n  }\n\n  /**\n   * Updates our OnlineState as appropriate after the watch stream reports a\n   * failure. The first failure moves us to the 'Unknown' state. We then may\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\n   * actually transition to the 'Offline' state.\n   */\n  handleWatchStreamFailure(error: FirestoreError): void {\n    if (this.state === OnlineState.Online) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      // To get to OnlineState.Online, set() must have been called which would\n      // have reset our heuristics.\n      debugAssert(\n        this.watchStreamFailures === 0,\n        'watchStreamFailures must be 0'\n      );\n      debugAssert(\n        this.onlineStateTimer === null,\n        'onlineStateTimer must be null'\n      );\n    } else {\n      this.watchStreamFailures++;\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n\n        this.logClientOfflineWarningIfNecessary(\n          `Connection failed ${MAX_WATCH_STREAM_FAILURES} ` +\n            `times. Most recent error: ${error.toString()}`\n        );\n\n        this.setAndBroadcast(OnlineState.Offline);\n      }\n    }\n  }\n\n  /**\n   * Explicitly sets the OnlineState to the specified state.\n   *\n   * Note that this resets our timers / failure counters, etc. used by our\n   * Offline heuristics, so must not be used in place of\n   * handleWatchStreamStart() and handleWatchStreamFailure().\n   */\n  set(newState: OnlineState): void {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n\n    if (newState === OnlineState.Online) {\n      // We've connected to watch at least once. Don't warn the developer\n      // about being offline going forward.\n      this.shouldWarnClientIsOffline = false;\n    }\n\n    this.setAndBroadcast(newState);\n  }\n\n  private setAndBroadcast(newState: OnlineState): void {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  }\n\n  private logClientOfflineWarningIfNecessary(details: string): void {\n    const message =\n      `Could not reach Cloud Firestore backend. ${details}\\n` +\n      `This typically indicates that your device does not have a healthy ` +\n      `Internet connection at the moment. The client will operate in offline ` +\n      `mode until it is able to successfully connect to the backend.`;\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG, message);\n    }\n  }\n\n  private clearOnlineStateTimer(): void {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState, TargetId } from '../core/types';\nimport { LocalStore } from '../local/local_store';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { MutationResult } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { DocumentKeySet } from '../model/collections';\nimport { AsyncQueue } from '../util/async_queue';\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\nimport {\n  Datastore,\n  newPersistentWatchStream,\n  newPersistentWriteStream\n} from './datastore';\nimport { OnlineStateTracker } from './online_state_tracker';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\nimport { RemoteSyncer } from './remote_syncer';\nimport { isPermanentWriteError } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  TargetMetadataProvider,\n  WatchChange,\n  WatchChangeAggregator,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { ByteString } from '../util/byte_string';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\nimport { User } from '../auth/user';\n\nconst LOG_TAG = 'RemoteStore';\n\n// TODO(b/35853402): Negotiate this with the stream.\nconst MAX_PENDING_WRITES = 10;\n\n/** Reasons for why the RemoteStore may be offline. */\nconst enum OfflineCause {\n  /** The user has explicitly disabled the network (via `disableNetwork()`). */\n  UserDisabled,\n  /** An IndexedDb failure occurred while persisting a stream update. */\n  IndexedDbFailed,\n  /** The tab is not the primary tab (only relevant with multi-tab). */\n  IsSecondary,\n  /** We are restarting the streams due to an Auth credential change. */\n  CredentialChange,\n  /** The connectivity state of the environment has changed. */\n  ConnectivityChange,\n  /** The RemoteStore has been shut down. */\n  Shutdown\n}\n\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nexport class RemoteStore implements TargetMetadataProvider {\n  /**\n   * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\n   * LocalStore via fillWritePipeline() and have or will send to the write\n   * stream.\n   *\n   * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\n   * restart the write stream. When the stream is established the writes in the\n   * pipeline will be sent in order.\n   *\n   * Writes remain in writePipeline until they are acknowledged by the backend\n   * and thus will automatically be re-sent if the stream is interrupted /\n   * restarted before they're acknowledged.\n   *\n   * Write responses from the backend are linked to their originating request\n   * purely based on order, and so we can just shift() writes from the front of\n   * the writePipeline as we receive responses.\n   */\n  private writePipeline: MutationBatch[] = [];\n\n  /**\n   * A mapping of watched targets that the client cares about tracking and the\n   * user has explicitly called a 'listen' for this target.\n   *\n   * These targets may or may not have been sent to or acknowledged by the\n   * server. On re-establishing the listen stream, these targets should be sent\n   * to the server. The targets removed with unlistens are removed eagerly\n   * without waiting for confirmation from the listen stream.\n   */\n  private listenTargets = new Map<TargetId, TargetData>();\n\n  private connectivityMonitor: ConnectivityMonitor;\n  private watchStream: PersistentListenStream;\n  private writeStream: PersistentWriteStream;\n  private watchChangeAggregator: WatchChangeAggregator | null = null;\n\n  /**\n   * A set of reasons for why the RemoteStore may be offline. If empty, the\n   * RemoteStore may start its network connections.\n   */\n  private offlineCauses = new Set<OfflineCause>();\n\n  private onlineStateTracker: OnlineStateTracker;\n\n  constructor(\n    /**\n     * The local store, used to fill the write pipeline with outbound mutations.\n     */\n    private localStore: LocalStore,\n    /** The client-side proxy for interacting with the backend. */\n    private datastore: Datastore,\n    private asyncQueue: AsyncQueue,\n    onlineStateHandler: (onlineState: OnlineState) => void,\n    connectivityMonitor: ConnectivityMonitor\n  ) {\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback((_: NetworkStatus) => {\n      asyncQueue.enqueueAndForget(async () => {\n        // Porting Note: Unlike iOS, `restartNetwork()` is called even when the\n        // network becomes unreachable as we don't have any other way to tear\n        // down our streams.\n        if (this.canUseNetwork()) {\n          logDebug(\n            LOG_TAG,\n            'Restarting streams for network reachability change.'\n          );\n          await this.restartNetwork();\n        }\n      });\n    });\n\n    this.onlineStateTracker = new OnlineStateTracker(\n      asyncQueue,\n      onlineStateHandler\n    );\n\n    // Create streams (but note they're not started yet).\n    this.watchStream = newPersistentWatchStream(this.datastore, asyncQueue, {\n      onOpen: this.onWatchStreamOpen.bind(this),\n      onClose: this.onWatchStreamClose.bind(this),\n      onWatchChange: this.onWatchStreamChange.bind(this)\n    });\n\n    this.writeStream = newPersistentWriteStream(this.datastore, asyncQueue, {\n      onOpen: this.onWriteStreamOpen.bind(this),\n      onClose: this.onWriteStreamClose.bind(this),\n      onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n      onMutationResult: this.onMutationResult.bind(this)\n    });\n  }\n\n  /**\n   * SyncEngine to notify of watch and write events. This must be set\n   * immediately after construction.\n   */\n  syncEngine!: RemoteSyncer;\n\n  /**\n   * Starts up the remote store, creating streams, restoring state from\n   * LocalStore, etc.\n   */\n  start(): Promise<void> {\n    return this.enableNetwork();\n  }\n\n  /** Re-enables the network. Idempotent. */\n  enableNetwork(): Promise<void> {\n    this.offlineCauses.delete(OfflineCause.UserDisabled);\n    return this.enableNetworkInternal();\n  }\n\n  private async enableNetworkInternal(): Promise<void> {\n    if (this.canUseNetwork()) {\n      if (this.shouldStartWatchStream()) {\n        this.startWatchStream();\n      } else {\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n\n      // This will start the write stream if necessary.\n      await this.fillWritePipeline();\n    }\n  }\n\n  /**\n   * Temporarily disables the network. The network can be re-enabled using\n   * enableNetwork().\n   */\n  async disableNetwork(): Promise<void> {\n    this.offlineCauses.add(OfflineCause.UserDisabled);\n    await this.disableNetworkInternal();\n\n    // Set the OnlineState to Offline so get()s return from cache, etc.\n    this.onlineStateTracker.set(OnlineState.Offline);\n  }\n\n  private async disableNetworkInternal(): Promise<void> {\n    await this.writeStream.stop();\n    await this.watchStream.stop();\n\n    if (this.writePipeline.length > 0) {\n      logDebug(\n        LOG_TAG,\n        `Stopping write stream with ${this.writePipeline.length} pending writes`\n      );\n      this.writePipeline = [];\n    }\n\n    this.cleanUpWatchStreamState();\n  }\n\n  async shutdown(): Promise<void> {\n    logDebug(LOG_TAG, 'RemoteStore shutting down.');\n    this.offlineCauses.add(OfflineCause.Shutdown);\n    await this.disableNetworkInternal();\n    this.connectivityMonitor.shutdown();\n\n    // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n    // triggering spurious listener events with cached data, etc.\n    this.onlineStateTracker.set(OnlineState.Unknown);\n  }\n\n  /**\n   * Starts new listen for the given target. Uses resume token if provided. It\n   * is a no-op if the target of given `TargetData` is already being listened to.\n   */\n  listen(targetData: TargetData): void {\n    if (this.listenTargets.has(targetData.targetId)) {\n      return;\n    }\n\n    // Mark this as something the client is currently listening for.\n    this.listenTargets.set(targetData.targetId, targetData);\n\n    if (this.shouldStartWatchStream()) {\n      // The listen will be sent in onWatchStreamOpen\n      this.startWatchStream();\n    } else if (this.watchStream.isOpen()) {\n      this.sendWatchRequest(targetData);\n    }\n  }\n\n  /**\n   * Removes the listen from server. It is a no-op if the given target id is\n   * not being listened to.\n   */\n  unlisten(targetId: TargetId): void {\n    debugAssert(\n      this.listenTargets.has(targetId),\n      `unlisten called on target no currently watched: ${targetId}`\n    );\n\n    this.listenTargets.delete(targetId);\n    if (this.watchStream.isOpen()) {\n      this.sendUnwatchRequest(targetId);\n    }\n\n    if (this.listenTargets.size === 0) {\n      if (this.watchStream.isOpen()) {\n        this.watchStream.markIdle();\n      } else if (this.canUseNetwork()) {\n        // Revert to OnlineState.Unknown if the watch stream is not open and we\n        // have no listeners, since without any listens to send we cannot\n        // confirm if the stream is healthy and upgrade to OnlineState.Online.\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n    }\n  }\n\n  /** {@link TargetMetadataProvider.getTargetDataForTarget} */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null {\n    return this.listenTargets.get(targetId) || null;\n  }\n\n  /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    return this.syncEngine.getRemoteKeysForTarget(targetId);\n  }\n\n  /**\n   * We need to increment the the expected number of pending responses we're due\n   * from watch so we wait for the ack to process any messages from this target.\n   */\n  private sendWatchRequest(targetData: TargetData): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetData.targetId);\n    this.watchStream.watch(targetData);\n  }\n\n  /**\n   * We need to increment the expected number of pending responses we're due\n   * from watch so we wait for the removal on the server before we process any\n   * messages from this target.\n   */\n  private sendUnwatchRequest(targetId: TargetId): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetId);\n    this.watchStream.unwatch(targetId);\n  }\n\n  private startWatchStream(): void {\n    debugAssert(\n      this.shouldStartWatchStream(),\n      'startWatchStream() called when shouldStartWatchStream() is false.'\n    );\n\n    this.watchChangeAggregator = new WatchChangeAggregator(this);\n    this.watchStream.start();\n    this.onlineStateTracker.handleWatchStreamStart();\n  }\n\n  /**\n   * Returns whether the watch stream should be started because it's necessary\n   * and has not yet been started.\n   */\n  private shouldStartWatchStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.watchStream.isStarted() &&\n      this.listenTargets.size > 0\n    );\n  }\n\n  canUseNetwork(): boolean {\n    return this.offlineCauses.size === 0;\n  }\n\n  private cleanUpWatchStreamState(): void {\n    this.watchChangeAggregator = null;\n  }\n\n  private async onWatchStreamOpen(): Promise<void> {\n    this.listenTargets.forEach((targetData, targetId) => {\n      this.sendWatchRequest(targetData);\n    });\n  }\n\n  private async onWatchStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWatchStream(),\n        'Watch stream was stopped gracefully while still needed.'\n      );\n    }\n\n    this.cleanUpWatchStreamState();\n\n    // If we still need the watch stream, retry the connection.\n    if (this.shouldStartWatchStream()) {\n      this.onlineStateTracker.handleWatchStreamFailure(error!);\n\n      this.startWatchStream();\n    } else {\n      // No need to restart watch stream because there are no active targets.\n      // The online state is set to unknown because there is no active attempt\n      // at establishing a connection\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n\n  private async onWatchStreamChange(\n    watchChange: WatchChange,\n    snapshotVersion: SnapshotVersion\n  ): Promise<void> {\n    // Mark the client as online since we got a message from the server\n    this.onlineStateTracker.set(OnlineState.Online);\n\n    if (\n      watchChange instanceof WatchTargetChange &&\n      watchChange.state === WatchTargetChangeState.Removed &&\n      watchChange.cause\n    ) {\n      // There was an error on a target, don't wait for a consistent snapshot\n      // to raise events\n      try {\n        await this.handleTargetError(watchChange);\n      } catch (e) {\n        logDebug(\n          LOG_TAG,\n          'Failed to remove targets %s: %s ',\n          watchChange.targetIds.join(','),\n          e\n        );\n        await this.disableNetworkUntilRecovery(e);\n      }\n      return;\n    }\n\n    if (watchChange instanceof DocumentWatchChange) {\n      this.watchChangeAggregator!.handleDocumentChange(watchChange);\n    } else if (watchChange instanceof ExistenceFilterChange) {\n      this.watchChangeAggregator!.handleExistenceFilter(watchChange);\n    } else {\n      debugAssert(\n        watchChange instanceof WatchTargetChange,\n        'Expected watchChange to be an instance of WatchTargetChange'\n      );\n      this.watchChangeAggregator!.handleTargetChange(watchChange);\n    }\n\n    if (!snapshotVersion.isEqual(SnapshotVersion.min())) {\n      try {\n        const lastRemoteSnapshotVersion = await this.localStore.getLastRemoteSnapshotVersion();\n        if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\n          // We have received a target change with a global snapshot if the snapshot\n          // version is not equal to SnapshotVersion.min().\n          await this.raiseWatchSnapshot(snapshotVersion);\n        }\n      } catch (e) {\n        logDebug(LOG_TAG, 'Failed to raise snapshot:', e);\n        await this.disableNetworkUntilRecovery(e);\n      }\n    }\n  }\n\n  /**\n   * Recovery logic for IndexedDB errors that takes the network offline until\n   * `op` succeeds. Retries are scheduled with backoff using\n   * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\n   * validated via a generic operation.\n   *\n   * The returned Promise is resolved once the network is disabled and before\n   * any retry attempt.\n   */\n  private async disableNetworkUntilRecovery(\n    e: FirestoreError,\n    op?: () => Promise<unknown>\n  ): Promise<void> {\n    if (isIndexedDbTransactionError(e)) {\n      debugAssert(\n        !this.offlineCauses.has(OfflineCause.IndexedDbFailed),\n        'Unexpected network event when IndexedDB was marked failed.'\n      );\n      this.offlineCauses.add(OfflineCause.IndexedDbFailed);\n\n      // Disable network and raise offline snapshots\n      await this.disableNetworkInternal();\n      this.onlineStateTracker.set(OnlineState.Offline);\n\n      if (!op) {\n        // Use a simple read operation to determine if IndexedDB recovered.\n        // Ideally, we would expose a health check directly on SimpleDb, but\n        // RemoteStore only has access to persistence through LocalStore.\n        op = () => this.localStore.getLastRemoteSnapshotVersion();\n      }\n\n      // Probe IndexedDB periodically and re-enable network\n      this.asyncQueue.enqueueRetryable(async () => {\n        logDebug(LOG_TAG, 'Retrying IndexedDB access');\n        await op!();\n        this.offlineCauses.delete(OfflineCause.IndexedDbFailed);\n        await this.enableNetworkInternal();\n      });\n    } else {\n      throw e;\n    }\n  }\n\n  /**\n   * Executes `op`. If `op` fails, takes the network offline until `op`\n   * succeeds. Returns after the first attempt.\n   */\n  private executeWithRecovery(op: () => Promise<void>): Promise<void> {\n    return op().catch(e => this.disableNetworkUntilRecovery(e, op));\n  }\n\n  /**\n   * Takes a batch of changes from the Datastore, repackages them as a\n   * RemoteEvent, and passes that on to the listener, which is typically the\n   * SyncEngine.\n   */\n  private raiseWatchSnapshot(snapshotVersion: SnapshotVersion): Promise<void> {\n    debugAssert(\n      !snapshotVersion.isEqual(SnapshotVersion.min()),\n      \"Can't raise event for unknown SnapshotVersion\"\n    );\n    const remoteEvent = this.watchChangeAggregator!.createRemoteEvent(\n      snapshotVersion\n    );\n\n    // Update in-memory resume tokens. LocalStore will update the\n    // persistent view of these when applying the completed RemoteEvent.\n    remoteEvent.targetChanges.forEach((change, targetId) => {\n      if (change.resumeToken.approximateByteSize() > 0) {\n        const targetData = this.listenTargets.get(targetId);\n        // A watched target might have been removed already.\n        if (targetData) {\n          this.listenTargets.set(\n            targetId,\n            targetData.withResumeToken(change.resumeToken, snapshotVersion)\n          );\n        }\n      }\n    });\n\n    // Re-establish listens for the targets that have been invalidated by\n    // existence filter mismatches.\n    remoteEvent.targetMismatches.forEach(targetId => {\n      const targetData = this.listenTargets.get(targetId);\n      if (!targetData) {\n        // A watched target might have been removed already.\n        return;\n      }\n\n      // Clear the resume token for the target, since we're in a known mismatch\n      // state.\n      this.listenTargets.set(\n        targetId,\n        targetData.withResumeToken(\n          ByteString.EMPTY_BYTE_STRING,\n          targetData.snapshotVersion\n        )\n      );\n\n      // Cause a hard reset by unwatching and rewatching immediately, but\n      // deliberately don't send a resume token so that we get a full update.\n      this.sendUnwatchRequest(targetId);\n\n      // Mark the target we send as being on behalf of an existence filter\n      // mismatch, but don't actually retain that in listenTargets. This ensures\n      // that we flag the first re-listen this way without impacting future\n      // listens of this target (that might happen e.g. on reconnect).\n      const requestTargetData = new TargetData(\n        targetData.target,\n        targetId,\n        TargetPurpose.ExistenceFilterMismatch,\n        targetData.sequenceNumber\n      );\n      this.sendWatchRequest(requestTargetData);\n    });\n\n    // Finally raise remote event\n    return this.syncEngine.applyRemoteEvent(remoteEvent);\n  }\n\n  /** Handles an error on a target */\n  private async handleTargetError(\n    watchChange: WatchTargetChange\n  ): Promise<void> {\n    debugAssert(!!watchChange.cause, 'Handling target error without a cause');\n    const error = watchChange.cause!;\n    for (const targetId of watchChange.targetIds) {\n      // A watched target might have been removed already.\n      if (this.listenTargets.has(targetId)) {\n        await this.syncEngine.rejectListen(targetId, error);\n        this.listenTargets.delete(targetId);\n        this.watchChangeAggregator!.removeTarget(targetId);\n      }\n    }\n  }\n\n  /**\n   * Attempts to fill our write pipeline with writes from the LocalStore.\n   *\n   * Called internally to bootstrap or refill the write pipeline and by\n   * SyncEngine whenever there are new mutations to process.\n   *\n   * Starts the write stream if necessary.\n   */\n  async fillWritePipeline(): Promise<void> {\n    let lastBatchIdRetrieved =\n      this.writePipeline.length > 0\n        ? this.writePipeline[this.writePipeline.length - 1].batchId\n        : BATCHID_UNKNOWN;\n\n    while (this.canAddToWritePipeline()) {\n      try {\n        const batch = await this.localStore.nextMutationBatch(\n          lastBatchIdRetrieved\n        );\n\n        if (batch === null) {\n          if (this.writePipeline.length === 0) {\n            this.writeStream.markIdle();\n          }\n          break;\n        } else {\n          lastBatchIdRetrieved = batch.batchId;\n          this.addToWritePipeline(batch);\n        }\n      } catch (e) {\n        await this.disableNetworkUntilRecovery(e);\n      }\n    }\n\n    if (this.shouldStartWriteStream()) {\n      this.startWriteStream();\n    }\n  }\n\n  /**\n   * Returns true if we can add to the write pipeline (i.e. the network is\n   * enabled and the write pipeline is not full).\n   */\n  private canAddToWritePipeline(): boolean {\n    return (\n      this.canUseNetwork() && this.writePipeline.length < MAX_PENDING_WRITES\n    );\n  }\n\n  // For testing\n  outstandingWrites(): number {\n    return this.writePipeline.length;\n  }\n\n  /**\n   * Queues additional writes to be sent to the write stream, sending them\n   * immediately if the write stream is established.\n   */\n  private addToWritePipeline(batch: MutationBatch): void {\n    debugAssert(\n      this.canAddToWritePipeline(),\n      'addToWritePipeline called when pipeline is full'\n    );\n    this.writePipeline.push(batch);\n\n    if (this.writeStream.isOpen() && this.writeStream.handshakeComplete) {\n      this.writeStream.writeMutations(batch.mutations);\n    }\n  }\n\n  private shouldStartWriteStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.writeStream.isStarted() &&\n      this.writePipeline.length > 0\n    );\n  }\n\n  private startWriteStream(): void {\n    debugAssert(\n      this.shouldStartWriteStream(),\n      'startWriteStream() called when shouldStartWriteStream() is false.'\n    );\n    this.writeStream.start();\n  }\n\n  private async onWriteStreamOpen(): Promise<void> {\n    this.writeStream.writeHandshake();\n  }\n\n  private async onWriteHandshakeComplete(): Promise<void> {\n    // Send the write pipeline now that the stream is established.\n    for (const batch of this.writePipeline) {\n      this.writeStream.writeMutations(batch.mutations);\n    }\n  }\n\n  private async onMutationResult(\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): Promise<void> {\n    // This is a response to a write containing mutations and should be\n    // correlated to the first write in our write pipeline.\n    debugAssert(\n      this.writePipeline.length > 0,\n      'Got result for empty write pipeline'\n    );\n    const batch = this.writePipeline.shift()!;\n    const success = MutationBatchResult.from(batch, commitVersion, results);\n\n    await this.executeWithRecovery(() =>\n      this.syncEngine.applySuccessfulWrite(success)\n    );\n\n    // It's possible that with the completion of this mutation another\n    // slot has freed up.\n    await this.fillWritePipeline();\n  }\n\n  private async onWriteStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWriteStream(),\n        'Write stream was stopped gracefully while still needed.'\n      );\n    }\n\n    // If the write stream closed after the write handshake completes, a write\n    // operation failed and we fail the pending operation.\n    if (error && this.writeStream.handshakeComplete) {\n      // This error affects the actual write.\n      await this.handleWriteError(error!);\n    }\n\n    // The write stream might have been started by refilling the write\n    // pipeline for failed writes\n    if (this.shouldStartWriteStream()) {\n      this.startWriteStream();\n    }\n  }\n\n  private async handleWriteError(error: FirestoreError): Promise<void> {\n    // Only handle permanent errors here. If it's transient, just let the retry\n    // logic kick in.\n    if (isPermanentWriteError(error.code)) {\n      // This was a permanent error, the request itself was the problem\n      // so it's not going to succeed if we resend it.\n      const batch = this.writePipeline.shift()!;\n\n      // In this case it's also unlikely that the server itself is melting\n      // down -- this was just a bad request so inhibit backoff on the next\n      // restart.\n      this.writeStream.inhibitBackoff();\n\n      await this.executeWithRecovery(() =>\n        this.syncEngine.rejectFailedWrite(batch.batchId, error)\n      );\n\n      // It's possible that with the completion of this mutation\n      // another slot has freed up.\n      await this.fillWritePipeline();\n    } else {\n      // Transient error, just let the retry logic kick in.\n    }\n  }\n\n  createTransaction(): Transaction {\n    return new Transaction(this.datastore);\n  }\n\n  private async restartNetwork(): Promise<void> {\n    this.offlineCauses.add(OfflineCause.ConnectivityChange);\n    await this.disableNetworkInternal();\n    this.onlineStateTracker.set(OnlineState.Unknown);\n    this.writeStream.inhibitBackoff();\n    this.watchStream.inhibitBackoff();\n    this.offlineCauses.delete(OfflineCause.ConnectivityChange);\n    await this.enableNetworkInternal();\n  }\n\n  async handleCredentialChange(user: User): Promise<void> {\n    this.asyncQueue.verifyOperationInProgress();\n\n    // Tear down and re-create our network streams. This will ensure we get a\n    // fresh auth token for the new user and re-fill the write pipeline with\n    // new mutations from the LocalStore (since mutations are per-user).\n    logDebug(LOG_TAG, 'RemoteStore received new credentials');\n    this.offlineCauses.add(OfflineCause.CredentialChange);\n\n    await this.disableNetworkInternal();\n    this.onlineStateTracker.set(OnlineState.Unknown);\n    await this.syncEngine.handleCredentialChange(user);\n\n    this.offlineCauses.delete(OfflineCause.CredentialChange);\n    await this.enableNetworkInternal();\n  }\n\n  /**\n   * Toggles the network state when the client gains or loses its primary lease.\n   */\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    if (isPrimary) {\n      this.offlineCauses.delete(OfflineCause.IsSecondary);\n      await this.enableNetworkInternal();\n    } else if (!isPrimary) {\n      this.offlineCauses.add(OfflineCause.IsSecondary);\n      await this.disableNetworkInternal();\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequence } from '../core/listen_sequence';\nimport {\n  BatchId,\n  ListenSequenceNumber,\n  MutationBatchState,\n  OnlineState,\n  TargetId\n} from '../core/types';\nimport { TargetIdSet, targetIdSet } from '../model/collections';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\nimport { SortedMap } from '../util/sorted_map';\nimport { primitiveComparator } from '../util/misc';\nimport { isSafeInteger, WindowLike } from '../util/types';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from './shared_client_state_syncer';\nimport {\n  CLIENT_STATE_KEY_PREFIX,\n  ClientStateSchema,\n  createWebStorageClientStateKey,\n  createWebStorageMutationBatchKey,\n  createWebStorageOnlineStateKey,\n  createWebStorageQueryTargetMetadataKey,\n  createWebStorageSequenceNumberKey,\n  MUTATION_BATCH_KEY_PREFIX,\n  MutationMetadataSchema,\n  QUERY_TARGET_KEY_PREFIX,\n  QueryTargetStateSchema,\n  SharedOnlineStateSchema\n} from './shared_client_state_schema';\n\nconst LOG_TAG = 'SharedClientState';\n\n/**\n * A randomly-generated key assigned to each Firestore instance at startup.\n */\nexport type ClientId = string;\n\n/**\n * A `SharedClientState` keeps track of the global state of the mutations\n * and query targets for all active clients with the same persistence key (i.e.\n * project ID and FirebaseApp name). It relays local changes to other clients\n * and updates its local state as new state is observed.\n *\n * `SharedClientState` is primarily used for synchronization in Multi-Tab\n * environments. Each tab is responsible for registering its active query\n * targets and mutations. `SharedClientState` will then notify the listener\n * assigned to `.syncEngine` for updates to mutations and queries that\n * originated in other clients.\n *\n * To receive notifications, `.syncEngine` and `.onlineStateHandler` has to be\n * assigned before calling `start()`.\n */\nexport interface SharedClientState {\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n\n  /** Registers the Mutation Batch ID of a newly pending mutation. */\n  addPendingMutation(batchId: BatchId): void;\n\n  /**\n   * Records that a pending mutation has been acknowledged or rejected.\n   * Called by the primary client to notify secondary clients of mutation\n   * results as they come back from the backend.\n   */\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Associates a new Query Target ID with the local Firestore client. Returns\n   * the new query state for the query (which can be 'current' if the query is\n   * already associated with another tab).\n   *\n   * If the target id is already associated with local client, the method simply\n   * returns its `QueryTargetState`.\n   */\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState;\n\n  /** Removes the Query Target ID association from the local client. */\n  removeLocalQueryTarget(targetId: TargetId): void;\n\n  /** Checks whether the target is associated with the local client. */\n  isLocalQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Processes an update to a query target.\n   *\n   * Called by the primary client to notify secondary clients of document\n   * changes or state transitions that affect the provided query target.\n   */\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Removes the target's metadata entry.\n   *\n   * Called by the primary client when all clients stopped listening to a query\n   * target.\n   */\n  clearQueryState(targetId: TargetId): void;\n\n  /**\n   * Gets the active Query Targets IDs for all active clients.\n   *\n   * The implementation for this may require O(n) runtime, where 'n' is the size\n   * of the result set.\n   */\n  // Visible for testing\n  getAllActiveQueryTargets(): SortedSet<TargetId>;\n\n  /**\n   * Checks whether the provided target ID is currently being listened to by\n   * any of the active clients.\n   *\n   * The implementation may require O(n*log m) runtime, where 'n' is the number\n   * of clients and 'm' the number of targets.\n   */\n  isActiveQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Starts the SharedClientState, reads existing client data and registers\n   * listeners for updates to new and existing clients.\n   */\n  start(): Promise<void>;\n\n  /** Shuts down the `SharedClientState` and its listeners. */\n  shutdown(): void;\n\n  /**\n   * Changes the active user and removes all existing user-specific data. The\n   * user change does not call back into SyncEngine (for example, no mutations\n   * will be marked as removed).\n   */\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void;\n\n  /** Changes the shared online state of all clients. */\n  setOnlineState(onlineState: OnlineState): void;\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n}\n\n/**\n * Holds the state of a mutation batch, including its user ID, batch ID and\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\n */\n// Visible for testing\nexport class MutationMetadata {\n  constructor(\n    readonly user: User,\n    readonly batchId: BatchId,\n    readonly state: MutationBatchState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `MutationMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    user: User,\n    batchId: BatchId,\n    value: string\n  ): MutationMetadata | null {\n    const mutationBatch = JSON.parse(value) as MutationMetadataSchema;\n\n    let validData =\n      typeof mutationBatch === 'object' &&\n      ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==\n        -1 &&\n      (mutationBatch.error === undefined ||\n        typeof mutationBatch.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && mutationBatch.error) {\n      validData =\n        typeof mutationBatch.error.message === 'string' &&\n        typeof mutationBatch.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          mutationBatch.error.code as Code,\n          mutationBatch.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new MutationMetadata(\n        user,\n        batchId,\n        mutationBatch.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse mutation state for ID '${batchId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const batchMetadata: MutationMetadataSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(batchMetadata);\n  }\n}\n\n/**\n * Holds the state of a query target, including its target ID and whether the\n * target is 'not-current', 'current' or 'rejected'.\n */\n// Visible for testing\nexport class QueryTargetMetadata {\n  constructor(\n    readonly targetId: TargetId,\n    readonly state: QueryTargetState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `QueryTargetMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    targetId: TargetId,\n    value: string\n  ): QueryTargetMetadata | null {\n    const targetState = JSON.parse(value) as QueryTargetStateSchema;\n\n    let validData =\n      typeof targetState === 'object' &&\n      ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==\n        -1 &&\n      (targetState.error === undefined ||\n        typeof targetState.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && targetState.error) {\n      validData =\n        typeof targetState.error.message === 'string' &&\n        typeof targetState.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          targetState.error.code as Code,\n          targetState.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new QueryTargetMetadata(\n        targetId,\n        targetState.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse target state for ID '${targetId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const targetState: QueryTargetStateSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(targetState);\n  }\n}\n\n/**\n * Metadata state of a single client denoting the query targets it is actively\n * listening to.\n */\n// Visible for testing.\nexport interface ClientState {\n  readonly activeTargetIds: TargetIdSet;\n}\n\n/**\n * This class represents the immutable ClientState for a client read from\n * WebStorage, containing the list of active query targets.\n */\nclass RemoteClientState implements ClientState {\n  private constructor(\n    readonly clientId: ClientId,\n    readonly activeTargetIds: TargetIdSet\n  ) {}\n\n  /**\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    clientId: ClientId,\n    value: string\n  ): RemoteClientState | null {\n    const clientState = JSON.parse(value) as ClientStateSchema;\n\n    let validData =\n      typeof clientState === 'object' &&\n      clientState.activeTargetIds instanceof Array;\n\n    let activeTargetIdsSet = targetIdSet();\n\n    for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(\n        clientState.activeTargetIds[i]\n      );\n    }\n\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse client data for instance '${clientId}': ${value}`\n      );\n      return null;\n    }\n  }\n}\n\n/**\n * This class represents the online state for all clients participating in\n * multi-tab. The online state is only written to by the primary client, and\n * used in secondary clients to update their query views.\n */\nexport class SharedOnlineState {\n  constructor(readonly clientId: string, readonly onlineState: OnlineState) {}\n\n  /**\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(value: string): SharedOnlineState | null {\n    const onlineState = JSON.parse(value) as SharedOnlineStateSchema;\n\n    const validData =\n      typeof onlineState === 'object' &&\n      ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !==\n        -1 &&\n      typeof onlineState.clientId === 'string';\n\n    if (validData) {\n      return new SharedOnlineState(\n        onlineState.clientId,\n        onlineState.onlineState as OnlineState\n      );\n    } else {\n      logError(LOG_TAG, `Failed to parse online state: ${value}`);\n      return null;\n    }\n  }\n}\n\n/**\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\n * mutable and keeps track of all pending mutations, which allows us to\n * update the range of pending mutation batch IDs as new mutations are added or\n * removed.\n *\n * The data in `LocalClientState` is not read from WebStorage and instead\n * updated via its instance methods. The updated state can be serialized via\n * `toWebStorageJSON()`.\n */\n// Visible for testing.\nexport class LocalClientState implements ClientState {\n  activeTargetIds = targetIdSet();\n\n  addQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  }\n\n  removeQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  }\n\n  /**\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\n   * Does not encode `clientId` as it is part of the key in WebStorage.\n   */\n  toWebStorageJSON(): string {\n    const data: ClientStateSchema = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    return JSON.stringify(data);\n  }\n}\n\n/**\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\n * backing store for the SharedClientState. It keeps track of all active\n * clients and supports modifications of the local client's data.\n */\nexport class WebStorageSharedClientState implements SharedClientState {\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  private readonly storage: Storage;\n  private readonly localClientStorageKey: string;\n  private readonly sequenceNumberKey: string;\n  private readonly storageListener = this.handleWebStorageEvent.bind(this);\n  private readonly onlineStateKey: string;\n  private readonly clientStateKeyRe: RegExp;\n  private readonly mutationBatchKeyRe: RegExp;\n  private readonly queryTargetKeyRe: RegExp;\n  private activeClients = new SortedMap<string, ClientState>(\n    primitiveComparator\n  );\n  private started = false;\n  private currentUser: User;\n\n  /**\n   * Captures WebStorage events that occur before `start()` is called. These\n   * events are replayed once `WebStorageSharedClientState` is started.\n   */\n  private earlyEvents: StorageEvent[] = [];\n\n  constructor(\n    private readonly window: WindowLike,\n    private readonly queue: AsyncQueue,\n    private readonly persistenceKey: string,\n    private readonly localClientId: ClientId,\n    initialUser: User\n  ) {\n    // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    const escapedPersistenceKey = persistenceKey.replace(\n      /[.*+?^${}()|[\\]\\\\]/g,\n      '\\\\$&'\n    );\n\n    this.storage = this.window.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(\n      this.persistenceKey,\n      this.localClientId\n    );\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(\n      this.persistenceKey\n    );\n    this.activeClients = this.activeClients.insert(\n      this.localClientId,\n      new LocalClientState()\n    );\n\n    this.clientStateKeyRe = new RegExp(\n      `^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`\n    );\n    this.mutationBatchKeyRe = new RegExp(\n      `^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`\n    );\n    this.queryTargetKeyRe = new RegExp(\n      `^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`\n    );\n\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n\n    // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n    this.window.addEventListener('storage', this.storageListener);\n  }\n\n  /** Returns 'true' if WebStorage is available in the current environment. */\n  static isAvailable(window: WindowLike | null): window is WindowLike {\n    return !!(window && window.localStorage);\n  }\n\n  async start(): Promise<void> {\n    debugAssert(!this.started, 'WebStorageSharedClientState already started');\n    debugAssert(\n      this.syncEngine !== null,\n      'syncEngine property must be set before calling start()'\n    );\n    debugAssert(\n      this.onlineStateHandler !== null,\n      'onlineStateHandler property must be set before calling start()'\n    );\n\n    // Retrieve the list of existing clients to backfill the data in\n    // SharedClientState.\n    const existingClients = await this.syncEngine!.getActiveClients();\n\n    for (const clientId of existingClients) {\n      if (clientId === this.localClientId) {\n        continue;\n      }\n\n      const storageItem = this.getItem(\n        createWebStorageClientStateKey(this.persistenceKey, clientId)\n      );\n      if (storageItem) {\n        const clientState = RemoteClientState.fromWebStorageEntry(\n          clientId,\n          storageItem\n        );\n        if (clientState) {\n          this.activeClients = this.activeClients.insert(\n            clientState.clientId,\n            clientState\n          );\n        }\n      }\n    }\n\n    this.persistClientState();\n\n    // Check if there is an existing online state and call the callback handler\n    // if applicable.\n    const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n    if (onlineStateJSON) {\n      const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n      if (onlineState) {\n        this.handleOnlineStateEvent(onlineState);\n      }\n    }\n\n    for (const event of this.earlyEvents) {\n      this.handleWebStorageEvent(event);\n    }\n\n    this.earlyEvents = [];\n\n    // Register a window unload hook to remove the client metadata entry from\n    // WebStorage even if `shutdown()` was not called.\n    this.window.addEventListener('unload', () => this.shutdown());\n\n    this.started = true;\n  }\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.extractActiveQueryTargets(this.activeClients);\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    let found = false;\n    this.activeClients.forEach((key, value) => {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  addPendingMutation(batchId: BatchId): void {\n    this.persistMutationState(batchId, 'pending');\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    this.persistMutationState(batchId, state, error);\n\n    // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n    this.removeMutationState(batchId);\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    let queryState: QueryTargetState = 'not-current';\n\n    // Lookup an existing query state if the target ID was already registered\n    // by another tab\n    if (this.isActiveQueryTarget(targetId)) {\n      const storageItem = this.storage.getItem(\n        createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n      );\n\n      if (storageItem) {\n        const metadata = QueryTargetMetadata.fromWebStorageEntry(\n          targetId,\n          storageItem\n        );\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n\n    this.localClientState.addQueryTarget(targetId);\n    this.persistClientState();\n\n    return queryState;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localClientState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    this.removeItem(\n      createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n    );\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.persistQueryTargetState(targetId, state, error);\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    removedBatchIds.forEach(batchId => {\n      this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(batchId => {\n      this.addPendingMutation(batchId);\n    });\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    this.persistOnlineState(onlineState);\n  }\n\n  shutdown(): void {\n    if (this.started) {\n      this.window.removeEventListener('storage', this.storageListener);\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  }\n\n  private getItem(key: string): string | null {\n    const value = this.storage.getItem(key);\n    logDebug(LOG_TAG, 'READ', key, value);\n    return value;\n  }\n\n  private setItem(key: string, value: string): void {\n    logDebug(LOG_TAG, 'SET', key, value);\n    this.storage.setItem(key, value);\n  }\n\n  private removeItem(key: string): void {\n    logDebug(LOG_TAG, 'REMOVE', key);\n    this.storage.removeItem(key);\n  }\n\n  private handleWebStorageEvent(event: Event): void {\n    // Note: The function is typed to take Event to be interface-compatible with\n    // `Window.addEventListener`.\n    const storageEvent = event as StorageEvent;\n    if (storageEvent.storageArea === this.storage) {\n      logDebug(LOG_TAG, 'EVENT', storageEvent.key, storageEvent.newValue);\n\n      if (storageEvent.key === this.localClientStorageKey) {\n        logError(\n          'Received WebStorage notification for local change. Another client might have ' +\n            'garbage-collected our state'\n        );\n        return;\n      }\n\n      this.queue.enqueueRetryable(async () => {\n        if (!this.started) {\n          this.earlyEvents.push(storageEvent);\n          return;\n        }\n\n        if (storageEvent.key === null) {\n          return;\n        }\n\n        if (this.clientStateKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue != null) {\n            const clientState = this.fromWebStorageClientState(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (clientState) {\n              return this.handleClientStateEvent(\n                clientState.clientId,\n                clientState\n              );\n            }\n          } else {\n            const clientId = this.fromWebStorageClientStateKey(\n              storageEvent.key\n            )!;\n            return this.handleClientStateEvent(clientId, null);\n          }\n        } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const mutationMetadata = this.fromWebStorageMutationMetadata(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (mutationMetadata) {\n              return this.handleMutationBatchEvent(mutationMetadata);\n            }\n          }\n        } else if (this.queryTargetKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (queryTargetMetadata) {\n              return this.handleQueryTargetEvent(queryTargetMetadata);\n            }\n          }\n        } else if (storageEvent.key === this.onlineStateKey) {\n          if (storageEvent.newValue !== null) {\n            const onlineState = this.fromWebStorageOnlineState(\n              storageEvent.newValue\n            );\n            if (onlineState) {\n              return this.handleOnlineStateEvent(onlineState);\n            }\n          }\n        } else if (storageEvent.key === this.sequenceNumberKey) {\n          debugAssert(\n            !!this.sequenceNumberHandler,\n            'Missing sequenceNumberHandler'\n          );\n          const sequenceNumber = fromWebStorageSequenceNumber(\n            storageEvent.newValue\n          );\n          if (sequenceNumber !== ListenSequence.INVALID) {\n            this.sequenceNumberHandler!(sequenceNumber);\n          }\n        }\n      });\n    }\n  }\n\n  private get localClientState(): LocalClientState {\n    return this.activeClients.get(this.localClientId) as LocalClientState;\n  }\n\n  private persistClientState(): void {\n    this.setItem(\n      this.localClientStorageKey,\n      this.localClientState.toWebStorageJSON()\n    );\n  }\n\n  private persistMutationState(\n    batchId: BatchId,\n    state: MutationBatchState,\n    error?: FirestoreError\n  ): void {\n    const mutationState = new MutationMetadata(\n      this.currentUser,\n      batchId,\n      state,\n      error\n    );\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  }\n\n  private removeMutationState(batchId: BatchId): void {\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.removeItem(mutationKey);\n  }\n\n  private persistOnlineState(onlineState: OnlineState): void {\n    const entry: SharedOnlineStateSchema = {\n      clientId: this.localClientId,\n      onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  }\n\n  private persistQueryTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    const targetKey = createWebStorageQueryTargetMetadataKey(\n      this.persistenceKey,\n      targetId\n    );\n    const targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  }\n\n  /**\n   * Parses a client state key in WebStorage. Returns null if the key does not\n   * match the expected key format.\n   */\n  private fromWebStorageClientStateKey(key: string): ClientId | null {\n    const match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\n   * be parsed.\n   */\n  private fromWebStorageClientState(\n    key: string,\n    value: string\n  ): RemoteClientState | null {\n    const clientId = this.fromWebStorageClientStateKey(key);\n    debugAssert(clientId !== null, `Cannot parse client state key '${key}'`);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  }\n\n  /**\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageMutationMetadata(\n    key: string,\n    value: string\n  ): MutationMetadata | null {\n    const match = this.mutationBatchKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse mutation batch key '${key}'`);\n\n    const batchId = Number(match[1]);\n    const userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(\n      new User(userId),\n      batchId,\n      value\n    );\n  }\n\n  /**\n   * Parses a query target state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageQueryTargetMetadata(\n    key: string,\n    value: string\n  ): QueryTargetMetadata | null {\n    const match = this.queryTargetKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse query target key '${key}'`);\n\n    const targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  }\n\n  /**\n   * Parses an online state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageOnlineState(value: string): SharedOnlineState | null {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  }\n\n  private async handleMutationBatchEvent(\n    mutationBatch: MutationMetadata\n  ): Promise<void> {\n    if (mutationBatch.user.uid !== this.currentUser.uid) {\n      logDebug(\n        LOG_TAG,\n        `Ignoring mutation for non-active user ${mutationBatch.user.uid}`\n      );\n      return;\n    }\n\n    return this.syncEngine!.applyBatchState(\n      mutationBatch.batchId,\n      mutationBatch.state,\n      mutationBatch.error\n    );\n  }\n\n  private handleQueryTargetEvent(\n    targetMetadata: QueryTargetMetadata\n  ): Promise<void> {\n    return this.syncEngine!.applyTargetState(\n      targetMetadata.targetId,\n      targetMetadata.state,\n      targetMetadata.error\n    );\n  }\n\n  private handleClientStateEvent(\n    clientId: ClientId,\n    clientState: RemoteClientState | null\n  ): Promise<void> {\n    const updatedClients = clientState\n      ? this.activeClients.insert(clientId, clientState)\n      : this.activeClients.remove(clientId);\n\n    const existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    const newTargets = this.extractActiveQueryTargets(updatedClients);\n\n    const addedTargets: TargetId[] = [];\n    const removedTargets: TargetId[] = [];\n\n    newTargets.forEach(targetId => {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n\n    existingTargets.forEach(targetId => {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n\n    return this.syncEngine!.applyActiveTargetsChange(\n      addedTargets,\n      removedTargets\n    ).then(() => {\n      this.activeClients = updatedClients;\n    });\n  }\n\n  private handleOnlineStateEvent(onlineState: SharedOnlineState): void {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler!(onlineState.onlineState);\n    }\n  }\n\n  private extractActiveQueryTargets(\n    clients: SortedMap<string, ClientState>\n  ): SortedSet<TargetId> {\n    let activeTargets = targetIdSet();\n    clients.forEach((kev, value) => {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  }\n}\n\nfunction fromWebStorageSequenceNumber(\n  seqString: string | null\n): ListenSequenceNumber {\n  let sequenceNumber = ListenSequence.INVALID;\n  if (seqString != null) {\n    try {\n      const parsed = JSON.parse(seqString);\n      hardAssert(\n        typeof parsed === 'number',\n        'Found non-numeric sequence number'\n      );\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n  return sequenceNumber;\n}\n\n/**\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\n * clients using memory persistence. The state in this class remains fully\n * isolated and no synchronization is performed.\n */\nexport class MemorySharedClientState implements SharedClientState {\n  private localState = new LocalClientState();\n  private queryState: { [targetId: number]: QueryTargetState } = {};\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  addPendingMutation(batchId: BatchId): void {\n    // No op.\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    // No op.\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    this.localState.addQueryTarget(targetId);\n    return this.queryState[targetId] || 'not-current';\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.queryState[targetId] = state;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localState.removeQueryTarget(targetId);\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    delete this.queryState[targetId];\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.localState.activeTargetIds;\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  start(): Promise<void> {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    // No op.\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    // No op.\n  }\n\n  shutdown(): void {}\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryResult } from '../local/local_store';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { TargetChange } from '../remote/remote_event';\nimport { debugAssert, fail } from '../util/assert';\n\nimport { newQueryComparator, Query, queryMatches } from './query';\nimport { OnlineState } from './types';\nimport {\n  ChangeType,\n  DocumentChangeSet,\n  SyncState,\n  ViewSnapshot\n} from './view_snapshot';\n\nexport type LimboDocumentChange = AddedLimboDocument | RemovedLimboDocument;\nexport class AddedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\nexport class RemovedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\n\n/** The result of applying a set of doc changes to a view. */\nexport interface ViewDocumentChanges {\n  /** The new set of docs that should be in the view. */\n  documentSet: DocumentSet;\n  /** The diff of these docs with the previous set of docs. */\n  changeSet: DocumentChangeSet;\n  /**\n   * Whether the set of documents passed in was not sufficient to calculate the\n   * new state of the view and there needs to be another pass based on the\n   * local cache.\n   */\n  needsRefill: boolean;\n\n  mutatedKeys: DocumentKeySet;\n}\n\nexport interface ViewChange {\n  snapshot?: ViewSnapshot;\n  limboChanges: LimboDocumentChange[];\n}\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nexport class View {\n  private syncState: SyncState | null = null;\n  /**\n   * A flag whether the view is current with the backend. A view is considered\n   * current after it has seen the current flag from the backend and did not\n   * lose consistency within the watch stream (e.g. because of an existence\n   * filter mismatch).\n   */\n  private current = false;\n  private documentSet: DocumentSet;\n  /** Documents in the view but not in the remote target */\n  private limboDocuments = documentKeySet();\n  /** Document Keys that have local changes */\n  private mutatedKeys = documentKeySet();\n  /** Query comparator that defines the document order in this view. */\n  private docComparator: (d1: Document, d2: Document) => number;\n\n  constructor(\n    private query: Query,\n    /** Documents included in the remote target */\n    private _syncedDocuments: DocumentKeySet\n  ) {\n    this.docComparator = newQueryComparator(query);\n    this.documentSet = new DocumentSet(this.docComparator);\n  }\n\n  /**\n   * The set of remote documents that the server has told us belongs to the target associated with\n   * this view.\n   */\n  get syncedDocuments(): DocumentKeySet {\n    return this._syncedDocuments;\n  }\n\n  /**\n   * Iterates over a set of doc changes, applies the query limit, and computes\n   * what the new results should be, what the changes were, and whether we may\n   * need to go back to the local cache for more results. Does not make any\n   * changes to the view.\n   * @param docChanges The doc changes to apply to this view.\n   * @param previousChanges If this is being called with a refill, then start\n   *        with this set of docs and changes instead of the current view.\n   * @return a new set of docs, changes, and refill flag.\n   */\n  computeDocChanges(\n    docChanges: MaybeDocumentMap,\n    previousChanges?: ViewDocumentChanges\n  ): ViewDocumentChanges {\n    const changeSet = previousChanges\n      ? previousChanges.changeSet\n      : new DocumentChangeSet();\n    const oldDocumentSet = previousChanges\n      ? previousChanges.documentSet\n      : this.documentSet;\n    let newMutatedKeys = previousChanges\n      ? previousChanges.mutatedKeys\n      : this.mutatedKeys;\n    let newDocumentSet = oldDocumentSet;\n    let needsRefill = false;\n\n    // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n    const lastDocInLimit =\n      this.query.hasLimitToFirst() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.last()\n        : null;\n    const firstDocInLimit =\n      this.query.hasLimitToLast() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.first()\n        : null;\n\n    docChanges.inorderTraversal(\n      (key: DocumentKey, newMaybeDoc: MaybeDocument) => {\n        const oldDoc = oldDocumentSet.get(key);\n        let newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n        if (newDoc) {\n          debugAssert(\n            key.isEqual(newDoc.key),\n            'Mismatching keys found in document changes: ' +\n              key +\n              ' != ' +\n              newDoc.key\n          );\n          newDoc = queryMatches(this.query, newDoc) ? newDoc : null;\n        }\n\n        const oldDocHadPendingMutations = oldDoc\n          ? this.mutatedKeys.has(oldDoc.key)\n          : false;\n        const newDocHasPendingMutations = newDoc\n          ? newDoc.hasLocalMutations ||\n            // We only consider committed mutations for documents that were\n            // mutated during the lifetime of the view.\n            (this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)\n          : false;\n\n        let changeApplied = false;\n\n        // Calculate change\n        if (oldDoc && newDoc) {\n          const docsEqual = oldDoc.data().isEqual(newDoc.data());\n          if (!docsEqual) {\n            if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n              changeSet.track({\n                type: ChangeType.Modified,\n                doc: newDoc\n              });\n              changeApplied = true;\n\n              if (\n                (lastDocInLimit &&\n                  this.docComparator(newDoc, lastDocInLimit) > 0) ||\n                (firstDocInLimit &&\n                  this.docComparator(newDoc, firstDocInLimit) < 0)\n              ) {\n                // This doc moved from inside the limit to outside the limit.\n                // That means there may be some other doc in the local cache\n                // that should be included instead.\n                needsRefill = true;\n              }\n            }\n          } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n            changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n            changeApplied = true;\n          }\n        } else if (!oldDoc && newDoc) {\n          changeSet.track({ type: ChangeType.Added, doc: newDoc });\n          changeApplied = true;\n        } else if (oldDoc && !newDoc) {\n          changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n          changeApplied = true;\n\n          if (lastDocInLimit || firstDocInLimit) {\n            // A doc was removed from a full limit query. We'll need to\n            // requery from the local cache to see if we know about some other\n            // doc that should be in the results.\n            needsRefill = true;\n          }\n        }\n\n        if (changeApplied) {\n          if (newDoc) {\n            newDocumentSet = newDocumentSet.add(newDoc);\n            if (newDocHasPendingMutations) {\n              newMutatedKeys = newMutatedKeys.add(key);\n            } else {\n              newMutatedKeys = newMutatedKeys.delete(key);\n            }\n          } else {\n            newDocumentSet = newDocumentSet.delete(key);\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        }\n      }\n    );\n\n    // Drop documents out to meet limit/limitToLast requirement.\n    if (this.query.hasLimitToFirst() || this.query.hasLimitToLast()) {\n      while (newDocumentSet.size > this.query.limit!) {\n        const oldDoc = this.query.hasLimitToFirst()\n          ? newDocumentSet.last()\n          : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc!.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc!.key);\n        changeSet.track({ type: ChangeType.Removed, doc: oldDoc! });\n      }\n    }\n\n    debugAssert(\n      !needsRefill || !previousChanges,\n      'View was refilled using docs that themselves needed refilling.'\n    );\n    return {\n      documentSet: newDocumentSet,\n      changeSet,\n      needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  }\n\n  private shouldWaitForSyncedDocument(\n    oldDoc: Document,\n    newDoc: Document\n  ): boolean {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return (\n      oldDoc.hasLocalMutations &&\n      newDoc.hasCommittedMutations &&\n      !newDoc.hasLocalMutations\n    );\n  }\n\n  /**\n   * Updates the view with the given ViewDocumentChanges and optionally updates\n   * limbo docs and sync state from the provided target change.\n   * @param docChanges The set of changes to make to the view's docs.\n   * @param updateLimboDocuments Whether to update limbo documents based on this\n   *        change.\n   * @param targetChange A target change to apply for computing limbo docs and\n   *        sync state.\n   * @return A new ViewChange with the given docs, changes, and sync state.\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n  applyChanges(\n    docChanges: ViewDocumentChanges,\n    updateLimboDocuments: boolean,\n    targetChange?: TargetChange\n  ): ViewChange {\n    debugAssert(\n      !docChanges.needsRefill,\n      'Cannot apply changes that need a refill'\n    );\n    const oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys;\n    // Sort changes based on type and query comparator\n    const changes = docChanges.changeSet.getChanges();\n    changes.sort((c1, c2) => {\n      return (\n        compareChangeType(c1.type, c2.type) ||\n        this.docComparator(c1.doc, c2.doc)\n      );\n    });\n\n    this.applyTargetChange(targetChange);\n    const limboChanges = updateLimboDocuments\n      ? this.updateLimboDocuments()\n      : [];\n    const synced = this.limboDocuments.size === 0 && this.current;\n    const newSyncState = synced ? SyncState.Synced : SyncState.Local;\n    const syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return { limboChanges };\n    } else {\n      const snap: ViewSnapshot = new ViewSnapshot(\n        this.query,\n        docChanges.documentSet,\n        oldDocs,\n        changes,\n        docChanges.mutatedKeys,\n        newSyncState === SyncState.Local,\n        syncStateChanged,\n        /* excludesMetadataChanges= */ false\n      );\n      return {\n        snapshot: snap,\n        limboChanges\n      };\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the view, potentially generating a\n   * ViewChange if the view's syncState changes as a result.\n   */\n  applyOnlineStateChange(onlineState: OnlineState): ViewChange {\n    if (this.current && onlineState === OnlineState.Offline) {\n      // If we're offline, set `current` to false and then call applyChanges()\n      // to refresh our syncState and generate a ViewChange as appropriate. We\n      // are guaranteed to get a new TargetChange that sets `current` back to\n      // true once the client is back online.\n      this.current = false;\n      return this.applyChanges(\n        {\n          documentSet: this.documentSet,\n          changeSet: new DocumentChangeSet(),\n          mutatedKeys: this.mutatedKeys,\n          needsRefill: false\n        },\n        /* updateLimboDocuments= */ false\n      );\n    } else {\n      // No effect, just return a no-op ViewChange.\n      return { limboChanges: [] };\n    }\n  }\n\n  /**\n   * Returns whether the doc for the given key should be in limbo.\n   */\n  private shouldBeInLimbo(key: DocumentKey): boolean {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    }\n    // The local store doesn't think it's a result, so it shouldn't be in limbo.\n    if (!this.documentSet.has(key)) {\n      return false;\n    }\n    // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n    if (this.documentSet.get(key)!.hasLocalMutations) {\n      return false;\n    }\n    // Everything else is in limbo.\n    return true;\n  }\n\n  /**\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\n   * Returns the list of changes to which docs are in limbo.\n   */\n  private applyTargetChange(targetChange?: TargetChange): void {\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.add(key))\n      );\n      targetChange.modifiedDocuments.forEach(key => {\n        debugAssert(\n          this._syncedDocuments.has(key),\n          `Modified document ${key} not found in view.`\n        );\n      });\n      targetChange.removedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.delete(key))\n      );\n      this.current = targetChange.current;\n    }\n  }\n\n  private updateLimboDocuments(): LimboDocumentChange[] {\n    // We can only determine limbo documents when we're in-sync with the server.\n    if (!this.current) {\n      return [];\n    }\n\n    // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n    const oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(doc => {\n      if (this.shouldBeInLimbo(doc.key)) {\n        this.limboDocuments = this.limboDocuments.add(doc.key);\n      }\n    });\n\n    // Diff the new limbo docs with the old limbo docs.\n    const changes: LimboDocumentChange[] = [];\n    oldLimboDocuments.forEach(key => {\n      if (!this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(key => {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  }\n\n  /**\n   * Update the in-memory state of the current view with the state read from\n   * persistence.\n   *\n   * We update the query view whenever a client's primary status changes:\n   * - When a client transitions from primary to secondary, it can miss\n   *   LocalStorage updates and its query views may temporarily not be\n   *   synchronized with the state on disk.\n   * - For secondary to primary transitions, the client needs to update the list\n   *   of `syncedDocuments` since secondary clients update their query views\n   *   based purely on synthesized RemoteEvents.\n   *\n   * @param queryResult.documents - The documents that match the query according\n   * to the LocalStore.\n   * @param queryResult.remoteKeys - The keys of the documents that match the\n   * query according to the backend.\n   *\n   * @return The ViewChange that resulted from this synchronization.\n   */\n  // PORTING NOTE: Multi-tab only.\n  synchronizeWithPersistedState(queryResult: QueryResult): ViewChange {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    const docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);\n  }\n\n  /**\n   * Returns a view snapshot as if this query was just listened to. Contains\n   * a document add for every existing document and the `fromCache` and\n   * `hasPendingWrites` status of the already established view.\n   */\n  // PORTING NOTE: Multi-tab only.\n  computeInitialSnapshot(): ViewSnapshot {\n    return ViewSnapshot.fromInitialDocuments(\n      this.query,\n      this.documentSet,\n      this.mutatedKeys,\n      this.syncState === SyncState.Local\n    );\n  }\n}\n\nfunction compareChangeType(c1: ChangeType, c2: ChangeType): number {\n  const order = (change: ChangeType): 0 | 1 | 2 => {\n    switch (change) {\n      case ChangeType.Added:\n        return 1;\n      case ChangeType.Modified:\n        return 2;\n      case ChangeType.Metadata:\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n      case ChangeType.Removed:\n        return 0;\n      default:\n        return fail('Unknown ChangeType: ' + change);\n    }\n  };\n\n  return order(c1) - order(c2);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '../util/promise';\nimport { TimerId, AsyncQueue } from '../util/async_queue';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { Transaction } from './transaction';\nimport { Datastore } from '../remote/datastore';\nimport { isNullOrUndefined } from '../util/types';\nimport { isPermanentError } from '../remote/rpc_error';\nimport { FirestoreError } from '../util/error';\n\nconst RETRY_COUNT = 5;\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nexport class TransactionRunner<T> {\n  private retries = RETRY_COUNT;\n  private backoff: ExponentialBackoff;\n\n  constructor(\n    private readonly asyncQueue: AsyncQueue,\n    private readonly datastore: Datastore,\n    private readonly updateFunction: (transaction: Transaction) => Promise<T>,\n    private readonly deferred: Deferred<T>\n  ) {\n    this.backoff = new ExponentialBackoff(\n      this.asyncQueue,\n      TimerId.TransactionRetry\n    );\n  }\n\n  /** Runs the transaction and sets the result on deferred. */\n  run(): void {\n    this.runWithBackOff();\n  }\n\n  private runWithBackOff(): void {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = new Transaction(this.datastore);\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise\n          .then(result => {\n            this.asyncQueue.enqueueAndForget(() => {\n              return transaction\n                .commit()\n                .then(() => {\n                  this.deferred.resolve(result);\n                })\n                .catch(commitError => {\n                  this.handleTransactionError(commitError);\n                });\n            });\n          })\n          .catch(userPromiseError => {\n            this.handleTransactionError(userPromiseError);\n          });\n      }\n    });\n  }\n\n  private tryRunUpdateFunction(transaction: Transaction): Promise<T> | null {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (\n        isNullOrUndefined(userPromise) ||\n        !userPromise.catch ||\n        !userPromise.then\n      ) {\n        this.deferred.reject(\n          Error('Transaction callback must return a Promise')\n        );\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n\n  private handleTransactionError(error: Error): void {\n    if (this.retries > 0 && this.isRetryableTransactionError(error)) {\n      this.retries -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n\n  private isRetryableTransactionError(error: Error): boolean {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = (error as FirestoreError).code;\n      return (\n        code === 'aborted' ||\n        code === 'failed-precondition' ||\n        !isPermanentError(code)\n      );\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport {\n  getNewDocumentChanges,\n  getCachedTarget,\n  ignoreIfPrimaryLeaseLoss,\n  LocalStore,\n  getActiveClientsFromPersistence,\n  lookupMutationDocuments,\n  removeCachedMutationBatchMetadata\n} from '../local/local_store';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { ReferenceSet } from '../local/reference_set';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { RemoteStore } from '../remote/remote_store';\nimport { RemoteSyncer } from '../remote/remote_syncer';\nimport { debugAssert, debugCast, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Deferred } from '../util/promise';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { ClientId, SharedClientState } from '../local/shared_client_state';\nimport { QueryTargetState } from '../local/shared_client_state_syncer';\nimport { SortedSet } from '../util/sorted_set';\nimport { ListenSequence } from './listen_sequence';\nimport {\n  canonifyQuery,\n  LimitType,\n  newQuery,\n  newQueryForPath,\n  Query,\n  queryEquals,\n  queryToTarget,\n  stringifyQuery\n} from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { Target } from './target';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { Transaction } from './transaction';\nimport {\n  BatchId,\n  MutationBatchState,\n  OnlineState,\n  OnlineStateSource,\n  TargetId\n} from './types';\nimport {\n  AddedLimboDocument,\n  LimboDocumentChange,\n  RemovedLimboDocument,\n  View,\n  ViewChange,\n  ViewDocumentChanges\n} from './view';\nimport { ViewSnapshot } from './view_snapshot';\nimport { AsyncQueue, wrapInUserErrorIfRecoverable } from '../util/async_queue';\nimport { TransactionRunner } from './transaction_runner';\nimport { Datastore } from '../remote/datastore';\n\nconst LOG_TAG = 'SyncEngine';\n\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nclass QueryView {\n  constructor(\n    /**\n     * The query itself.\n     */\n    public query: Query,\n    /**\n     * The target number created by the client that is used in the watch\n     * stream to identify this query.\n     */\n    public targetId: TargetId,\n    /**\n     * The view is responsible for computing the final merged truth of what\n     * docs are in the query. It gets notified of local and remote changes,\n     * and applies the query filters and limits to determine the most correct\n     * possible results.\n     */\n    public view: View\n  ) {}\n}\n\n/** Tracks a limbo resolution. */\nclass LimboResolution {\n  constructor(public key: DocumentKey) {}\n\n  /**\n   * Set to true once we've received a document. This is used in\n   * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\n   * decide whether it needs to manufacture a delete event for the target once\n   * the target is CURRENT.\n   */\n  receivedDocument: boolean = false;\n}\n\n/**\n * Interface implemented by EventManager to handle notifications from\n * SyncEngine.\n */\nexport interface SyncEngineListener {\n  /** Handles new view snapshots. */\n  onWatchChange(snapshots: ViewSnapshot[]): void;\n\n  /** Handles the failure of a query. */\n  onWatchError(query: Query, error: Error): void;\n\n  /** Handles a change in online state. */\n  onOnlineStateChange(onlineState: OnlineState): void;\n}\n\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nexport interface SyncEngine extends RemoteSyncer {\n  isPrimaryClient: boolean;\n\n  /** Subscribes to SyncEngine notifications. Has to be called exactly once. */\n  subscribe(syncEngineListener: SyncEngineListener): void;\n\n  /**\n   * Initiates the new listen, resolves promise when listen enqueued to the\n   * server. All the subsequent view snapshots or errors are sent to the\n   * subscribed handlers. Returns the initial snapshot.\n   */\n  listen(query: Query): Promise<ViewSnapshot>;\n\n  /** Stops listening to the query. */\n  unlisten(query: Query): Promise<void>;\n\n  /**\n   * Initiates the write of local mutation batch which involves adding the\n   * writes to the mutation queue, notifying the remote store about new\n   * mutations and raising events for any changes this write caused.\n   *\n   * The promise returned by this call is resolved when the above steps\n   * have completed, *not* when the write was acked by the backend. The\n   * userCallback is resolved once the write was acked/rejected by the\n   * backend (or failed locally for any other reason).\n   */\n  write(batch: Mutation[], userCallback: Deferred<void>): Promise<void>;\n\n  /**\n   * Takes an updateFunction in which a set of reads and writes can be performed\n   * atomically. In the updateFunction, the client can read and write values\n   * using the supplied transaction object. After the updateFunction, all\n   * changes will be committed. If a retryable error occurs (ex: some other\n   * client has changed any of the data referenced), then the updateFunction\n   * will be called again after a backoff. If the updateFunction still fails\n   * after all retries, then the transaction will be rejected.\n   *\n   * The transaction object passed to the updateFunction contains methods for\n   * accessing documents and collections. Unlike other datastore access, data\n   * accessed with the transaction will not reflect local changes that have not\n   * been committed. For this reason, it is required that all reads are\n   * performed before any writes. Transactions must be performed while online.\n   *\n   * The Deferred input is resolved when the transaction is fully committed.\n   */\n  runTransaction<T>(\n    asyncQueue: AsyncQueue,\n    updateFunction: (transaction: Transaction) => Promise<T>,\n    deferred: Deferred<T>\n  ): void;\n\n  /**\n   * Applies an OnlineState change to the sync engine and notifies any views of\n   * the change.\n   */\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void;\n\n  /**\n   * Registers a user callback that resolves when all pending mutations at the moment of calling\n   * are acknowledged .\n   */\n  registerPendingWritesCallback(callback: Deferred<void>): Promise<void>;\n\n  // Visible for testing\n  activeLimboDocumentResolutions(): SortedMap<DocumentKey, TargetId>;\n\n  // Visible for testing\n  enqueuedLimboDocumentResolutions(): DocumentKey[];\n\n  handleCredentialChange(user: User): Promise<void>;\n\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet;\n}\n\n/**\n * An implementation of `SyncEngine` coordinating with other parts of SDK.\n *\n * Note: some field defined in this class might have public access level, but\n * the class is not exported so they are only accessible from this module.\n * This is useful to implement optional features (like bundles) in free\n * functions, such that they are tree-shakeable.\n */\nclass SyncEngineImpl implements SyncEngine {\n  syncEngineListener: SyncEngineListener | null = null;\n\n  queryViewsByQuery = new ObjectMap<Query, QueryView>(\n    q => canonifyQuery(q),\n    queryEquals\n  );\n  queriesByTarget = new Map<TargetId, Query[]>();\n  /**\n   * The keys of documents that are in limbo for which we haven't yet started a\n   * limbo resolution query.\n   */\n  private enqueuedLimboResolutions: DocumentKey[] = [];\n  /**\n   * Keeps track of the target ID for each document that is in limbo with an\n   * active target.\n   */\n  activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n    DocumentKey.comparator\n  );\n  /**\n   * Keeps track of the information about an active limbo resolution for each\n   * active target ID that was started for the purpose of limbo resolution.\n   */\n  activeLimboResolutionsByTarget = new Map<TargetId, LimboResolution>();\n  limboDocumentRefs = new ReferenceSet();\n  /** Stores user completion handlers, indexed by User and BatchId. */\n  private mutationUserCallbacks = {} as {\n    [uidKey: string]: SortedMap<BatchId, Deferred<void>>;\n  };\n  /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n  private pendingWritesCallbacks = new Map<BatchId, Array<Deferred<void>>>();\n  private limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n\n  private onlineState = OnlineState.Unknown;\n\n  // The primary state is set to `true` or `false` immediately after Firestore\n  // startup. In the interim, a client should only be considered primary if\n  // `isPrimary` is true.\n  _isPrimaryClient: undefined | boolean = undefined;\n\n  constructor(\n    public localStore: LocalStore,\n    public remoteStore: RemoteStore,\n    protected datastore: Datastore,\n    // PORTING NOTE: Manages state synchronization in multi-tab environments.\n    public sharedClientState: SharedClientState,\n    private currentUser: User,\n    private maxConcurrentLimboResolutions: number\n  ) {}\n\n  get isPrimaryClient(): boolean {\n    return this._isPrimaryClient === true;\n  }\n\n  subscribe(syncEngineListener: SyncEngineListener): void {\n    debugAssert(\n      syncEngineListener !== null,\n      'SyncEngine listener cannot be null'\n    );\n    debugAssert(\n      this.syncEngineListener === null,\n      'SyncEngine already has a subscriber.'\n    );\n\n    this.syncEngineListener = syncEngineListener;\n  }\n\n  async listen(query: Query): Promise<ViewSnapshot> {\n    this.assertSubscribed('listen()');\n\n    let targetId;\n    let viewSnapshot;\n\n    const queryView = this.queryViewsByQuery.get(query);\n    if (queryView) {\n      // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n      // already exists when EventManager calls us for the first time. This\n      // happens when the primary tab is already listening to this query on\n      // behalf of another tab and the user of the primary also starts listening\n      // to the query. EventManager will not have an assigned target ID in this\n      // case and calls `listen` to obtain this ID.\n      targetId = queryView.targetId;\n      this.sharedClientState.addLocalQueryTarget(targetId);\n      viewSnapshot = queryView.view.computeInitialSnapshot();\n    } else {\n      const targetData = await this.localStore.allocateTarget(\n        queryToTarget(query)\n      );\n\n      const status = this.sharedClientState.addLocalQueryTarget(\n        targetData.targetId\n      );\n      targetId = targetData.targetId;\n      viewSnapshot = await this.initializeViewAndComputeSnapshot(\n        query,\n        targetId,\n        status === 'current'\n      );\n      if (this.isPrimaryClient) {\n        this.remoteStore.listen(targetData);\n      }\n    }\n\n    return viewSnapshot;\n  }\n\n  /**\n   * Registers a view for a previously unknown query and computes its initial\n   * snapshot.\n   */\n  async initializeViewAndComputeSnapshot(\n    query: Query,\n    targetId: TargetId,\n    current: boolean\n  ): Promise<ViewSnapshot> {\n    const queryResult = await this.localStore.executeQuery(\n      query,\n      /* usePreviousResults= */ true\n    );\n    const view = new View(query, queryResult.remoteKeys);\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\n    const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(\n      targetId,\n      current && this.onlineState !== OnlineState.Offline\n    );\n    const viewChange = view.applyChanges(\n      viewDocChanges,\n      /* updateLimboDocuments= */ this.isPrimaryClient,\n      synthesizedTargetChange\n    );\n    this.updateTrackedLimbos(targetId, viewChange.limboChanges);\n\n    debugAssert(\n      !!viewChange.snapshot,\n      'applyChanges for new view should always return a snapshot'\n    );\n\n    const data = new QueryView(query, targetId, view);\n    this.queryViewsByQuery.set(query, data);\n    if (this.queriesByTarget.has(targetId)) {\n      this.queriesByTarget.get(targetId)!.push(query);\n    } else {\n      this.queriesByTarget.set(targetId, [query]);\n    }\n    return viewChange.snapshot!;\n  }\n\n  async unlisten(query: Query): Promise<void> {\n    this.assertSubscribed('unlisten()');\n\n    const queryView = this.queryViewsByQuery.get(query)!;\n    debugAssert(\n      !!queryView,\n      'Trying to unlisten on query not found:' + stringifyQuery(query)\n    );\n\n    // Only clean up the query view and target if this is the only query mapped\n    // to the target.\n    const queries = this.queriesByTarget.get(queryView.targetId)!;\n    if (queries.length > 1) {\n      this.queriesByTarget.set(\n        queryView.targetId,\n        queries.filter(q => !queryEquals(q, query))\n      );\n      this.queryViewsByQuery.delete(query);\n      return;\n    }\n\n    // No other queries are mapped to the target, clean up the query and the target.\n    if (this.isPrimaryClient) {\n      // We need to remove the local query target first to allow us to verify\n      // whether any other client is still interested in this target.\n      this.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n      const targetRemainsActive = this.sharedClientState.isActiveQueryTarget(\n        queryView.targetId\n      );\n\n      if (!targetRemainsActive) {\n        await this.localStore\n          .releaseTarget(queryView.targetId, /*keepPersistedTargetData=*/ false)\n          .then(() => {\n            this.sharedClientState.clearQueryState(queryView.targetId);\n            this.remoteStore.unlisten(queryView.targetId);\n            this.removeAndCleanupTarget(queryView.targetId);\n          })\n          .catch(ignoreIfPrimaryLeaseLoss);\n      }\n    } else {\n      this.removeAndCleanupTarget(queryView.targetId);\n      await this.localStore.releaseTarget(\n        queryView.targetId,\n        /*keepPersistedTargetData=*/ true\n      );\n    }\n  }\n\n  async write(batch: Mutation[], userCallback: Deferred<void>): Promise<void> {\n    this.assertSubscribed('write()');\n\n    try {\n      const result = await this.localStore.localWrite(batch);\n      this.sharedClientState.addPendingMutation(result.batchId);\n      this.addMutationCallback(result.batchId, userCallback);\n      await this.emitNewSnapsAndNotifyLocalStore(result.changes);\n      await this.remoteStore.fillWritePipeline();\n    } catch (e) {\n      // If we can't persist the mutation, we reject the user callback and\n      // don't send the mutation. The user can then retry the write.\n      const error = wrapInUserErrorIfRecoverable(e, `Failed to persist write`);\n      userCallback.reject(error);\n    }\n  }\n\n  runTransaction<T>(\n    asyncQueue: AsyncQueue,\n    updateFunction: (transaction: Transaction) => Promise<T>,\n    deferred: Deferred<T>\n  ): void {\n    new TransactionRunner<T>(\n      asyncQueue,\n      this.datastore,\n      updateFunction,\n      deferred\n    ).run();\n  }\n\n  async applyRemoteEvent(remoteEvent: RemoteEvent): Promise<void> {\n    this.assertSubscribed('applyRemoteEvent()');\n    try {\n      const changes = await this.localStore.applyRemoteEvent(remoteEvent);\n      // Update `receivedDocument` as appropriate for any limbo targets.\n      remoteEvent.targetChanges.forEach((targetChange, targetId) => {\n        const limboResolution = this.activeLimboResolutionsByTarget.get(\n          targetId\n        );\n        if (limboResolution) {\n          // Since this is a limbo resolution lookup, it's for a single document\n          // and it could be added, modified, or removed, but not a combination.\n          hardAssert(\n            targetChange.addedDocuments.size +\n              targetChange.modifiedDocuments.size +\n              targetChange.removedDocuments.size <=\n              1,\n            'Limbo resolution for single document contains multiple changes.'\n          );\n          if (targetChange.addedDocuments.size > 0) {\n            limboResolution.receivedDocument = true;\n          } else if (targetChange.modifiedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received change for limbo target document without add.'\n            );\n          } else if (targetChange.removedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received remove for limbo target document without add.'\n            );\n            limboResolution.receivedDocument = false;\n          } else {\n            // This was probably just a CURRENT targetChange or similar.\n          }\n        }\n      });\n      await this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    // If we are the secondary client, we explicitly ignore the remote store's\n    // online state (the local client may go offline, even though the primary\n    // tab remains online) and only apply the primary tab's online state from\n    // SharedClientState.\n    if (\n      (this.isPrimaryClient && source === OnlineStateSource.RemoteStore) ||\n      (!this.isPrimaryClient && source === OnlineStateSource.SharedClientState)\n    ) {\n      this.assertSubscribed('applyOnlineStateChange()');\n      const newViewSnapshots = [] as ViewSnapshot[];\n      this.queryViewsByQuery.forEach((query, queryView) => {\n        const viewChange = queryView.view.applyOnlineStateChange(onlineState);\n        debugAssert(\n          viewChange.limboChanges.length === 0,\n          'OnlineState should not affect limbo documents.'\n        );\n        if (viewChange.snapshot) {\n          newViewSnapshots.push(viewChange.snapshot);\n        }\n      });\n      this.syncEngineListener!.onOnlineStateChange(onlineState);\n      this.syncEngineListener!.onWatchChange(newViewSnapshots);\n      this.onlineState = onlineState;\n      if (this.isPrimaryClient) {\n        this.sharedClientState.setOnlineState(onlineState);\n      }\n    }\n  }\n\n  async rejectListen(targetId: TargetId, err: FirestoreError): Promise<void> {\n    this.assertSubscribed('rejectListens()');\n\n    // PORTING NOTE: Multi-tab only.\n    this.sharedClientState.updateQueryState(targetId, 'rejected', err);\n\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    const limboKey = limboResolution && limboResolution.key;\n    if (limboKey) {\n      // TODO(klimt): We really only should do the following on permission\n      // denied errors, but we don't have the cause code here.\n\n      // It's a limbo doc. Create a synthetic event saying it was deleted.\n      // This is kind of a hack. Ideally, we would have a method in the local\n      // store to purge a document. However, it would be tricky to keep all of\n      // the local store's invariants with another method.\n      let documentUpdates = new SortedMap<DocumentKey, MaybeDocument>(\n        DocumentKey.comparator\n      );\n      documentUpdates = documentUpdates.insert(\n        limboKey,\n        new NoDocument(limboKey, SnapshotVersion.min())\n      );\n      const resolvedLimboDocuments = documentKeySet().add(limboKey);\n      const event = new RemoteEvent(\n        SnapshotVersion.min(),\n        /* targetChanges= */ new Map<TargetId, TargetChange>(),\n        /* targetMismatches= */ new SortedSet<TargetId>(primitiveComparator),\n        documentUpdates,\n        resolvedLimboDocuments\n      );\n\n      await this.applyRemoteEvent(event);\n\n      // Since this query failed, we won't want to manually unlisten to it.\n      // We only remove it from bookkeeping after we successfully applied the\n      // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\n      // this query when the RemoteStore restarts the Watch stream, which should\n      // re-trigger the target failure.\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(\n        limboKey\n      );\n      this.activeLimboResolutionsByTarget.delete(targetId);\n      this.pumpEnqueuedLimboResolutions();\n    } else {\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => this.removeAndCleanupTarget(targetId, err))\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n\n  async applySuccessfulWrite(\n    mutationBatchResult: MutationBatchResult\n  ): Promise<void> {\n    this.assertSubscribed('applySuccessfulWrite()');\n\n    const batchId = mutationBatchResult.batch.batchId;\n\n    try {\n      const changes = await this.localStore.acknowledgeBatch(\n        mutationBatchResult\n      );\n\n      // The local store may or may not be able to apply the write result and\n      // raise events immediately (depending on whether the watcher is caught\n      // up), so we raise user callbacks first so that they consistently happen\n      // before listen events.\n      this.processUserCallback(batchId, /*error=*/ null);\n      this.triggerPendingWritesCallbacks(batchId);\n\n      this.sharedClientState.updateMutationState(batchId, 'acknowledged');\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  async rejectFailedWrite(\n    batchId: BatchId,\n    error: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('rejectFailedWrite()');\n\n    try {\n      const changes = await this.localStore.rejectBatch(batchId);\n\n      // The local store may or may not be able to apply the write result and\n      // raise events immediately (depending on whether the watcher is caught up),\n      // so we raise user callbacks first so that they consistently happen before\n      // listen events.\n      this.processUserCallback(batchId, error);\n      this.triggerPendingWritesCallbacks(batchId);\n\n      this.sharedClientState.updateMutationState(batchId, 'rejected', error);\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  async registerPendingWritesCallback(callback: Deferred<void>): Promise<void> {\n    if (!this.remoteStore.canUseNetwork()) {\n      logDebug(\n        LOG_TAG,\n        'The network is disabled. The task returned by ' +\n          \"'awaitPendingWrites()' will not complete until the network is enabled.\"\n      );\n    }\n\n    try {\n      const highestBatchId = await this.localStore.getHighestUnacknowledgedBatchId();\n      if (highestBatchId === BATCHID_UNKNOWN) {\n        // Trigger the callback right away if there is no pending writes at the moment.\n        callback.resolve();\n        return;\n      }\n\n      const callbacks = this.pendingWritesCallbacks.get(highestBatchId) || [];\n      callbacks.push(callback);\n      this.pendingWritesCallbacks.set(highestBatchId, callbacks);\n    } catch (e) {\n      const firestoreError = wrapInUserErrorIfRecoverable(\n        e,\n        'Initialization of waitForPendingWrites() operation failed'\n      );\n      callback.reject(firestoreError);\n    }\n  }\n\n  /**\n   * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\n   * if there are any.\n   */\n  private triggerPendingWritesCallbacks(batchId: BatchId): void {\n    (this.pendingWritesCallbacks.get(batchId) || []).forEach(callback => {\n      callback.resolve();\n    });\n\n    this.pendingWritesCallbacks.delete(batchId);\n  }\n\n  /** Reject all outstanding callbacks waiting for pending writes to complete. */\n  private rejectOutstandingPendingWritesCallbacks(errorMessage: string): void {\n    this.pendingWritesCallbacks.forEach(callbacks => {\n      callbacks.forEach(callback => {\n        callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n      });\n    });\n\n    this.pendingWritesCallbacks.clear();\n  }\n\n  private addMutationCallback(\n    batchId: BatchId,\n    callback: Deferred<void>\n  ): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n    if (!newCallbacks) {\n      newCallbacks = new SortedMap<BatchId, Deferred<void>>(\n        primitiveComparator\n      );\n    }\n    newCallbacks = newCallbacks.insert(batchId, callback);\n    this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n  }\n\n  /**\n   * Resolves or rejects the user callback for the given batch and then discards\n   * it.\n   */\n  processUserCallback(batchId: BatchId, error: Error | null): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n\n    // NOTE: Mutations restored from persistence won't have callbacks, so it's\n    // okay for there to be no callback for this ID.\n    if (newCallbacks) {\n      const callback = newCallbacks.get(batchId);\n      if (callback) {\n        debugAssert(\n          batchId === newCallbacks.minKey(),\n          'Mutation callbacks processed out-of-order?'\n        );\n        if (error) {\n          callback.reject(error);\n        } else {\n          callback.resolve();\n        }\n        newCallbacks = newCallbacks.remove(batchId);\n      }\n      this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    }\n  }\n\n  removeAndCleanupTarget(targetId: number, error: Error | null = null): void {\n    this.sharedClientState.removeLocalQueryTarget(targetId);\n\n    debugAssert(\n      this.queriesByTarget.has(targetId) &&\n        this.queriesByTarget.get(targetId)!.length !== 0,\n      `There are no queries mapped to target id ${targetId}`\n    );\n\n    for (const query of this.queriesByTarget.get(targetId)!) {\n      this.queryViewsByQuery.delete(query);\n      if (error) {\n        this.syncEngineListener!.onWatchError(query, error);\n      }\n    }\n\n    this.queriesByTarget.delete(targetId);\n\n    if (this.isPrimaryClient) {\n      const limboKeys = this.limboDocumentRefs.removeReferencesForId(targetId);\n      limboKeys.forEach(limboKey => {\n        const isReferenced = this.limboDocumentRefs.containsKey(limboKey);\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboKey);\n        }\n      });\n    }\n  }\n\n  private removeLimboTarget(key: DocumentKey): void {\n    // It's possible that the target already got removed because the query failed. In that case,\n    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n    const limboTargetId = this.activeLimboTargetsByKey.get(key);\n    if (limboTargetId === null) {\n      // This target already got removed, because the query failed.\n      return;\n    }\n\n    this.remoteStore.unlisten(limboTargetId);\n    this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(key);\n    this.activeLimboResolutionsByTarget.delete(limboTargetId);\n    this.pumpEnqueuedLimboResolutions();\n  }\n\n  updateTrackedLimbos(\n    targetId: TargetId,\n    limboChanges: LimboDocumentChange[]\n  ): void {\n    for (const limboChange of limboChanges) {\n      if (limboChange instanceof AddedLimboDocument) {\n        this.limboDocumentRefs.addReference(limboChange.key, targetId);\n        this.trackLimboChange(limboChange);\n      } else if (limboChange instanceof RemovedLimboDocument) {\n        logDebug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n        this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n        const isReferenced = this.limboDocumentRefs.containsKey(\n          limboChange.key\n        );\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboChange.key);\n        }\n      } else {\n        fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n      }\n    }\n  }\n\n  private trackLimboChange(limboChange: AddedLimboDocument): void {\n    const key = limboChange.key;\n    if (!this.activeLimboTargetsByKey.get(key)) {\n      logDebug(LOG_TAG, 'New document in limbo: ' + key);\n      this.enqueuedLimboResolutions.push(key);\n      this.pumpEnqueuedLimboResolutions();\n    }\n  }\n\n  /**\n   * Starts listens for documents in limbo that are enqueued for resolution,\n   * subject to a maximum number of concurrent resolutions.\n   *\n   * Without bounding the number of concurrent resolutions, the server can fail\n   * with \"resource exhausted\" errors which can lead to pathological client\n   * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\n   */\n  private pumpEnqueuedLimboResolutions(): void {\n    while (\n      this.enqueuedLimboResolutions.length > 0 &&\n      this.activeLimboTargetsByKey.size < this.maxConcurrentLimboResolutions\n    ) {\n      const key = this.enqueuedLimboResolutions.shift()!;\n      const limboTargetId = this.limboTargetIdGenerator.next();\n      this.activeLimboResolutionsByTarget.set(\n        limboTargetId,\n        new LimboResolution(key)\n      );\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.insert(\n        key,\n        limboTargetId\n      );\n      this.remoteStore.listen(\n        new TargetData(\n          queryToTarget(newQueryForPath(key.path)),\n          limboTargetId,\n          TargetPurpose.LimboResolution,\n          ListenSequence.INVALID\n        )\n      );\n    }\n  }\n\n  // Visible for testing\n  activeLimboDocumentResolutions(): SortedMap<DocumentKey, TargetId> {\n    return this.activeLimboTargetsByKey;\n  }\n\n  // Visible for testing\n  enqueuedLimboDocumentResolutions(): DocumentKey[] {\n    return this.enqueuedLimboResolutions;\n  }\n\n  async emitNewSnapsAndNotifyLocalStore(\n    changes: MaybeDocumentMap,\n    remoteEvent?: RemoteEvent\n  ): Promise<void> {\n    const newSnaps: ViewSnapshot[] = [];\n    const docChangesInAllViews: LocalViewChanges[] = [];\n    const queriesProcessed: Array<Promise<void>> = [];\n\n    this.queryViewsByQuery.forEach((_, queryView) => {\n      queriesProcessed.push(\n        Promise.resolve()\n          .then(() => {\n            const viewDocChanges = queryView.view.computeDocChanges(changes);\n            if (!viewDocChanges.needsRefill) {\n              return viewDocChanges;\n            }\n            // The query has a limit and some docs were removed, so we need\n            // to re-run the query against the local store to make sure we\n            // didn't lose any good docs that had been past the limit.\n            return this.localStore\n              .executeQuery(queryView.query, /* usePreviousResults= */ false)\n              .then(({ documents }) => {\n                return queryView.view.computeDocChanges(\n                  documents,\n                  viewDocChanges\n                );\n              });\n          })\n          .then((viewDocChanges: ViewDocumentChanges) => {\n            const targetChange =\n              remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n            const viewChange = queryView.view.applyChanges(\n              viewDocChanges,\n              /* updateLimboDocuments= */ this.isPrimaryClient,\n              targetChange\n            );\n            this.updateTrackedLimbos(\n              queryView.targetId,\n              viewChange.limboChanges\n            );\n            if (viewChange.snapshot) {\n              if (this.isPrimaryClient) {\n                this.sharedClientState.updateQueryState(\n                  queryView.targetId,\n                  viewChange.snapshot.fromCache ? 'not-current' : 'current'\n                );\n              }\n\n              newSnaps.push(viewChange.snapshot);\n              const docChanges = LocalViewChanges.fromSnapshot(\n                queryView.targetId,\n                viewChange.snapshot\n              );\n              docChangesInAllViews.push(docChanges);\n            }\n          })\n      );\n    });\n\n    await Promise.all(queriesProcessed);\n    this.syncEngineListener!.onWatchChange(newSnaps);\n    await this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n  }\n\n  assertSubscribed(fnName: string): void {\n    debugAssert(\n      this.syncEngineListener !== null,\n      'Trying to call ' + fnName + ' before calling subscribe().'\n    );\n  }\n\n  async handleCredentialChange(user: User): Promise<void> {\n    const userChanged = !this.currentUser.isEqual(user);\n\n    if (userChanged) {\n      logDebug(LOG_TAG, 'User change. New user:', user.toKey());\n\n      const result = await this.localStore.handleUserChange(user);\n      this.currentUser = user;\n\n      // Fails tasks waiting for pending writes requested by previous user.\n      this.rejectOutstandingPendingWritesCallbacks(\n        \"'waitForPendingWrites' promise is rejected due to a user change.\"\n      );\n      // TODO(b/114226417): Consider calling this only in the primary tab.\n      this.sharedClientState.handleUserChange(\n        user,\n        result.removedBatchIds,\n        result.addedBatchIds\n      );\n      await this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments);\n    }\n  }\n\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    if (limboResolution && limboResolution.receivedDocument) {\n      return documentKeySet().add(limboResolution.key);\n    } else {\n      let keySet = documentKeySet();\n      const queries = this.queriesByTarget.get(targetId);\n      if (!queries) {\n        return keySet;\n      }\n      for (const query of queries) {\n        const queryView = this.queryViewsByQuery.get(query);\n        debugAssert(\n          !!queryView,\n          `No query view found for ${stringifyQuery(query)}`\n        );\n        keySet = keySet.unionWith(queryView.view.syncedDocuments);\n      }\n      return keySet;\n    }\n  }\n}\n\nexport function newSyncEngine(\n  localStore: LocalStore,\n  remoteStore: RemoteStore,\n  datastore: Datastore,\n  // PORTING NOTE: Manages state synchronization in multi-tab environments.\n  sharedClientState: SharedClientState,\n  currentUser: User,\n  maxConcurrentLimboResolutions: number,\n  isPrimary: boolean\n): SyncEngine {\n  const syncEngine = new SyncEngineImpl(\n    localStore,\n    remoteStore,\n    datastore,\n    sharedClientState,\n    currentUser,\n    maxConcurrentLimboResolutions\n  );\n  if (isPrimary) {\n    syncEngine._isPrimaryClient = true;\n  }\n  return syncEngine;\n}\n\n/**\n * Reconcile the list of synced documents in an existing view with those\n * from persistence.\n */\nasync function synchronizeViewAndComputeSnapshot(\n  syncEngine: SyncEngine,\n  queryView: QueryView\n): Promise<ViewChange> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const queryResult = await syncEngineImpl.localStore.executeQuery(\n    queryView.query,\n    /* usePreviousResults= */ true\n  );\n  const viewSnapshot = queryView.view.synchronizeWithPersistedState(\n    queryResult\n  );\n  if (syncEngineImpl.isPrimaryClient) {\n    syncEngineImpl.updateTrackedLimbos(\n      queryView.targetId,\n      viewSnapshot.limboChanges\n    );\n  }\n  return viewSnapshot;\n}\n\n/** Applies a mutation state to an existing batch.  */\n// PORTING NOTE: Multi-Tab only.\nexport async function applyBatchState(\n  syncEngine: SyncEngine,\n  batchId: BatchId,\n  batchState: MutationBatchState,\n  error?: FirestoreError\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  syncEngineImpl.assertSubscribed('applyBatchState()');\n  const documents = await lookupMutationDocuments(\n    syncEngineImpl.localStore,\n    batchId\n  );\n\n  if (documents === null) {\n    // A throttled tab may not have seen the mutation before it was completed\n    // and removed from the mutation queue, in which case we won't have cached\n    // the affected documents. In this case we can safely ignore the update\n    // since that means we didn't apply the mutation locally at all (if we\n    // had, we would have cached the affected documents), and so we will just\n    // see any resulting document changes via normal remote document updates\n    // as applicable.\n    logDebug(LOG_TAG, 'Cannot apply mutation batch with id: ' + batchId);\n    return;\n  }\n\n  if (batchState === 'pending') {\n    // If we are the primary client, we need to send this write to the\n    // backend. Secondary clients will ignore these writes since their remote\n    // connection is disabled.\n    await syncEngineImpl.remoteStore.fillWritePipeline();\n  } else if (batchState === 'acknowledged' || batchState === 'rejected') {\n    // NOTE: Both these methods are no-ops for batches that originated from\n    // other clients.\n    syncEngineImpl.processUserCallback(batchId, error ? error : null);\n    removeCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);\n  } else {\n    fail(`Unknown batchState: ${batchState}`);\n  }\n\n  await syncEngineImpl.emitNewSnapsAndNotifyLocalStore(documents);\n}\n\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\nexport async function applyPrimaryState(\n  syncEngine: SyncEngine,\n  isPrimary: boolean\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  if (isPrimary === true && syncEngineImpl._isPrimaryClient !== true) {\n    // Secondary tabs only maintain Views for their local listeners and the\n    // Views internal state may not be 100% populated (in particular\n    // secondary tabs don't track syncedDocuments, the set of documents the\n    // server considers to be in the target). So when a secondary becomes\n    // primary, we need to need to make sure that all views for all targets\n    // match the state on disk.\n    const activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();\n    const activeQueries = await synchronizeQueryViewsAndRaiseSnapshots(\n      syncEngineImpl,\n      activeTargets.toArray(),\n      /*transitionToPrimary=*/ true\n    );\n    syncEngineImpl._isPrimaryClient = true;\n    await syncEngineImpl.remoteStore.applyPrimaryState(true);\n    for (const targetData of activeQueries) {\n      syncEngineImpl.remoteStore.listen(targetData);\n    }\n  } else if (isPrimary === false && syncEngineImpl._isPrimaryClient !== false) {\n    const activeTargets: TargetId[] = [];\n\n    let p = Promise.resolve();\n    syncEngineImpl.queriesByTarget.forEach((_, targetId) => {\n      if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {\n        activeTargets.push(targetId);\n      } else {\n        p = p.then(() => {\n          syncEngineImpl.removeAndCleanupTarget(targetId);\n          return syncEngineImpl.localStore.releaseTarget(\n            targetId,\n            /*keepPersistedTargetData=*/ true\n          );\n        });\n      }\n      syncEngineImpl.remoteStore.unlisten(targetId);\n    });\n    await p;\n\n    await synchronizeQueryViewsAndRaiseSnapshots(\n      syncEngineImpl,\n      activeTargets,\n      /*transitionToPrimary=*/ false\n    );\n    resetLimboDocuments(syncEngineImpl);\n    syncEngineImpl._isPrimaryClient = false;\n    await syncEngineImpl.remoteStore.applyPrimaryState(false);\n  }\n}\n\n// PORTING NOTE: Multi-Tab only.\nfunction resetLimboDocuments(syncEngine: SyncEngine): void {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  syncEngineImpl.activeLimboResolutionsByTarget.forEach((_, targetId) => {\n    syncEngineImpl.remoteStore.unlisten(targetId);\n  });\n  syncEngineImpl.limboDocumentRefs.removeAllReferences();\n  syncEngineImpl.activeLimboResolutionsByTarget = new Map<\n    TargetId,\n    LimboResolution\n  >();\n  syncEngineImpl.activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n    DocumentKey.comparator\n  );\n}\n\n/**\n * Reconcile the query views of the provided query targets with the state from\n * persistence. Raises snapshots for any changes that affect the local\n * client and returns the updated state of all target's query data.\n *\n * @param targets the list of targets with views that need to be recomputed\n * @param transitionToPrimary `true` iff the tab transitions from a secondary\n * tab to a primary tab\n */\n// PORTING NOTE: Multi-Tab only.\nasync function synchronizeQueryViewsAndRaiseSnapshots(\n  syncEngine: SyncEngine,\n  targets: TargetId[],\n  transitionToPrimary: boolean\n): Promise<TargetData[]> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const activeQueries: TargetData[] = [];\n  const newViewSnapshots: ViewSnapshot[] = [];\n  for (const targetId of targets) {\n    let targetData: TargetData;\n    const queries = syncEngineImpl.queriesByTarget.get(targetId);\n\n    if (queries && queries.length !== 0) {\n      // For queries that have a local View, we fetch their current state\n      // from LocalStore (as the resume token and the snapshot version\n      // might have changed) and reconcile their views with the persisted\n      // state (the list of syncedDocuments may have gotten out of sync).\n      targetData = await syncEngineImpl.localStore.allocateTarget(\n        queryToTarget(queries[0])\n      );\n\n      for (const query of queries) {\n        const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n        debugAssert(\n          !!queryView,\n          `No query view found for ${stringifyQuery(query)}`\n        );\n\n        const viewChange = await synchronizeViewAndComputeSnapshot(\n          syncEngineImpl,\n          queryView\n        );\n        if (viewChange.snapshot) {\n          newViewSnapshots.push(viewChange.snapshot);\n        }\n      }\n    } else {\n      debugAssert(\n        transitionToPrimary,\n        'A secondary tab should never have an active view without an active target.'\n      );\n      // For queries that never executed on this client, we need to\n      // allocate the target in LocalStore and initialize a new View.\n      const target = await getCachedTarget(syncEngineImpl.localStore, targetId);\n      debugAssert(!!target, `Target for id ${targetId} not found`);\n      targetData = await syncEngineImpl.localStore.allocateTarget(target);\n      await syncEngineImpl.initializeViewAndComputeSnapshot(\n        synthesizeTargetToQuery(target!),\n        targetId,\n        /*current=*/ false\n      );\n    }\n\n    activeQueries.push(targetData!);\n  }\n\n  syncEngineImpl.syncEngineListener!.onWatchChange(newViewSnapshots);\n  return activeQueries;\n}\n\n/**\n * Creates a `Query` object from the specified `Target`. There is no way to\n * obtain the original `Query`, so we synthesize a `Query` from the `Target`\n * object.\n *\n * The synthesized result might be different from the original `Query`, but\n * since the synthesized `Query` should return the same results as the\n * original one (only the presentation of results might differ), the potential\n * difference will not cause issues.\n */\n// PORTING NOTE: Multi-Tab only.\nfunction synthesizeTargetToQuery(target: Target): Query {\n  return newQuery(\n    target.path,\n    target.collectionGroup,\n    target.orderBy,\n    target.filters,\n    target.limit,\n    LimitType.First,\n    target.startAt,\n    target.endAt\n  );\n}\n\n/** Returns the IDs of the clients that are currently active. */\n// PORTING NOTE: Multi-Tab only.\nexport function getActiveClients(syncEngine: SyncEngine): Promise<ClientId[]> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  return getActiveClientsFromPersistence(syncEngineImpl.localStore);\n}\n\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\nexport async function applyTargetState(\n  syncEngine: SyncEngine,\n  targetId: TargetId,\n  state: QueryTargetState,\n  error?: FirestoreError\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  if (syncEngineImpl._isPrimaryClient) {\n    // If we receive a target state notification via WebStorage, we are\n    // either already secondary or another tab has taken the primary lease.\n    logDebug(LOG_TAG, 'Ignoring unexpected query state notification.');\n    return;\n  }\n\n  if (syncEngineImpl.queriesByTarget.has(targetId)) {\n    switch (state) {\n      case 'current':\n      case 'not-current': {\n        const changes = await getNewDocumentChanges(syncEngineImpl.localStore);\n        const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(\n          targetId,\n          state === 'current'\n        );\n        await syncEngineImpl.emitNewSnapsAndNotifyLocalStore(\n          changes,\n          synthesizedRemoteEvent\n        );\n        break;\n      }\n      case 'rejected': {\n        await syncEngineImpl.localStore.releaseTarget(\n          targetId,\n          /* keepPersistedTargetData */ true\n        );\n        syncEngineImpl.removeAndCleanupTarget(targetId, error);\n        break;\n      }\n      default:\n        fail('Unexpected target state: ' + state);\n    }\n  }\n}\n\n/** Adds or removes Watch targets for queries from different tabs. */\nexport async function applyActiveTargetsChange(\n  syncEngine: SyncEngine,\n  added: TargetId[],\n  removed: TargetId[]\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  if (!syncEngineImpl._isPrimaryClient) {\n    return;\n  }\n\n  for (const targetId of added) {\n    if (syncEngineImpl.queriesByTarget.has(targetId)) {\n      // A target might have been added in a previous attempt\n      logDebug(LOG_TAG, 'Adding an already active target ' + targetId);\n      continue;\n    }\n\n    const target = await getCachedTarget(syncEngineImpl.localStore, targetId);\n    debugAssert(!!target, `Query data for active target ${targetId} not found`);\n    const targetData = await syncEngineImpl.localStore.allocateTarget(target);\n    await syncEngineImpl.initializeViewAndComputeSnapshot(\n      synthesizeTargetToQuery(target),\n      targetData.targetId,\n      /*current=*/ false\n    );\n    syncEngineImpl.remoteStore.listen(targetData);\n  }\n\n  for (const targetId of removed) {\n    // Check that the target is still active since the target might have been\n    // removed if it has been rejected by the backend.\n    if (!syncEngineImpl.queriesByTarget.has(targetId)) {\n      continue;\n    }\n\n    // Release queries that are still active.\n    await syncEngineImpl.localStore\n      .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n      .then(() => {\n        syncEngineImpl.remoteStore.unlisten(targetId);\n        syncEngineImpl.removeAndCleanupTarget(targetId);\n      })\n      .catch(ignoreIfPrimaryLeaseLoss);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { EventHandler } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { canonifyQuery, Query, queryEquals, stringifyQuery } from './query';\nimport { SyncEngine, SyncEngineListener } from './sync_engine';\nimport { OnlineState } from './types';\nimport { ChangeType, DocumentViewChange, ViewSnapshot } from './view_snapshot';\nimport { wrapInUserErrorIfRecoverable } from '../util/async_queue';\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nclass QueryListenersInfo {\n  viewSnap: ViewSnapshot | undefined = undefined;\n  listeners: QueryListener[] = [];\n}\n\n/**\n * Interface for handling events from the EventManager.\n */\nexport interface Observer<T> {\n  next: EventHandler<T>;\n  error: EventHandler<Error>;\n}\n\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nexport class EventManager implements SyncEngineListener {\n  private queries = new ObjectMap<Query, QueryListenersInfo>(\n    q => canonifyQuery(q),\n    queryEquals\n  );\n\n  private onlineState = OnlineState.Unknown;\n\n  private snapshotsInSyncListeners: Set<Observer<void>> = new Set();\n\n  constructor(private syncEngine: SyncEngine) {\n    this.syncEngine.subscribe(this);\n  }\n\n  async listen(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let firstListen = false;\n\n    let queryInfo = this.queries.get(query);\n    if (!queryInfo) {\n      firstListen = true;\n      queryInfo = new QueryListenersInfo();\n    }\n\n    if (firstListen) {\n      try {\n        queryInfo.viewSnap = await this.syncEngine.listen(query);\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Initialization of query '${stringifyQuery(listener.query)}' failed`\n        );\n        listener.onError(firestoreError);\n        return;\n      }\n    }\n\n    this.queries.set(query, queryInfo);\n    queryInfo.listeners.push(listener);\n\n    // Run global snapshot listeners if a consistent snapshot has been emitted.\n    const raisedEvent = listener.applyOnlineStateChange(this.onlineState);\n    debugAssert(\n      !raisedEvent,\n      \"applyOnlineStateChange() shouldn't raise an event for brand-new listeners.\"\n    );\n\n    if (queryInfo.viewSnap) {\n      const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n      if (raisedEvent) {\n        this.raiseSnapshotsInSyncEvent();\n      }\n    }\n  }\n\n  async unlisten(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let lastListen = false;\n\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      const i = queryInfo.listeners.indexOf(listener);\n      if (i >= 0) {\n        queryInfo.listeners.splice(i, 1);\n        lastListen = queryInfo.listeners.length === 0;\n      }\n    }\n\n    if (lastListen) {\n      this.queries.delete(query);\n      return this.syncEngine.unlisten(query);\n    }\n  }\n\n  onWatchChange(viewSnaps: ViewSnapshot[]): void {\n    let raisedEvent = false;\n    for (const viewSnap of viewSnaps) {\n      const query = viewSnap.query;\n      const queryInfo = this.queries.get(query);\n      if (queryInfo) {\n        for (const listener of queryInfo.listeners) {\n          if (listener.onViewSnapshot(viewSnap)) {\n            raisedEvent = true;\n          }\n        }\n        queryInfo.viewSnap = viewSnap;\n      }\n    }\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  onWatchError(query: Query, error: Error): void {\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        listener.onError(error);\n      }\n    }\n\n    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n    // after an error.\n    this.queries.delete(query);\n  }\n\n  onOnlineStateChange(onlineState: OnlineState): void {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    this.queries.forEach((_, queryInfo) => {\n      for (const listener of queryInfo.listeners) {\n        // Run global snapshot listeners if a consistent snapshot has been emitted.\n        if (listener.applyOnlineStateChange(onlineState)) {\n          raisedEvent = true;\n        }\n      }\n    });\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.add(observer);\n    // Immediately fire an initial event, indicating all existing listeners\n    // are in-sync.\n    observer.next();\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.delete(observer);\n  }\n\n  // Call all global snapshot listeners that have been set.\n  private raiseSnapshotsInSyncEvent(): void {\n    this.snapshotsInSyncListeners.forEach(observer => {\n      observer.next();\n    });\n  }\n}\n\nexport interface ListenOptions {\n  /** Raise events even when only the metadata changes */\n  readonly includeMetadataChanges?: boolean;\n\n  /**\n   * Wait for a sync with the server when online, but still raise events while\n   * offline.\n   */\n  readonly waitForSyncWhenOnline?: boolean;\n}\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nexport class QueryListener {\n  /**\n   * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n   * observer. This flag is set to true once we've actually raised an event.\n   */\n  private raisedInitialEvent = false;\n\n  private options: ListenOptions;\n\n  private snap: ViewSnapshot | null = null;\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    readonly query: Query,\n    private queryObserver: Observer<ViewSnapshot>,\n    options?: ListenOptions\n  ) {\n    this.options = options || {};\n  }\n\n  /**\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\n   * if applicable (depending on what changed, whether the user has opted into\n   * metadata-only changes, etc.). Returns true if a user-facing event was\n   * indeed raised.\n   */\n  onViewSnapshot(snap: ViewSnapshot): boolean {\n    debugAssert(\n      snap.docChanges.length > 0 || snap.syncStateChanged,\n      'We got a new snapshot with no changes?'\n    );\n\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges: DocumentViewChange[] = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== ChangeType.Metadata) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = new ViewSnapshot(\n        snap.query,\n        snap.docs,\n        snap.oldDocs,\n        docChanges,\n        snap.mutatedKeys,\n        snap.fromCache,\n        snap.syncStateChanged,\n        /* excludesMetadataChanges= */ true\n      );\n    }\n    let raisedEvent = false;\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n\n    this.snap = snap;\n    return raisedEvent;\n  }\n\n  onError(error: Error): void {\n    this.queryObserver.error(error);\n  }\n\n  /** Returns whether a snapshot was raised. */\n  applyOnlineStateChange(onlineState: OnlineState): boolean {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    if (\n      this.snap &&\n      !this.raisedInitialEvent &&\n      this.shouldRaiseInitialEvent(this.snap, onlineState)\n    ) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n    return raisedEvent;\n  }\n\n  private shouldRaiseInitialEvent(\n    snap: ViewSnapshot,\n    onlineState: OnlineState\n  ): boolean {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Determining whether to raise first event but already had first event'\n    );\n\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n\n    // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== OnlineState.Offline;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      debugAssert(\n        snap.fromCache,\n        'Waiting for sync, but snapshot is not from cache'\n      );\n      return false;\n    }\n\n    // Raise data from cache if we have any documents or we are offline\n    return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;\n  }\n\n  private shouldRaiseEvent(snap: ViewSnapshot): boolean {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n\n    const hasPendingWritesChanged =\n      this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    }\n\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n\n  private raiseInitialEvent(snap: ViewSnapshot): void {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Trying to raise initial events for second time'\n    );\n    snap = ViewSnapshot.fromInitialDocuments(\n      snap.query,\n      snap.docs,\n      snap.mutatedKeys,\n      snap.fromCache\n    );\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryEngine } from './query_engine';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport {\n  LimitType,\n  newQueryComparator,\n  Query,\n  queryMatches,\n  stringifyQuery\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document } from '../model/document';\nimport { debugAssert } from '../util/assert';\nimport { getLogLevel, LogLevel, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\n\n// TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.\n\n/**\n * A query engine that takes advantage of the target document mapping in the\n * QueryCache. The IndexFreeQueryEngine optimizes query execution by only\n * reading the documents that previously matched a query plus any documents that were\n * edited after the query was last listened to.\n *\n * There are some cases where Index-Free queries are not guaranteed to produce\n * the same results as full collection scans. In these cases, the\n * IndexFreeQueryEngine falls back to full query processing. These cases are:\n *\n * - Limit queries where a document that matched the query previously no longer\n *   matches the query.\n *\n * - Limit queries where a document edit may cause the document to sort below\n *   another document that is in the local cache.\n *\n * - Queries that have never been CURRENT or free of Limbo documents.\n */\nexport class IndexFreeQueryEngine implements QueryEngine {\n  private localDocumentsView: LocalDocumentsView | undefined;\n\n  setLocalDocumentsView(localDocuments: LocalDocumentsView): void {\n    this.localDocumentsView = localDocuments;\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    lastLimboFreeSnapshotVersion: SnapshotVersion,\n    remoteKeys: DocumentKeySet\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      this.localDocumentsView !== undefined,\n      'setLocalDocumentsView() not called'\n    );\n\n    // Queries that match all documents don't benefit from using\n    // IndexFreeQueries. It is more efficient to scan all documents in a\n    // collection, rather than to perform individual lookups.\n    if (query.matchesAllDocuments()) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    return this.localDocumentsView!.getDocuments(transaction, remoteKeys).next(\n      documents => {\n        const previousResults = this.applyQuery(query, documents);\n\n        if (\n          (query.hasLimitToFirst() || query.hasLimitToLast()) &&\n          this.needsRefill(\n            query.limitType,\n            previousResults,\n            remoteKeys,\n            lastLimboFreeSnapshotVersion\n          )\n        ) {\n          return this.executeFullCollectionScan(transaction, query);\n        }\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          logDebug(\n            'IndexFreeQueryEngine',\n            'Re-using previous result from %s to execute query: %s',\n            lastLimboFreeSnapshotVersion.toString(),\n            stringifyQuery(query)\n          );\n        }\n\n        // Retrieve all results for documents that were updated since the last\n        // limbo-document free remote snapshot.\n        return this.localDocumentsView!.getDocumentsMatchingQuery(\n          transaction,\n          query,\n          lastLimboFreeSnapshotVersion\n        ).next(updatedResults => {\n          // We merge `previousResults` into `updateResults`, since\n          // `updateResults` is already a DocumentMap. If a document is\n          // contained in both lists, then its contents are the same.\n          previousResults.forEach(doc => {\n            updatedResults = updatedResults.insert(doc.key, doc);\n          });\n          return updatedResults;\n        });\n      }\n    );\n  }\n\n  /** Applies the query filter and sorting to the provided documents.  */\n  private applyQuery(\n    query: Query,\n    documents: MaybeDocumentMap\n  ): SortedSet<Document> {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    let queryResults = new SortedSet<Document>(newQueryComparator(query));\n    documents.forEach((_, maybeDoc) => {\n      if (maybeDoc instanceof Document && queryMatches(query, maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  }\n\n  /**\n   * Determines if a limit query needs to be refilled from cache, making it\n   * ineligible for index-free execution.\n   *\n   * @param sortedPreviousResults The documents that matched the query when it\n   * was last synchronized, sorted by the query's comparator.\n   * @param remoteKeys The document keys that matched the query at the last\n   * snapshot.\n   * @param limboFreeSnapshotVersion The version of the snapshot when the query\n   * was last synchronized.\n   */\n  private needsRefill(\n    limitType: LimitType,\n    sortedPreviousResults: SortedSet<Document>,\n    remoteKeys: DocumentKeySet,\n    limboFreeSnapshotVersion: SnapshotVersion\n  ): boolean {\n    // The query needs to be refilled if a previously matching document no\n    // longer matches.\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      return true;\n    }\n\n    // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n    const docAtLimitEdge =\n      limitType === LimitType.First\n        ? sortedPreviousResults.last()\n        : sortedPreviousResults.first();\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n    return (\n      docAtLimitEdge.hasPendingWrites ||\n      docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0\n    );\n  }\n\n  private executeFullCollectionScan(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<DocumentMap> {\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug(\n        'IndexFreeQueryEngine',\n        'Using full collection scan to execute query:',\n        stringifyQuery(query)\n      );\n    }\n\n    return this.localDocumentsView!.getDocumentsMatchingQuery(\n      transaction,\n      query,\n      SnapshotVersion.min()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { isCollectionGroupQuery, Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { MutationBatch, BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\n\nexport class MemoryMutationQueue implements MutationQueue {\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  private mutationQueue: MutationBatch[] = [];\n\n  /** Next value to use when assigning sequential IDs to each mutation batch. */\n  private nextBatchId: BatchId = 1;\n\n  /** An ordered mapping between documents and the mutations batch IDs. */\n  private batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    debugAssert(mutations.length !== 0, 'Mutation batches should not be empty');\n\n    const batchId = this.nextBatchId;\n    this.nextBatchId++;\n\n    if (this.mutationQueue.length > 0) {\n      const prior = this.mutationQueue[this.mutationQueue.length - 1];\n      debugAssert(\n        prior.batchId < batchId,\n        'Mutation batchIDs must be monotonically increasing order'\n      );\n    }\n\n    const batch = new MutationBatch(\n      batchId,\n      localWriteTime,\n      baseMutations,\n      mutations\n    );\n    this.mutationQueue.push(batch);\n\n    // Track references by document key and index collection parents.\n    for (const mutation of mutations) {\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(\n        new DocReference(mutation.key, batchId)\n      );\n\n      this.indexManager.addToCollectionParentIndex(\n        transaction,\n        mutation.key.path.popLast()\n      );\n    }\n\n    return PersistencePromise.resolve(batch);\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n    const rawIndex = this.indexOfBatchId(nextBatchId);\n    const index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(\n      this.mutationQueue.length > index ? this.mutationQueue[index] : null\n    );\n  }\n\n  getHighestUnacknowledgedBatchId(): PersistencePromise<BatchId> {\n    return PersistencePromise.resolve(\n      this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1\n    );\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    const start = new DocReference(documentKey, 0);\n    const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    const result: MutationBatch[] = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n      debugAssert(\n        documentKey.isEqual(ref.key),\n        \"Should only iterate over a single key's batches\"\n      );\n      const batch = this.findMutationBatch(ref.targetOrBatchId);\n      debugAssert(\n        batch !== null,\n        'Batches in the index must exist in the main table'\n      );\n      result.push(batch!);\n    });\n\n    return PersistencePromise.resolve(result);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    documentKeys.forEach(documentKey => {\n      const start = new DocReference(documentKey, 0);\n      const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n      this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n        debugAssert(\n          documentKey.isEqual(ref.key),\n          \"For each key, should only iterate over a single key's batches\"\n        );\n\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !isCollectionGroupQuery(query),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    const prefix = query.path;\n    const immediateChildrenPathLength = prefix.length + 1;\n\n    // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n    let startPath = prefix;\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n\n    const start = new DocReference(new DocumentKey(startPath), 0);\n\n    // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    this.batchesByDocumentKey.forEachWhile(ref => {\n      const rowKeyPath = ref.key.path;\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n        return true;\n      }\n    }, start);\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  private findMutationBatches(batchIDs: SortedSet<number>): MutationBatch[] {\n    // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n    const result: MutationBatch[] = [];\n    batchIDs.forEach(batchId => {\n      const batch = this.findMutationBatch(batchId);\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    // Find the position of the first batch for removal.\n    const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(\n      batchIndex === 0,\n      'Can only remove the first entry of the mutation queue'\n    );\n    this.mutationQueue.shift();\n\n    let references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, (mutation: Mutation) => {\n      const ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return this.referenceDelegate.markPotentiallyOrphaned(\n        transaction,\n        mutation.key\n      );\n    }).next(() => {\n      this.batchesByDocumentKey = references;\n    });\n  }\n\n  removeCachedMutationKeys(batchId: BatchId): void {\n    // No-op since the memory mutation queue does not maintain a separate cache.\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    if (this.mutationQueue.length === 0) {\n      debugAssert(\n        this.batchesByDocumentKey.isEmpty(),\n        'Document leak -- detected dangling mutation references when queue is empty.'\n      );\n    }\n    return PersistencePromise.resolve();\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue and asserts that\n   * the resulting index is within the bounds of the queue.\n   *\n   * @param batchId The batchId to search for\n   * @param action A description of what the caller is doing, phrased in passive\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n   */\n  private indexOfExistingBatchId(batchId: BatchId, action: string): number {\n    const index = this.indexOfBatchId(batchId);\n    debugAssert(\n      index >= 0 && index < this.mutationQueue.length,\n      'Batches must exist to be ' + action\n    );\n    return index;\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue. This operation\n   * is O(1).\n   *\n   * @return The computed index of the batch with the given batchId, based on\n   * the state of the queue. Note this index can be negative if the requested\n   * batchId has already been remvoed from the queue or past the end of the\n   * queue if the batchId is larger than the last added batch.\n   */\n  private indexOfBatchId(batchId: BatchId): number {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    }\n\n    // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n    const firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  }\n\n  /**\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\n   * other functions that uses this code easier to read and more efficent.\n   */\n  private findMutationBatch(batchId: BatchId): MutationBatch | null {\n    const index = this.indexOfBatchId(batchId);\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n\n    const batch = this.mutationQueue[index];\n    debugAssert(batch.batchId === batchId, 'If found batch must match');\n    return batch;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isCollectionGroupQuery, Query, queryMatches } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntry,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\n\nexport type DocumentSizer = (doc: MaybeDocument) => number;\n\n/** Miscellaneous collection types / constants. */\ninterface MemoryRemoteDocumentCacheEntry extends DocumentSizeEntry {\n  readTime: SnapshotVersion;\n}\n\ntype DocumentEntryMap = SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>;\nfunction documentEntryMap(): DocumentEntryMap {\n  return new SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>(\n    DocumentKey.comparator\n  );\n}\n\nexport class MemoryRemoteDocumentCache implements RemoteDocumentCache {\n  /** Underlying cache of documents and their read times. */\n  private docs = documentEntryMap();\n\n  /** Size of all cached documents. */\n  private size = 0;\n\n  /**\n   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just\n   * return 0 to avoid unnecessarily doing the work of calculating the size.\n   */\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly sizer: DocumentSizer\n  ) {}\n\n  /**\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\n   *\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private addEntry(\n    transaction: PersistenceTransaction,\n    doc: MaybeDocument,\n    readTime: SnapshotVersion\n  ): PersistencePromise<void> {\n    debugAssert(\n      !readTime.isEqual(SnapshotVersion.min()),\n      'Cannot add a document with a read time of zero'\n    );\n\n    const key = doc.key;\n    const entry = this.docs.get(key);\n    const previousSize = entry ? entry.size : 0;\n    const currentSize = this.sizer(doc);\n\n    this.docs = this.docs.insert(key, {\n      maybeDocument: doc,\n      size: currentSize,\n      readTime\n    });\n\n    this.size += currentSize - previousSize;\n\n    return this.indexManager.addToCollectionParentIndex(\n      transaction,\n      key.path.popLast()\n    );\n  }\n\n  /**\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\n   *\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private removeEntry(documentKey: DocumentKey): void {\n    const entry = this.docs.get(documentKey);\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    const entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.maybeDocument : null);\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    documentKeys.forEach(documentKey => {\n      const entry = this.docs.get(documentKey);\n      results = results.insert(documentKey, entry ? entry.maybeDocument : null);\n    });\n    return PersistencePromise.resolve(results);\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !isCollectionGroupQuery(query),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const prefix = new DocumentKey(query.path.child(''));\n    const iterator = this.docs.getIteratorFrom(prefix);\n    while (iterator.hasNext()) {\n      const {\n        key,\n        value: { maybeDocument, readTime }\n      } = iterator.getNext();\n      if (!query.path.isPrefixOf(key.path)) {\n        break;\n      }\n      if (readTime.compareTo(sinceReadTime) <= 0) {\n        continue;\n      }\n      if (\n        maybeDocument instanceof Document &&\n        queryMatches(query, maybeDocument)\n      ) {\n        results = results.insert(maybeDocument.key, maybeDocument);\n      }\n    }\n    return PersistencePromise.resolve(results);\n  }\n\n  forEachDocumentKey(\n    transaction: PersistenceTransaction,\n    f: (key: DocumentKey) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(this.docs, (key: DocumentKey) => f(key));\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentCache.RemoteDocumentChangeBuffer(this);\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.size);\n  }\n\n  /**\n   * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\n   */\n  private static RemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n    constructor(private readonly documentCache: MemoryRemoteDocumentCache) {\n      super();\n    }\n\n    protected applyChanges(\n      transaction: PersistenceTransaction\n    ): PersistencePromise<void> {\n      const promises: Array<PersistencePromise<void>> = [];\n      this.changes.forEach((key, doc) => {\n        if (doc) {\n          promises.push(\n            this.documentCache.addEntry(transaction, doc, this.readTime)\n          );\n        } else {\n          this.documentCache.removeEntry(key);\n        }\n      });\n      return PersistencePromise.waitFor(promises);\n    }\n\n    protected getFromCache(\n      transaction: PersistenceTransaction,\n      documentKey: DocumentKey\n    ): PersistencePromise<MaybeDocument | null> {\n      return this.documentCache.getEntry(transaction, documentKey);\n    }\n\n    protected getAllFromCache(\n      transaction: PersistenceTransaction,\n      documentKeys: DocumentKeySet\n    ): PersistencePromise<NullableMaybeDocumentMap> {\n      return this.documentCache.getEntries(transaction, documentKeys);\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, NullableMaybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SnapshotVersion } from '../core/snapshot_version';\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * Entries added to the cache *must* be read first. This is to facilitate\n * calculating the size delta of the pending changes.\n *\n * PORTING NOTE: This class was implemented then removed from other platforms.\n * If byte-counting ends up being needed on the other platforms, consider\n * porting this class as part of that implementation work.\n */\nexport abstract class RemoteDocumentChangeBuffer {\n  // A mapping of document key to the new cache entry that should be written (or null if any\n  // existing cache entry should be removed).\n  protected changes: ObjectMap<\n    DocumentKey,\n    MaybeDocument | null\n  > = new ObjectMap(\n    key => key.toString(),\n    (l, r) => l.isEqual(r)\n  );\n\n  // The read time to use for all added documents in this change buffer.\n  private _readTime: SnapshotVersion | undefined;\n\n  private changesApplied = false;\n\n  protected abstract getFromCache(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null>;\n\n  protected abstract getAllFromCache(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap>;\n\n  protected abstract applyChanges(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<void>;\n\n  protected set readTime(value: SnapshotVersion) {\n    // Right now (for simplicity) we just track a single readTime for all the\n    // added entries since we expect them to all be the same, but we could\n    // rework to store per-entry readTimes if necessary.\n    debugAssert(\n      this._readTime === undefined || this._readTime.isEqual(value),\n      'All changes in a RemoteDocumentChangeBuffer must have the same read time'\n    );\n    this._readTime = value;\n  }\n\n  protected get readTime(): SnapshotVersion {\n    debugAssert(\n      this._readTime !== undefined,\n      'Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used.'\n    );\n    return this._readTime;\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\n   *\n   * You can only modify documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  addEntry(maybeDocument: MaybeDocument, readTime: SnapshotVersion): void {\n    this.assertNotApplied();\n    this.readTime = readTime;\n    this.changes.set(maybeDocument.key, maybeDocument);\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\n   *\n   * You can only remove documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  removeEntry(key: DocumentKey, readTime?: SnapshotVersion): void {\n    this.assertNotApplied();\n    if (readTime) {\n      this.readTime = readTime;\n    }\n    this.changes.set(key, null);\n  }\n\n  /**\n   * Looks up an entry in the cache. The buffered changes will first be checked,\n   * and if no buffered change applies, this will forward to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKey The key of the entry to look up.\n   * @return The cached Document or NoDocument entry, or null if we have nothing\n   * cached.\n   */\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    this.assertNotApplied();\n    const bufferedEntry = this.changes.get(documentKey);\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve<MaybeDocument | null>(bufferedEntry);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  }\n\n  /**\n   * Looks up several entries in the cache, forwarding to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKeys The keys of the entries to look up.\n   * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an\n   *     entry cannot be found, the corresponding key will be mapped to a null\n   *     value.\n   */\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    return this.getAllFromCache(transaction, documentKeys);\n  }\n\n  /**\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\n   * the provided transaction.\n   */\n  apply(transaction: PersistenceTransaction): PersistencePromise<void> {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  }\n\n  /** Helper to assert this.changes is not null  */\n  protected assertNotApplied(): void {\n    debugAssert(!this.changesApplied, 'Changes have already been applied.');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { MemoryPersistence } from './memory_persistence';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { canonifyTarget, Target, targetEquals } from '../core/target';\n\nexport class MemoryTargetCache implements TargetCache {\n  /**\n   * Maps a target to the data about that target\n   */\n  private targets = new ObjectMap<Target, TargetData>(\n    t => canonifyTarget(t),\n    targetEquals\n  );\n\n  /** The last received snapshot version. */\n  private lastRemoteSnapshotVersion = SnapshotVersion.min();\n  /** The highest numbered target ID encountered. */\n  private highestTargetId: TargetId = 0;\n  /** The highest sequence number encountered. */\n  private highestSequenceNumber: ListenSequenceNumber = 0;\n  /**\n   * A ordered bidirectional mapping between documents and the remote target\n   * IDs.\n   */\n  private references = new ReferenceSet();\n\n  private targetCount = 0;\n\n  private targetIdGenerator = TargetIdGenerator.forTargetCache();\n\n  constructor(private readonly persistence: MemoryPersistence) {}\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    this.targets.forEach((_, targetData) => f(targetData));\n    return PersistencePromise.resolve();\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  }\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n    return PersistencePromise.resolve();\n  }\n\n  private saveTargetData(targetData: TargetData): void {\n    this.targets.set(targetData.target, targetData);\n    const targetId = targetData.targetId;\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      !this.targets.has(targetData.target),\n      'Adding a target that already exists'\n    );\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Updating a non-existent target'\n    );\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(this.targetCount > 0, 'Removing a target from an empty cache');\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Removing a non-existent target from the cache'\n    );\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  }\n\n  removeTargets(\n    transaction: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const removals: Array<PersistencePromise<void>> = [];\n    this.targets.forEach((key, targetData) => {\n      if (\n        targetData.sequenceNumber <= upperBound &&\n        activeTargetIds.get(targetData.targetId) === null\n      ) {\n        this.targets.delete(key);\n        removals.push(\n          this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n        );\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(() => count);\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.addReferences(keys, targetId);\n    return PersistencePromise.resolve();\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises: Array<PersistencePromise<void>> = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { logDebug } from '../util/log';\nimport { ObjectMap } from '../util/obj_map';\nimport { encodeResourcePath } from './encoded_resource_path';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { estimateByteSize } from '../model/values';\nimport { MemoryIndexManager } from './memory_index_manager';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nimport { MemoryTargetCache } from './memory_target_cache';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetData } from './target_data';\n\nconst LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nexport class MemoryPersistence implements Persistence {\n  /**\n   * Note that these are retained here to make it easier to write tests\n   * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n   * can create a new LocalStore wrapping this Persistence instance and this\n   * will make the in-memory persistence layer behave as if it were actually\n   * persisting values.\n   */\n  private readonly indexManager: MemoryIndexManager;\n  private mutationQueues: { [user: string]: MemoryMutationQueue } = {};\n  private readonly remoteDocumentCache: MemoryRemoteDocumentCache;\n  private readonly targetCache: MemoryTargetCache;\n  private readonly listenSequence = new ListenSequence(0);\n\n  private _started = false;\n\n  readonly referenceDelegate: MemoryReferenceDelegate;\n\n  /**\n   * The constructor accepts a factory for creating a reference delegate. This\n   * allows both the delegate and this instance to have strong references to\n   * each other without having nullable fields that would then need to be\n   * checked or asserted on every access.\n   */\n  constructor(\n    referenceDelegateFactory: (p: MemoryPersistence) => MemoryReferenceDelegate\n  ) {\n    this._started = true;\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n    const sizer = (doc: MaybeDocument): number =>\n      this.referenceDelegate.documentSize(doc);\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = new MemoryRemoteDocumentCache(\n      this.indexManager,\n      sizer\n    );\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  shutdown(): Promise<void> {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  setDatabaseDeletedListener(): void {\n    // No op.\n  }\n\n  setNetworkEnabled(): void {\n    // No op.\n  }\n\n  getIndexManager(): MemoryIndexManager {\n    return this.indexManager;\n  }\n\n  getMutationQueue(user: User): MutationQueue {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue(\n        this.indexManager,\n        this.referenceDelegate\n      );\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n\n  getTargetCache(): MemoryTargetCache {\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): MemoryRemoteDocumentCache {\n    return this.remoteDocumentCache;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n    const txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn)\n      .next(result => {\n        return this.referenceDelegate\n          .onTransactionCommitted(txn)\n          .next(() => result);\n      })\n      .toPromise()\n      .then(result => {\n        txn.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  mutationQueuesContainKey(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or(\n      Object.values(this.mutationQueues).map(queue => () =>\n        queue.containsKey(transaction, key)\n      )\n    );\n  }\n}\n\n/**\n * Memory persistence is not actually transactional, but future implementations\n * may have transaction-scoped state.\n */\nexport class MemoryTransaction extends PersistenceTransaction {\n  constructor(readonly currentSequenceNumber: ListenSequenceNumber) {\n    super();\n  }\n}\n\nexport interface MemoryReferenceDelegate extends ReferenceDelegate {\n  documentSize(doc: MaybeDocument): number;\n  onTransactionStarted(): void;\n  onTransactionCommitted(txn: PersistenceTransaction): PersistencePromise<void>;\n}\n\nexport class MemoryEagerDelegate implements MemoryReferenceDelegate {\n  /** Tracks all documents that are active in Query views. */\n  private localViewReferences: ReferenceSet = new ReferenceSet();\n  /** The list of documents that are potentially GCed after each transaction. */\n  private _orphanedDocuments: Set<DocumentKey> | null = null;\n\n  private constructor(private readonly persistence: MemoryPersistence) {}\n\n  static factory(persistence: MemoryPersistence): MemoryEagerDelegate {\n    return new MemoryEagerDelegate(persistence);\n  }\n\n  private get orphanedDocuments(): Set<DocumentKey> {\n    if (!this._orphanedDocuments) {\n      throw fail('orphanedDocuments is only valid during a transaction.');\n    } else {\n      return this._orphanedDocuments;\n    }\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.localViewReferences.addReference(key, targetId);\n    this.orphanedDocuments.delete(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.localViewReferences.removeReference(key, targetId);\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const orphaned = this.localViewReferences.removeReferencesForId(\n      targetData.targetId\n    );\n    orphaned.forEach(key => this.orphanedDocuments.add(key));\n    const cache = this.persistence.getTargetCache();\n    return cache\n      .getMatchingKeysForTargetId(txn, targetData.targetId)\n      .next(keys => {\n        keys.forEach(key => this.orphanedDocuments.add(key));\n      })\n      .next(() => cache.removeTargetData(txn, targetData));\n  }\n\n  onTransactionStarted(): void {\n    this._orphanedDocuments = new Set<DocumentKey>();\n  }\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    // Remove newly orphaned documents.\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(\n      this.orphanedDocuments,\n      (key: DocumentKey) => {\n        return this.isReferenced(txn, key).next(isReferenced => {\n          if (!isReferenced) {\n            changeBuffer.removeEntry(key);\n          }\n        });\n      }\n    ).next(() => {\n      this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return this.isReferenced(txn, key).next(isReferenced => {\n      if (isReferenced) {\n        this.orphanedDocuments.delete(key);\n      } else {\n        this.orphanedDocuments.add(key);\n      }\n    });\n  }\n\n  documentSize(doc: MaybeDocument): number {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  }\n\n  private isReferenced(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () =>\n        PersistencePromise.resolve(this.localViewReferences.containsKey(key)),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => this.persistence.mutationQueuesContainKey(txn, key)\n    ]);\n  }\n}\n\nexport class MemoryLruDelegate implements ReferenceDelegate, LruDelegate {\n  private orphanedSequenceNumbers: ObjectMap<\n    DocumentKey,\n    ListenSequenceNumber\n  > = new ObjectMap(\n    k => encodeResourcePath(k.path),\n    (l, r) => l.isEqual(r)\n  );\n\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(\n    private readonly persistence: MemoryPersistence,\n    lruParams: LruParams\n  ) {\n    this.garbageCollector = new LruGarbageCollector(this, lruParams);\n  }\n\n  // No-ops, present so memory persistence doesn't have to care which delegate\n  // it has.\n  onTransactionStarted(): void {}\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return PersistencePromise.resolve();\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.persistence.getTargetCache().forEachTarget(txn, f);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.persistence\n      .getTargetCache()\n      .getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(\n      this.orphanedSequenceNumbers,\n      (key, sequenceNumber) => {\n        // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\n        // being too recent.\n        return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\n          if (!isPinned) {\n            return f(sequenceNumber);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        });\n      }\n    );\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.persistence\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    let count = 0;\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    const p = cache.forEachDocumentKey(txn, key => {\n      return this.isPinned(txn, key, upperBound).next(isPinned => {\n        if (!isPinned) {\n          count++;\n          changeBuffer.removeEntry(key);\n        }\n      });\n    });\n    return p.next(() => changeBuffer.apply(txn)).next(() => count);\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  documentSize(maybeDoc: MaybeDocument): number {\n    let documentSize = maybeDoc.key.toString().length;\n    if (maybeDoc instanceof Document) {\n      documentSize += estimateByteSize(maybeDoc.toProto());\n    }\n    return documentSize;\n  }\n\n  private isPinned(\n    txn: PersistenceTransaction,\n    key: DocumentKey,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () => this.persistence.mutationQueuesContainKey(txn, key),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => {\n        const orphanedAt = this.orphanedSequenceNumbers.get(key);\n        return PersistencePromise.resolve(\n          orphanedAt !== undefined && orphanedAt > upperBound\n        );\n      }\n    ]);\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.persistence.getRemoteDocumentCache().getSize(txn);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\n\nimport { Stream } from './connection';\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nexport class StreamBridge<I, O> implements Stream<I, O> {\n  private wrappedOnOpen: (() => void) | undefined;\n  private wrappedOnClose: ((err?: FirestoreError) => void) | undefined;\n  private wrappedOnMessage: ((msg: O) => void) | undefined;\n\n  private sendFn: (msg: I) => void;\n  private closeFn: () => void;\n\n  constructor(args: { sendFn: (msg: I) => void; closeFn: () => void }) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  onOpen(callback: () => void): void {\n    debugAssert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  }\n\n  onClose(callback: (err?: FirestoreError) => void): void {\n    debugAssert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  }\n\n  onMessage(callback: (msg: O) => void): void {\n    debugAssert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  }\n\n  close(): void {\n    this.closeFn();\n  }\n\n  send(msg: I): void {\n    this.sendFn(msg);\n  }\n\n  callOnOpen(): void {\n    debugAssert(\n      this.wrappedOnOpen !== undefined,\n      'Cannot call onOpen because no callback was set'\n    );\n    this.wrappedOnOpen();\n  }\n\n  callOnClose(err?: FirestoreError): void {\n    debugAssert(\n      this.wrappedOnClose !== undefined,\n      'Cannot call onClose because no callback was set'\n    );\n    this.wrappedOnClose(err);\n  }\n\n  callOnMessage(msg: O): void {\n    debugAssert(\n      this.wrappedOnMessage !== undefined,\n      'Cannot call onMessage because no callback was set'\n    );\n    this.wrappedOnMessage(msg);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createWebChannelTransport,\n  ErrorCode,\n  EventType,\n  WebChannel,\n  WebChannelError,\n  WebChannelOptions,\n  XhrIo\n} from '@firebase/webchannel-wrapper';\n\nimport {\n  isBrowserExtension,\n  isElectron,\n  isIE,\n  isMobileCordova,\n  isReactNative,\n  isUWP\n} from '@firebase/util';\n\nimport { Token } from '../../api/credentials';\nimport { DatabaseId, DatabaseInfo } from '../../core/database_info';\nimport { SDK_VERSION } from '../../core/version';\nimport { Connection, Stream } from '../../remote/connection';\nimport {\n  mapCodeFromRpcStatus,\n  mapCodeFromHttpResponseErrorStatus\n} from '../../remote/rpc_error';\nimport { StreamBridge } from '../../remote/stream_bridge';\nimport { debugAssert, fail, hardAssert } from '../../util/assert';\nimport { Code, FirestoreError } from '../../util/error';\nimport { logDebug, logWarn } from '../../util/log';\nimport { Indexable } from '../../util/misc';\nimport { Rejecter, Resolver } from '../../util/promise';\nimport { StringMap } from '../../util/types';\n\nconst LOG_TAG = 'Connection';\n\nconst RPC_STREAM_SERVICE = 'google.firestore.v1.Firestore';\nconst RPC_URL_VERSION = 'v1';\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n * Uses Object Literal notation to avoid renaming.\n */\nconst RPC_NAME_REST_MAPPING: { [key: string]: string } = {};\nRPC_NAME_REST_MAPPING['BatchGetDocuments'] = 'batchGet';\nRPC_NAME_REST_MAPPING['Commit'] = 'commit';\nRPC_NAME_REST_MAPPING['RunQuery'] = 'runQuery';\n\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nconst X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\n\nconst XHR_TIMEOUT_SECS = 15;\n\nexport class WebChannelConnection implements Connection {\n  private readonly databaseId: DatabaseId;\n  private readonly baseUrl: string;\n  private readonly forceLongPolling: boolean;\n\n  constructor(info: DatabaseInfo) {\n    this.databaseId = info.databaseId;\n    const proto = info.ssl ? 'https' : 'http';\n    this.baseUrl = proto + '://' + info.host;\n    this.forceLongPolling = info.forceLongPolling;\n  }\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  private modifyHeadersForRequest(\n    headers: StringMap,\n    token: Token | null\n  ): void {\n    if (token) {\n      for (const header in token.authHeaders) {\n        if (token.authHeaders.hasOwnProperty(header)) {\n          headers[header] = token.authHeaders[header];\n        }\n      }\n    }\n    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const url = this.makeUrl(rpcName);\n\n    return new Promise((resolve: Resolver<Resp>, reject: Rejecter) => {\n      const xhr = new XhrIo();\n      xhr.listenOnce(EventType.COMPLETE, () => {\n        try {\n          switch (xhr.getLastErrorCode()) {\n            case ErrorCode.NO_ERROR:\n              const json = xhr.getResponseJson() as Resp;\n              logDebug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n              resolve(json);\n              break;\n            case ErrorCode.TIMEOUT:\n              logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n              reject(\n                new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out')\n              );\n              break;\n            case ErrorCode.HTTP_ERROR:\n              const status = xhr.getStatus();\n              logDebug(\n                LOG_TAG,\n                'RPC \"' + rpcName + '\" failed with status:',\n                status,\n                'response text:',\n                xhr.getResponseText()\n              );\n              if (status > 0) {\n                const responseError = (xhr.getResponseJson() as WebChannelError)\n                  .error;\n                if (\n                  !!responseError &&\n                  !!responseError.status &&\n                  !!responseError.message\n                ) {\n                  const firestoreErrorCode = mapCodeFromHttpResponseErrorStatus(\n                    responseError.status\n                  );\n                  reject(\n                    new FirestoreError(\n                      firestoreErrorCode,\n                      responseError.message\n                    )\n                  );\n                } else {\n                  reject(\n                    new FirestoreError(\n                      Code.UNKNOWN,\n                      'Server responded with status ' + xhr.getStatus()\n                    )\n                  );\n                }\n              } else {\n                // If we received an HTTP_ERROR but there's no status code,\n                // it's most probably a connection issue\n                logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                reject(\n                  new FirestoreError(Code.UNAVAILABLE, 'Connection failed.')\n                );\n              }\n              break;\n            default:\n              fail(\n                'RPC \"' +\n                  rpcName +\n                  '\" failed with unanticipated ' +\n                  'webchannel error ' +\n                  xhr.getLastErrorCode() +\n                  ': ' +\n                  xhr.getLastError() +\n                  ', giving up.'\n              );\n          }\n        } finally {\n          logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n        }\n      });\n\n      // The database field is already encoded in URL. Specifying it again in\n      // the body is not necessary in production, and will cause duplicate field\n      // errors in the Firestore Emulator. Let's remove it.\n      const jsonObj = ({ ...request } as unknown) as Indexable;\n      delete jsonObj.database;\n\n      const requestString = JSON.stringify(jsonObj);\n      logDebug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n      // Content-Type: text/plain will avoid preflight requests which might\n      // mess with CORS and redirects by proxies. If we add custom headers\n      // we will need to change this code to potentially use the\n      // $httpOverwrite parameter supported by ESF to avoid\n      // triggering preflight requests.\n      const headers: StringMap = { 'Content-Type': 'text/plain' };\n\n      this.modifyHeadersForRequest(headers, token);\n\n      xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n    });\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(rpcName, request, token);\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    const urlParts = [\n      this.baseUrl,\n      '/',\n      RPC_STREAM_SERVICE,\n      '/',\n      rpcName,\n      '/channel'\n    ];\n    const webchannelTransport = createWebChannelTransport();\n    const request: WebChannelOptions = {\n      // Required for backend stickiness, routing behavior is based on this\n      // parameter.\n      httpSessionIdParam: 'gsessionid',\n      initMessageHeaders: {},\n      messageUrlParams: {\n        // This param is used to improve routing and project isolation by the\n        // backend and must be included in every request.\n        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`\n      },\n      sendRawJson: true,\n      supportsCrossDomainXhr: true,\n      internalChannelParams: {\n        // Override the default timeout (randomized between 10-20 seconds) since\n        // a large write batch on a slow internet connection may take a long\n        // time to send to the backend. Rather than have WebChannel impose a\n        // tight timeout which could lead to infinite timeouts and retries, we\n        // set it very large (5-10 minutes) and rely on the browser's builtin\n        // timeouts to kick in if the request isn't working.\n        forwardChannelRequestTimeoutMs: 10 * 60 * 1000\n      },\n      forceLongPolling: this.forceLongPolling\n    };\n\n    this.modifyHeadersForRequest(request.initMessageHeaders!, token);\n\n    // Sending the custom headers we just added to request.initMessageHeaders\n    // (Authorization, etc.) will trigger the browser to make a CORS preflight\n    // request because the XHR will no longer meet the criteria for a \"simple\"\n    // CORS request:\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\n    //\n    // Therefore to avoid the CORS preflight request (an extra network\n    // roundtrip), we use the httpHeadersOverwriteParam option to specify that\n    // the headers should instead be encoded into a special \"$httpHeaders\" query\n    // parameter, which is recognized by the webchannel backend. This is\n    // formally defined here:\n    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32\n    //\n    // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request\n    // doesn't have an Origin header. So we have to exclude a few browser environments that are\n    // known to (sometimes) not include an Origin. See\n    // https://github.com/firebase/firebase-js-sdk/issues/1491.\n    if (\n      !isMobileCordova() &&\n      !isReactNative() &&\n      !isElectron() &&\n      !isIE() &&\n      !isUWP() &&\n      !isBrowserExtension()\n    ) {\n      request.httpHeadersOverwriteParam = '$httpHeaders';\n    }\n\n    const url = urlParts.join('');\n    logDebug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n    const channel = webchannelTransport.createWebChannel(url, request);\n\n    // WebChannel supports sending the first message with the handshake - saving\n    // a network round trip. However, it will have to call send in the same\n    // JS event loop as open. In order to enforce this, we delay actually\n    // opening the WebChannel until send is called. Whether we have called\n    // open is tracked with this variable.\n    let opened = false;\n\n    // A flag to determine whether the stream was closed (by us or through an\n    // error/close event) to avoid delivering multiple close events or sending\n    // on a closed stream\n    let closed = false;\n\n    const streamBridge = new StreamBridge<Req, Resp>({\n      sendFn: (msg: Req) => {\n        if (!closed) {\n          if (!opened) {\n            logDebug(LOG_TAG, 'Opening WebChannel transport.');\n            channel.open();\n            opened = true;\n          }\n          logDebug(LOG_TAG, 'WebChannel sending:', msg);\n          channel.send(msg);\n        } else {\n          logDebug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n        }\n      },\n      closeFn: () => channel.close()\n    });\n\n    // Closure events are guarded and exceptions are swallowed, so catch any\n    // exception and rethrow using a setTimeout so they become visible again.\n    // Note that eventually this function could go away if we are confident\n    // enough the code is exception free.\n    const unguardedEventListen = <T>(\n      type: string,\n      fn: (param?: T) => void\n    ): void => {\n      // TODO(dimond): closure typing seems broken because WebChannel does\n      // not implement goog.events.Listenable\n      channel.listen(type, (param: unknown) => {\n        try {\n          fn(param as T);\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          }, 0);\n        }\n      });\n    };\n\n    unguardedEventListen(WebChannel.EventType.OPEN, () => {\n      if (!closed) {\n        logDebug(LOG_TAG, 'WebChannel transport opened.');\n      }\n    });\n\n    unguardedEventListen(WebChannel.EventType.CLOSE, () => {\n      if (!closed) {\n        closed = true;\n        logDebug(LOG_TAG, 'WebChannel transport closed');\n        streamBridge.callOnClose();\n      }\n    });\n\n    unguardedEventListen<Error>(WebChannel.EventType.ERROR, err => {\n      if (!closed) {\n        closed = true;\n        logWarn(LOG_TAG, 'WebChannel transport errored:', err);\n        streamBridge.callOnClose(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'The operation could not be completed'\n          )\n        );\n      }\n    });\n\n    // WebChannel delivers message events as array. If batching is not enabled\n    // (it's off by default) each message will be delivered alone, resulting in\n    // a single element array.\n    interface WebChannelResponse {\n      data: Resp[];\n    }\n\n    unguardedEventListen<WebChannelResponse>(\n      WebChannel.EventType.MESSAGE,\n      msg => {\n        if (!closed) {\n          const msgData = msg!.data[0];\n          hardAssert(!!msgData, 'Got a webchannel message without data.');\n          // TODO(b/35143891): There is a bug in One Platform that caused errors\n          // (and only errors) to be wrapped in an extra array. To be forward\n          // compatible with the bug we need to check either condition. The latter\n          // can be removed once the fix has been rolled out.\n          // Use any because msgData.error is not typed.\n          const msgDataOrError: WebChannelError | object = msgData;\n          const error =\n            msgDataOrError.error ||\n            (msgDataOrError as WebChannelError[])[0]?.error;\n          if (error) {\n            logDebug(LOG_TAG, 'WebChannel received error:', error);\n            // error.status will be a string like 'OK' or 'NOT_FOUND'.\n            const status: string = error.status;\n            let code = mapCodeFromRpcStatus(status);\n            let message = error.message;\n            if (code === undefined) {\n              code = Code.INTERNAL;\n              message =\n                'Unknown error status: ' +\n                status +\n                ' with message ' +\n                error.message;\n            }\n            // Mark closed so no further events are propagated\n            closed = true;\n            streamBridge.callOnClose(new FirestoreError(code, message));\n            channel.close();\n          } else {\n            logDebug(LOG_TAG, 'WebChannel received:', msgData);\n            streamBridge.callOnMessage(msgData);\n          }\n        }\n      }\n    );\n\n    setTimeout(() => {\n      // Technically we could/should wait for the WebChannel opened event,\n      // but because we want to send the first message with the WebChannel\n      // handshake we pretend the channel opened here (asynchronously), and\n      // then delay the actual open until the first message is sent.\n      streamBridge.callOnOpen();\n    }, 0);\n    return streamBridge;\n  }\n\n  // visible for testing\n  makeUrl(rpcName: string): string {\n    const urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n    debugAssert(\n      urlRpcName !== undefined,\n      'Unknown REST mapping for: ' + rpcName\n    );\n    return (\n      this.baseUrl +\n      '/' +\n      RPC_URL_VERSION +\n      '/projects/' +\n      this.databaseId.projectId +\n      '/databases/' +\n      this.databaseId.database +\n      '/documents:' +\n      urlRpcName\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logDebug } from '../../util/log';\nimport {\n  ConnectivityMonitor,\n  ConnectivityMonitorCallback,\n  NetworkStatus\n} from '../../remote/connectivity_monitor';\n\n// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'ConnectivityMonitor';\n\n/**\n * Browser implementation of ConnectivityMonitor.\n */\nexport class BrowserConnectivityMonitor implements ConnectivityMonitor {\n  private readonly networkAvailableListener = (): void =>\n    this.onNetworkAvailable();\n  private readonly networkUnavailableListener = (): void =>\n    this.onNetworkUnavailable();\n  private callbacks: ConnectivityMonitorCallback[] = [];\n\n  constructor() {\n    this.configureNetworkMonitoring();\n  }\n\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    this.callbacks.push(callback);\n  }\n\n  shutdown(): void {\n    window.removeEventListener('online', this.networkAvailableListener);\n    window.removeEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private configureNetworkMonitoring(): void {\n    window.addEventListener('online', this.networkAvailableListener);\n    window.addEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private onNetworkAvailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: AVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.AVAILABLE);\n    }\n  }\n\n  private onNetworkUnavailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: UNAVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.UNAVAILABLE);\n    }\n  }\n\n  // TODO(chenbrian): Consider passing in window either into this component or\n  // here for testing via FakeWindow.\n  /** Checks that all used attributes of window are available. */\n  static isAvailable(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      window.addEventListener !== undefined &&\n      window.removeEventListener !== undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\n\nexport class NoopConnectivityMonitor implements ConnectivityMonitor {\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    // No-op.\n  }\n\n  shutdown(): void {\n    // No-op.\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ClientId,\n  MemorySharedClientState,\n  SharedClientState,\n  WebStorageSharedClientState\n} from '../local/shared_client_state';\nimport {\n  LocalStore,\n  newLocalStore,\n  synchronizeLastDocumentChangeReadTime\n} from '../local/local_store';\nimport {\n  applyActiveTargetsChange,\n  applyBatchState,\n  applyPrimaryState,\n  applyTargetState,\n  getActiveClients,\n  newSyncEngine,\n  SyncEngine\n} from './sync_engine';\nimport { RemoteStore } from '../remote/remote_store';\nimport { EventManager } from './event_manager';\nimport { AsyncQueue } from '../util/async_queue';\nimport { DatabaseId, DatabaseInfo } from './database_info';\nimport { Datastore, newDatastore } from '../remote/datastore';\nimport { User } from '../auth/user';\nimport { PersistenceSettings } from './firestore_client';\nimport { debugAssert } from '../util/assert';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Code, FirestoreError } from '../util/error';\nimport { OnlineStateSource } from './types';\nimport { LruParams, LruScheduler } from '../local/lru_garbage_collector';\nimport { IndexFreeQueryEngine } from '../local/index_free_query_engine';\nimport {\n  indexedDbClearPersistence,\n  IndexedDbPersistence,\n  indexedDbStoragePrefix\n} from '../local/indexeddb_persistence';\nimport {\n  MemoryEagerDelegate,\n  MemoryPersistence\n} from '../local/memory_persistence';\nimport { newConnection, newConnectivityMonitor } from '../platform/connection';\nimport { newSerializer } from '../platform/serializer';\nimport { getDocument, getWindow } from '../platform/dom';\nimport { CredentialsProvider } from '../api/credentials';\nimport { Connection } from '../remote/connection';\n\nconst MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE =\n  'You are using the memory-only build of Firestore. Persistence support is ' +\n  'only available via the @firebase/firestore bundle or the ' +\n  'firebase-firestore.js build.';\n\nexport interface ComponentConfiguration {\n  asyncQueue: AsyncQueue;\n  databaseInfo: DatabaseInfo;\n  credentials: CredentialsProvider;\n  clientId: ClientId;\n  initialUser: User;\n  maxConcurrentLimboResolutions: number;\n  persistenceSettings: PersistenceSettings;\n}\n\n/**\n * Initializes and wires up all core components for Firestore. Implementations\n * override `initialize()` to provide all components.\n */\nexport interface ComponentProvider {\n  persistence: Persistence;\n  sharedClientState: SharedClientState;\n  localStore: LocalStore;\n  syncEngine: SyncEngine;\n  gcScheduler: GarbageCollectionScheduler | null;\n  datastore: Datastore;\n  remoteStore: RemoteStore;\n  eventManager: EventManager;\n\n  initialize(cfg: ComponentConfiguration): Promise<void>;\n\n  clearPersistence(\n    databaseId: DatabaseId,\n    persistenceKey: string\n  ): Promise<void>;\n}\n\n/**\n * Provides all components needed for Firestore with in-memory persistence.\n * Uses EagerGC garbage collection.\n */\nexport class MemoryComponentProvider implements ComponentProvider {\n  persistence!: Persistence;\n  sharedClientState!: SharedClientState;\n  localStore!: LocalStore;\n  syncEngine!: SyncEngine;\n  gcScheduler!: GarbageCollectionScheduler | null;\n  datastore!: Datastore;\n  remoteStore!: RemoteStore;\n  eventManager!: EventManager;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    this.sharedClientState = this.createSharedClientState(cfg);\n    this.persistence = this.createPersistence(cfg);\n    await this.persistence.start();\n    this.gcScheduler = this.createGarbageCollectionScheduler(cfg);\n    this.localStore = this.createLocalStore(cfg);\n\n    this.datastore = this.createDatastore(cfg);\n    const connection = await this.loadConnection(cfg);\n    this.datastore.start(connection);\n\n    this.remoteStore = this.createRemoteStore(cfg);\n    this.syncEngine = this.createSyncEngine(cfg);\n    this.eventManager = this.createEventManager(cfg);\n\n    this.sharedClientState.onlineStateHandler = onlineState =>\n      this.syncEngine.applyOnlineStateChange(\n        onlineState,\n        OnlineStateSource.SharedClientState\n      );\n    this.remoteStore.syncEngine = this.syncEngine;\n\n    await this.sharedClientState.start();\n    await this.remoteStore.start();\n\n    await this.remoteStore.applyPrimaryState(this.syncEngine.isPrimaryClient);\n  }\n\n  protected loadConnection(cfg: ComponentConfiguration): Promise<Connection> {\n    return newConnection(cfg.databaseInfo);\n  }\n\n  createEventManager(cfg: ComponentConfiguration): EventManager {\n    return new EventManager(this.syncEngine);\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    return null;\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return newLocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    if (cfg.persistenceSettings.durable) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n      );\n    }\n    return new MemoryPersistence(MemoryEagerDelegate.factory);\n  }\n\n  createDatastore(cfg: ComponentConfiguration): Datastore {\n    const serializer = newSerializer(cfg.databaseInfo.databaseId);\n    return newDatastore(cfg.credentials, serializer);\n  }\n\n  createRemoteStore(cfg: ComponentConfiguration): RemoteStore {\n    return new RemoteStore(\n      this.localStore,\n      this.datastore,\n      cfg.asyncQueue,\n      onlineState =>\n        this.syncEngine.applyOnlineStateChange(\n          onlineState,\n          OnlineStateSource.RemoteStore\n        ),\n      newConnectivityMonitor()\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    return new MemorySharedClientState();\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    return newSyncEngine(\n      this.localStore,\n      this.remoteStore,\n      this.datastore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions,\n      /* isPrimary= */ true\n    );\n  }\n\n  clearPersistence(\n    databaseId: DatabaseId,\n    persistenceKey: string\n  ): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n}\n\n/**\n * Provides all components needed for Firestore with IndexedDB persistence.\n */\nexport class IndexedDbComponentProvider extends MemoryComponentProvider {\n  persistence!: IndexedDbPersistence;\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return newLocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    const garbageCollector = this.persistence.referenceDelegate\n      .garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue);\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    debugAssert(\n      cfg.persistenceSettings.durable,\n      'Can only start durable persistence'\n    );\n\n    const persistenceKey = indexedDbStoragePrefix(\n      cfg.databaseInfo.databaseId,\n      cfg.databaseInfo.persistenceKey\n    );\n    const serializer = newSerializer(cfg.databaseInfo.databaseId);\n    return new IndexedDbPersistence(\n      cfg.persistenceSettings.synchronizeTabs,\n      persistenceKey,\n      cfg.clientId,\n      LruParams.withCacheSize(cfg.persistenceSettings.cacheSizeBytes),\n      cfg.asyncQueue,\n      getWindow(),\n      getDocument(),\n      serializer,\n      this.sharedClientState,\n      cfg.persistenceSettings.forceOwningTab\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    return new MemorySharedClientState();\n  }\n\n  clearPersistence(\n    databaseId: DatabaseId,\n    persistenceKey: string\n  ): Promise<void> {\n    return indexedDbClearPersistence(\n      indexedDbStoragePrefix(databaseId, persistenceKey)\n    );\n  }\n}\n\n/**\n * Provides all components needed for Firestore with multi-tab IndexedDB\n * persistence.\n *\n * In the legacy client, this provider is used to provide both multi-tab and\n * non-multi-tab persistence since we cannot tell at build time whether\n * `synchronizeTabs` will be enabled.\n */\nexport class MultiTabIndexedDbComponentProvider extends IndexedDbComponentProvider {\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    await super.initialize(cfg);\n\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(async isPrimary => {\n      await applyPrimaryState(this.syncEngine, isPrimary);\n      if (this.gcScheduler) {\n        if (isPrimary && !this.gcScheduler.started) {\n          this.gcScheduler.start(this.localStore);\n        } else if (!isPrimary) {\n          this.gcScheduler.stop();\n        }\n      }\n    });\n\n    // In multi-tab mode, we need to read the last document change marker from\n    // persistence once during client initialization. The next call to\n    // `getNewDocumentChanges()` will then only read changes that were persisted\n    // since client startup.\n    await synchronizeLastDocumentChangeReadTime(this.localStore);\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    const startsAsPrimary =\n      !cfg.persistenceSettings.durable ||\n      !cfg.persistenceSettings.synchronizeTabs;\n    const syncEngine = newSyncEngine(\n      this.localStore,\n      this.remoteStore,\n      this.datastore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions,\n      startsAsPrimary\n    );\n    if (this.sharedClientState instanceof WebStorageSharedClientState) {\n      this.sharedClientState.syncEngine = {\n        applyBatchState: applyBatchState.bind(null, syncEngine),\n        applyTargetState: applyTargetState.bind(null, syncEngine),\n        applyActiveTargetsChange: applyActiveTargetsChange.bind(\n          null,\n          syncEngine\n        ),\n        getActiveClients: getActiveClients.bind(null, syncEngine)\n      };\n    }\n    return syncEngine;\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    if (\n      cfg.persistenceSettings.durable &&\n      cfg.persistenceSettings.synchronizeTabs\n    ) {\n      const window = getWindow();\n      if (!WebStorageSharedClientState.isAvailable(window)) {\n        throw new FirestoreError(\n          Code.UNIMPLEMENTED,\n          'IndexedDB persistence is only available on platforms that support LocalStorage.'\n        );\n      }\n      const persistenceKey = indexedDbStoragePrefix(\n        cfg.databaseInfo.databaseId,\n        cfg.databaseInfo.persistenceKey\n      );\n      return new WebStorageSharedClientState(\n        window,\n        cfg.asyncQueue,\n        persistenceKey,\n        cfg.clientId,\n        cfg.initialUser\n      );\n    }\n    return new MemorySharedClientState();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebChannelConnection } from './webchannel_connection';\nimport { DatabaseInfo } from '../../core/database_info';\nimport { Connection } from '../../remote/connection';\nimport { ConnectivityMonitor } from '../../remote/connectivity_monitor';\nimport { BrowserConnectivityMonitor } from './connectivity_monitor';\nimport { NoopConnectivityMonitor } from '../../remote/connectivity_monitor_noop';\n\n/** Initializes the WebChannelConnection for the browser. */\nexport function newConnection(databaseInfo: DatabaseInfo): Promise<Connection> {\n  return Promise.resolve(new WebChannelConnection(databaseInfo));\n}\n\n/** Return the Platform-specific connectivity monitor. */\nexport function newConnectivityMonitor(): ConnectivityMonitor {\n  if (BrowserConnectivityMonitor.isAvailable()) {\n    return new BrowserConnectivityMonitor();\n  } else {\n    return new NoopConnectivityMonitor();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { User } from '../auth/user';\nimport { LocalStore } from '../local/local_store';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { RemoteStore } from '../remote/remote_store';\nimport { AsyncQueue, wrapInUserErrorIfRecoverable } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport {\n  EventManager,\n  ListenOptions,\n  Observer,\n  QueryListener\n} from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { View } from './view';\n\nimport { SharedClientState } from '../local/shared_client_state';\nimport { AutoId } from '../util/misc';\nimport { DatabaseId, DatabaseInfo } from './database_info';\nimport { Query } from './query';\nimport { Transaction } from './transaction';\nimport { ViewSnapshot } from './view_snapshot';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from './component_provider';\n\nconst LOG_TAG = 'FirestoreClient';\nconst MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n\n/** DOMException error code constants. */\nconst DOM_EXCEPTION_INVALID_STATE = 11;\nconst DOM_EXCEPTION_ABORTED = 20;\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n\nexport type PersistenceSettings =\n  | {\n      readonly durable: false;\n    }\n  | {\n      readonly durable: true;\n      readonly cacheSizeBytes: number;\n      readonly synchronizeTabs: boolean;\n      readonly forceOwningTab: boolean;\n    };\n\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nexport class FirestoreClient {\n  // NOTE: These should technically have '|undefined' in the types, since\n  // they're initialized asynchronously rather than in the constructor, but\n  // given that all work is done on the async queue and we assert that\n  // initialization completes before any other work is queued, we're cheating\n  // with the types rather than littering the code with '!' or unnecessary\n  // undefined checks.\n  private databaseInfo!: DatabaseInfo;\n  private eventMgr!: EventManager;\n  private persistence!: Persistence;\n  private localStore!: LocalStore;\n  private remoteStore!: RemoteStore;\n  private syncEngine!: SyncEngine;\n  private gcScheduler!: GarbageCollectionScheduler | null;\n\n  // PORTING NOTE: SharedClientState is only used for multi-tab web.\n  private sharedClientState!: SharedClientState;\n\n  private readonly clientId = AutoId.newId();\n\n  constructor(\n    private credentials: CredentialsProvider,\n    /**\n     * Asynchronous queue responsible for all of our internal processing. When\n     * we get incoming work from the user (via public API) or the network\n     * (incoming GRPC messages), we should always schedule onto this queue.\n     * This ensures all of our work is properly serialized (e.g. we don't\n     * start processing a new operation while the previous one is waiting for\n     * an async I/O to complete).\n     */\n    private asyncQueue: AsyncQueue\n  ) {}\n\n  /**\n   * Starts up the FirestoreClient, returning only whether or not enabling\n   * persistence succeeded.\n   *\n   * The intent here is to \"do the right thing\" as far as users are concerned.\n   * Namely, in cases where offline persistence is requested and possible,\n   * enable it, but otherwise fall back to persistence disabled. For the most\n   * part we expect this to succeed one way or the other so we don't expect our\n   * users to actually wait on the firestore.enablePersistence Promise since\n   * they generally won't care.\n   *\n   * Of course some users actually do care about whether or not persistence\n   * was successfully enabled, so the Promise returned from this method\n   * indicates this outcome.\n   *\n   * This presents a problem though: even before enablePersistence resolves or\n   * rejects, users may have made calls to e.g. firestore.collection() which\n   * means that the FirestoreClient in there will be available and will be\n   * enqueuing actions on the async queue.\n   *\n   * Meanwhile any failure of an operation on the async queue causes it to\n   * panic and reject any further work, on the premise that unhandled errors\n   * are fatal.\n   *\n   * Consequently the fallback is handled internally here in start, and if the\n   * fallback succeeds we signal success to the async queue even though the\n   * start() itself signals failure.\n   *\n   * @param databaseInfo The connection information for the current instance.\n   * @param componentProvider Provider that returns all core components.\n   * @param persistenceSettings Settings object to configure offline\n   *     persistence.\n   * @returns A deferred result indicating the user-visible result of enabling\n   *     offline persistence. This method will reject this if IndexedDB fails to\n   *     start for any reason. If usePersistence is false this is\n   *     unconditionally resolved.\n   */\n  start(\n    databaseInfo: DatabaseInfo,\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    this.verifyNotTerminated();\n\n    this.databaseInfo = databaseInfo;\n\n    // We defer our initialization until we get the current user from\n    // setChangeListener(). We block the async queue until we got the initial\n    // user and the initialization is completed. This will prevent any scheduled\n    // work from happening before initialization is completed.\n    //\n    // If initializationDone resolved then the FirestoreClient is in a usable\n    // state.\n    const initializationDone = new Deferred<void>();\n\n    // If usePersistence is true, certain classes of errors while starting are\n    // recoverable but only by falling back to persistence disabled.\n    //\n    // If there's an error in the first case but not in recovery we cannot\n    // reject the promise blocking the async queue because this will cause the\n    // async queue to panic.\n    const persistenceResult = new Deferred<void>();\n\n    let initialized = false;\n    this.credentials.setChangeListener(user => {\n      if (!initialized) {\n        initialized = true;\n\n        logDebug(LOG_TAG, 'Initializing. user=', user.uid);\n\n        return this.initializeComponents(\n          componentProvider,\n          persistenceSettings,\n          user,\n          persistenceResult\n        ).then(initializationDone.resolve, initializationDone.reject);\n      } else {\n        this.asyncQueue.enqueueRetryable(() =>\n          this.remoteStore.handleCredentialChange(user)\n        );\n      }\n    });\n\n    // Block the async queue until initialization is done\n    this.asyncQueue.enqueueAndForget(() => {\n      return initializationDone.promise;\n    });\n\n    // Return only the result of enabling persistence. Note that this does not\n    // need to await the completion of initializationDone because the result of\n    // this method should not reflect any other kind of failure to start.\n    return persistenceResult.promise;\n  }\n\n  /** Enables the network connection and requeues all pending operations. */\n  enableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      this.persistence.setNetworkEnabled(true);\n      return this.remoteStore.enableNetwork();\n    });\n  }\n\n  /**\n   * Initializes persistent storage, attempting to use IndexedDB if\n   * usePersistence is true or memory-only if false.\n   *\n   * If IndexedDB fails because it's already open in another tab or because the\n   * platform can't possibly support our implementation then this method rejects\n   * the persistenceResult and falls back on memory-only persistence.\n   *\n   * @param componentProvider The provider that provides all core componennts\n   *     for IndexedDB or memory-backed persistence\n   * @param persistenceSettings Settings object to configure offline persistence\n   * @param user The initial user\n   * @param persistenceResult A deferred result indicating the user-visible\n   *     result of enabling offline persistence. This method will reject this if\n   *     IndexedDB fails to start for any reason. If usePersistence is false\n   *     this is unconditionally resolved.\n   * @returns a Promise indicating whether or not initialization should\n   *     continue, i.e. that one of the persistence implementations actually\n   *     succeeded.\n   */\n  private async initializeComponents(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings,\n    user: User,\n    persistenceResult: Deferred<void>\n  ): Promise<void> {\n    try {\n      await componentProvider.initialize({\n        asyncQueue: this.asyncQueue,\n        databaseInfo: this.databaseInfo,\n        clientId: this.clientId,\n        credentials: this.credentials,\n        initialUser: user,\n        maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS,\n        persistenceSettings\n      });\n\n      this.persistence = componentProvider.persistence;\n      this.sharedClientState = componentProvider.sharedClientState;\n      this.localStore = componentProvider.localStore;\n      this.remoteStore = componentProvider.remoteStore;\n      this.syncEngine = componentProvider.syncEngine;\n      this.gcScheduler = componentProvider.gcScheduler;\n      this.eventMgr = componentProvider.eventManager;\n\n      // When a user calls clearPersistence() in one client, all other clients\n      // need to be terminated to allow the delete to succeed.\n      this.persistence.setDatabaseDeletedListener(async () => {\n        await this.terminate();\n      });\n\n      persistenceResult.resolve();\n    } catch (error) {\n      // Regardless of whether or not the retry succeeds, from an user\n      // perspective, offline persistence has failed.\n      persistenceResult.reject(error);\n\n      // An unknown failure on the first stage shuts everything down.\n      if (!this.canFallback(error)) {\n        throw error;\n      }\n      console.warn(\n        'Error enabling offline persistence. Falling back to' +\n          ' persistence disabled: ' +\n          error\n      );\n      return this.initializeComponents(\n        new MemoryComponentProvider(),\n        { durable: false },\n        user,\n        persistenceResult\n      );\n    }\n  }\n\n  /**\n   * Decides whether the provided error allows us to gracefully disable\n   * persistence (as opposed to crashing the client).\n   */\n  private canFallback(error: FirestoreError | DOMException): boolean {\n    if (error.name === 'FirebaseError') {\n      return (\n        error.code === Code.FAILED_PRECONDITION ||\n        error.code === Code.UNIMPLEMENTED\n      );\n    } else if (\n      typeof DOMException !== 'undefined' &&\n      error instanceof DOMException\n    ) {\n      // There are a few known circumstances where we can open IndexedDb but\n      // trying to read/write will fail (e.g. quota exceeded). For\n      // well-understood cases, we attempt to detect these and then gracefully\n      // fall back to memory persistence.\n      // NOTE: Rather than continue to add to this list, we could decide to\n      // always fall back, with the risk that we might accidentally hide errors\n      // representing actual SDK bugs.\n      return (\n        // When the browser is out of quota we could get either quota exceeded\n        // or an aborted error depending on whether the error happened during\n        // schema migration.\n        error.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||\n        error.code === DOM_EXCEPTION_ABORTED ||\n        // Firefox Private Browsing mode disables IndexedDb and returns\n        // INVALID_STATE for any usage.\n        error.code === DOM_EXCEPTION_INVALID_STATE\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks that the client has not been terminated. Ensures that other methods on\n   * this class cannot be called after the client is terminated.\n   */\n  private verifyNotTerminated(): void {\n    if (this.asyncQueue.isShuttingDown) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  /** Disables the network connection. Pending operations will not complete. */\n  disableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      this.persistence.setNetworkEnabled(false);\n      return this.remoteStore.disableNetwork();\n    });\n  }\n\n  terminate(): Promise<void> {\n    return this.asyncQueue.enqueueAndInitiateShutdown(async () => {\n      // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n      if (this.gcScheduler) {\n        this.gcScheduler.stop();\n      }\n\n      await this.remoteStore.shutdown();\n      await this.sharedClientState.shutdown();\n      await this.persistence.shutdown();\n\n      // `removeChangeListener` must be called after shutting down the\n      // RemoteStore as it will prevent the RemoteStore from retrieving\n      // auth tokens.\n      this.credentials.removeChangeListener();\n    });\n  }\n\n  /**\n   * Returns a Promise that resolves when all writes that were pending at the time this\n   * method was called received server acknowledgement. An acknowledgement can be either acceptance\n   * or rejection.\n   */\n  waitForPendingWrites(): Promise<void> {\n    this.verifyNotTerminated();\n\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.syncEngine.registerPendingWritesCallback(deferred);\n    });\n    return deferred.promise;\n  }\n\n  listen(\n    query: Query,\n    observer: Observer<ViewSnapshot>,\n    options: ListenOptions\n  ): QueryListener {\n    this.verifyNotTerminated();\n    const listener = new QueryListener(query, observer, options);\n    this.asyncQueue.enqueueAndForget(() => this.eventMgr.listen(listener));\n    return listener;\n  }\n\n  unlisten(listener: QueryListener): void {\n    // Checks for termination but does not raise error, allowing unlisten after\n    // termination to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.eventMgr.unlisten(listener);\n    });\n  }\n\n  async getDocumentFromLocalCache(\n    docKey: DocumentKey\n  ): Promise<Document | null> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<Document | null>();\n    await this.asyncQueue.enqueue(async () => {\n      try {\n        const maybeDoc = await this.localStore.readDocument(docKey);\n        if (maybeDoc instanceof Document) {\n          deferred.resolve(maybeDoc);\n        } else if (maybeDoc instanceof NoDocument) {\n          deferred.resolve(null);\n        } else {\n          deferred.reject(\n            new FirestoreError(\n              Code.UNAVAILABLE,\n              'Failed to get document from cache. (However, this document may ' +\n                \"exist on the server. Run again without setting 'source' in \" +\n                'the GetOptions to attempt to retrieve the document from the ' +\n                'server.)'\n            )\n          );\n        }\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Failed to get document '${docKey} from cache`\n        );\n        deferred.reject(firestoreError);\n      }\n    });\n\n    return deferred.promise;\n  }\n\n  async getDocumentsFromLocalCache(query: Query): Promise<ViewSnapshot> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<ViewSnapshot>();\n    await this.asyncQueue.enqueue(async () => {\n      try {\n        const queryResult = await this.localStore.executeQuery(\n          query,\n          /* usePreviousResults= */ true\n        );\n        const view = new View(query, queryResult.remoteKeys);\n        const viewDocChanges = view.computeDocChanges(queryResult.documents);\n        const viewChange = view.applyChanges(\n          viewDocChanges,\n          /* updateLimboDocuments= */ false\n        );\n        deferred.resolve(viewChange.snapshot!);\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Failed to execute query '${query} against cache`\n        );\n        deferred.reject(firestoreError);\n      }\n    });\n    return deferred.promise;\n  }\n\n  write(mutations: Mutation[]): Promise<void> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() =>\n      this.syncEngine.write(mutations, deferred)\n    );\n    return deferred.promise;\n  }\n\n  databaseId(): DatabaseId {\n    return this.databaseInfo.databaseId;\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.verifyNotTerminated();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.eventMgr.addSnapshotsInSyncListener(observer);\n      return Promise.resolve();\n    });\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    // Checks for shutdown but does not raise error, allowing remove after\n    // shutdown to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.asyncQueue.enqueueAndForget(() => {\n      this.eventMgr.removeSnapshotsInSyncListener(observer);\n      return Promise.resolve();\n    });\n  }\n\n  get clientTerminated(): boolean {\n    // Technically, the asyncQueue is still running, but only accepting operations\n    // related to termination or supposed to be run after termination. It is effectively\n    // terminated to the eyes of users.\n    return this.asyncQueue.isShuttingDown;\n  }\n\n  transaction<T>(\n    updateFunction: (transaction: Transaction) => Promise<T>\n  ): Promise<T> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<T>();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.syncEngine.runTransaction(this.asyncQueue, updateFunction, deferred);\n      return Promise.resolve();\n    });\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observer } from '../core/event_manager';\nimport { EventHandler } from './misc';\n\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nexport class AsyncObserver<T> implements Observer<T> {\n  /**\n   * When set to true, will not raise future events. Necessary to deal with\n   * async detachment of listener.\n   */\n  private muted = false;\n\n  constructor(private observer: Observer<T>) {}\n\n  next(value: T): void {\n    this.scheduleEvent(this.observer.next, value);\n  }\n\n  error(error: Error): void {\n    this.scheduleEvent(this.observer.error, error);\n  }\n\n  mute(): void {\n    this.muted = true;\n  }\n\n  private scheduleEvent<E>(eventHandler: EventHandler<E>, event: E): void {\n    if (!this.muted) {\n      setTimeout(() => {\n        if (!this.muted) {\n          eventHandler(event);\n        }\n      }, 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '../model/object_value';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport interface Unsubscribe {\n  (): void;\n}\n\nexport function isPartialObserver(obj: unknown): boolean {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as JsonObject<unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { DocumentKeyReference } from './user_data_reader';\nimport { Blob } from './blob';\nimport { GeoPoint } from './geo_point';\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp,\n  typeOrder\n} from '../model/values';\nimport {\n  getLocalWriteTime,\n  getPreviousValue\n} from '../model/server_timestamps';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach } from '../util/obj';\nimport { TypeOrder } from '../model/object_value';\nimport { ResourcePath } from '../model/path';\nimport { isValidResourceName } from '../remote/serializer';\nimport { logError } from '../util/log';\n\nexport type ServerTimestampBehavior = 'estimate' | 'previous' | 'none';\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n */\nexport class UserDataWriter {\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly timestampsInSnapshots: boolean,\n    private readonly serverTimestampBehavior: ServerTimestampBehavior,\n    private readonly referenceFactory: (\n      key: DocumentKey\n    ) => DocumentKeyReference<firestore.DocumentData>\n  ) {}\n\n  convertValue(value: api.Value): unknown {\n    switch (typeOrder(value)) {\n      case TypeOrder.NullValue:\n        return null;\n      case TypeOrder.BooleanValue:\n        return value.booleanValue!;\n      case TypeOrder.NumberValue:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case TypeOrder.TimestampValue:\n        return this.convertTimestamp(value.timestampValue!);\n      case TypeOrder.ServerTimestampValue:\n        return this.convertServerTimestamp(value);\n      case TypeOrder.StringValue:\n        return value.stringValue!;\n      case TypeOrder.BlobValue:\n        return new Blob(normalizeByteString(value.bytesValue!));\n      case TypeOrder.RefValue:\n        return this.convertReference(value.referenceValue!);\n      case TypeOrder.GeoPointValue:\n        return this.convertGeoPoint(value.geoPointValue!);\n      case TypeOrder.ArrayValue:\n        return this.convertArray(value.arrayValue!);\n      case TypeOrder.ObjectValue:\n        return this.convertObject(value.mapValue!);\n      default:\n        throw fail('Invalid value type: ' + JSON.stringify(value));\n    }\n  }\n\n  private convertObject(mapValue: api.MapValue): firestore.DocumentData {\n    const result: firestore.DocumentData = {};\n    forEach(mapValue.fields || {}, (key, value) => {\n      result[key] = this.convertValue(value);\n    });\n    return result;\n  }\n\n  private convertGeoPoint(value: api.LatLng): GeoPoint {\n    return new GeoPoint(\n      normalizeNumber(value.latitude),\n      normalizeNumber(value.longitude)\n    );\n  }\n\n  private convertArray(arrayValue: api.ArrayValue): unknown[] {\n    return (arrayValue.values || []).map(value => this.convertValue(value));\n  }\n\n  private convertServerTimestamp(value: api.Value): unknown {\n    switch (this.serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n\n  private convertTimestamp(value: api.Timestamp): Timestamp | Date {\n    const normalizedValue = normalizeTimestamp(value);\n    const timestamp = new Timestamp(\n      normalizedValue.seconds,\n      normalizedValue.nanos\n    );\n    if (this.timestampsInSnapshots) {\n      return timestamp;\n    } else {\n      return timestamp.toDate();\n    }\n  }\n\n  private convertReference(\n    name: string\n  ): DocumentKeyReference<firestore.DocumentData> {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resourcePath),\n      'ReferenceValue is not valid ' + name\n    );\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(this.databaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\n        `Document ${key} contains a document ` +\n          `reference within a different database (` +\n          `${databaseId.projectId}/${databaseId.database}) which is not ` +\n          `supported. It will be treated as a reference in the current ` +\n          `database (${this.databaseId.projectId}/${this.databaseId.database}) ` +\n          `instead.`\n      );\n    }\n\n    return this.referenceFactory(key);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { ListenOptions } from '../core/event_manager';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from '../core/component_provider';\nimport { FirestoreClient, PersistenceSettings } from '../core/firestore_client';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  isCollectionGroupQuery,\n  LimitType,\n  newQueryComparator,\n  newQueryForCollectionGroup,\n  newQueryForPath,\n  Operator,\n  OrderBy,\n  Query as InternalQuery,\n  queryEquals,\n  queryOrderBy,\n  queryWithAddedFilter,\n  queryWithAddedOrderBy,\n  queryWithEndAt,\n  queryWithLimit,\n  queryWithStartAt\n} from '../core/query';\nimport { Transaction as InternalTransaction } from '../core/transaction';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { LruParams } from '../local/lru_garbage_collector';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DeleteMutation, Mutation, Precondition } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { isServerTimestamp } from '../model/server_timestamps';\nimport { refValue } from '../model/values';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateBetweenNumberOfArgs,\n  validateDefined,\n  validateExactNumberOfArgs,\n  validateNamedOptionalPropertyEquals,\n  validateNamedOptionalType,\n  validateNamedType,\n  validateOptionalArgType,\n  validateOptionalArrayElements,\n  validateOptionNames,\n  validatePositiveNumber,\n  validateStringEnum,\n  valueDescription\n} from '../util/input_validation';\nimport { getLogLevel, logError, LogLevel, setLogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { Deferred } from '../util/promise';\nimport { FieldPath as ExternalFieldPath } from './field_path';\n\nimport {\n  CredentialsProvider,\n  CredentialsSettings,\n  EmptyCredentialsProvider,\n  FirebaseCredentialsProvider,\n  makeCredentialsProvider\n} from './credentials';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver,\n  Unsubscribe\n} from './observer';\nimport {\n  DocumentKeyReference,\n  fieldPathFromArgument,\n  parseQueryValue,\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UntypedFirestoreDataConverter,\n  UserDataReader\n} from './user_data_reader';\nimport { UserDataWriter } from './user_data_writer';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\nconst DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;\nconst DEFAULT_FORCE_LONG_POLLING = false;\nconst DEFAULT_IGNORE_UNDEFINED_PROPERTIES = false;\n\n/**\n * Constant used to indicate the LRU garbage collection should be disabled.\n * Set this value as the `cacheSizeBytes` on the settings passed to the\n * `Firestore` instance.\n */\nexport const CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED;\n\n// enablePersistence() defaults:\nconst DEFAULT_SYNCHRONIZE_TABS = false;\n\n/** Undocumented, private additional settings not exposed in our public API. */\ninterface PrivateSettings extends firestore.Settings {\n  // Can be a google-auth-library or gapi client.\n  credentials?: CredentialsSettings;\n}\n\n/**\n * Options that can be provided in the Firestore constructor when not using\n * Firebase (aka standalone mode).\n */\nexport interface FirestoreDatabase {\n  projectId: string;\n  database?: string;\n}\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettings {\n  /** The hostname to connect to. */\n  readonly host: string;\n\n  /** Whether to use SSL when connecting. */\n  readonly ssl: boolean;\n\n  readonly timestampsInSnapshots: boolean;\n\n  readonly cacheSizeBytes: number;\n\n  readonly forceLongPolling: boolean;\n\n  readonly ignoreUndefinedProperties: boolean;\n\n  // Can be a google-auth-library or gapi client.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  credentials?: any;\n\n  constructor(settings: PrivateSettings) {\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't provide ssl option if host option is not set\"\n        );\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      validateNamedType('settings', 'non-empty string', 'host', settings.host);\n      this.host = settings.host;\n\n      validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n      this.ssl = settings.ssl ?? DEFAULT_SSL;\n    }\n    validateOptionNames('settings', settings, [\n      'host',\n      'ssl',\n      'credentials',\n      'timestampsInSnapshots',\n      'cacheSizeBytes',\n      'experimentalForceLongPolling',\n      'ignoreUndefinedProperties'\n    ]);\n\n    validateNamedOptionalType(\n      'settings',\n      'object',\n      'credentials',\n      settings.credentials\n    );\n    this.credentials = settings.credentials;\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'timestampsInSnapshots',\n      settings.timestampsInSnapshots\n    );\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'ignoreUndefinedProperties',\n      settings.ignoreUndefinedProperties\n    );\n\n    // Nobody should set timestampsInSnapshots anymore, but the error depends on\n    // whether they set it to true or false...\n    if (settings.timestampsInSnapshots === true) {\n      logError(\n        \"The setting 'timestampsInSnapshots: true' is no longer required \" +\n          'and should be removed.'\n      );\n    } else if (settings.timestampsInSnapshots === false) {\n      logError(\n        \"Support for 'timestampsInSnapshots: false' will be removed soon. \" +\n          'You must update your code to handle Timestamp objects.'\n      );\n    }\n    this.timestampsInSnapshots =\n      settings.timestampsInSnapshots ?? DEFAULT_TIMESTAMPS_IN_SNAPSHOTS;\n    this.ignoreUndefinedProperties =\n      settings.ignoreUndefinedProperties ?? DEFAULT_IGNORE_UNDEFINED_PROPERTIES;\n\n    validateNamedOptionalType(\n      'settings',\n      'number',\n      'cacheSizeBytes',\n      settings.cacheSizeBytes\n    );\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (\n        settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `cacheSizeBytes must be at least ${LruParams.MINIMUM_CACHE_SIZE_BYTES}`\n        );\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'experimentalForceLongPolling',\n      settings.experimentalForceLongPolling\n    );\n    this.forceLongPolling =\n      settings.experimentalForceLongPolling ?? DEFAULT_FORCE_LONG_POLLING;\n  }\n\n  isEqual(other: FirestoreSettings): boolean {\n    return (\n      this.host === other.host &&\n      this.ssl === other.ssl &&\n      this.timestampsInSnapshots === other.timestampsInSnapshots &&\n      this.credentials === other.credentials &&\n      this.cacheSizeBytes === other.cacheSizeBytes &&\n      this.forceLongPolling === other.forceLongPolling &&\n      this.ignoreUndefinedProperties === other.ignoreUndefinedProperties\n    );\n  }\n}\n\n/**\n * The root reference to the database.\n */\nexport class Firestore implements firestore.FirebaseFirestore, FirebaseService {\n  // The objects that are a part of this API are exposed to third-parties as\n  // compiled javascript so we want to flag our private members with a leading\n  // underscore to discourage their use.\n  readonly _databaseId: DatabaseId;\n  private readonly _persistenceKey: string;\n  private readonly _componentProvider: ComponentProvider;\n  private _credentials: CredentialsProvider;\n  private readonly _firebaseApp: FirebaseApp | null = null;\n  private _settings: FirestoreSettings;\n\n  // The firestore client instance. This will be available as soon as\n  // configureClient is called, but any calls against it will block until\n  // setup has completed.\n  //\n  // Operations on the _firestoreClient don't block on _firestoreReady. Those\n  // are already set to synchronize on the async queue.\n  private _firestoreClient: FirestoreClient | undefined;\n\n  // Public for use in tests.\n  // TODO(mikelehen): Use modularized initialization instead.\n  readonly _queue = new AsyncQueue();\n\n  _userDataReader: UserDataReader | undefined;\n\n  // Note: We are using `MemoryComponentProvider` as a default\n  // ComponentProvider to ensure backwards compatibility with the format\n  // expected by the console build.\n  constructor(\n    databaseIdOrApp: FirestoreDatabase | FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    componentProvider: ComponentProvider = new MemoryComponentProvider()\n  ) {\n    if (typeof (databaseIdOrApp as FirebaseApp).options === 'object') {\n      // This is very likely a Firebase app object\n      // TODO(b/34177605): Can we somehow use instanceof?\n      const app = databaseIdOrApp as FirebaseApp;\n      this._firebaseApp = app;\n      this._databaseId = Firestore.databaseIdFromApp(app);\n      this._persistenceKey = app.name;\n      this._credentials = new FirebaseCredentialsProvider(authProvider);\n    } else {\n      const external = databaseIdOrApp as FirestoreDatabase;\n      if (!external.projectId) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Must provide projectId'\n        );\n      }\n\n      this._databaseId = new DatabaseId(external.projectId, external.database);\n      // Use a default persistenceKey that lines up with FirebaseApp.\n      this._persistenceKey = '[DEFAULT]';\n      this._credentials = new EmptyCredentialsProvider();\n    }\n\n    this._componentProvider = componentProvider;\n    this._settings = new FirestoreSettings({});\n  }\n\n  get _dataReader(): UserDataReader {\n    debugAssert(\n      !!this._firestoreClient,\n      'Cannot obtain UserDataReader before instance is intitialized'\n    );\n    if (!this._userDataReader) {\n      // Lazy initialize UserDataReader once the settings are frozen\n      this._userDataReader = new UserDataReader(\n        this._databaseId,\n        this._settings.ignoreUndefinedProperties\n      );\n    }\n    return this._userDataReader;\n  }\n\n  settings(settingsLiteral: firestore.Settings): void {\n    validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n    validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n\n    const newSettings = new FirestoreSettings(settingsLiteral);\n    if (this._firestoreClient && !this._settings.isEqual(newSettings)) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. You can only call settings() before calling any other ' +\n          'methods on a Firestore object.'\n      );\n    }\n\n    this._settings = newSettings;\n    if (newSettings.credentials !== undefined) {\n      this._credentials = makeCredentialsProvider(newSettings.credentials);\n    }\n  }\n\n  enableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.disableNetwork();\n  }\n\n  enablePersistence(settings?: firestore.PersistenceSettings): Promise<void> {\n    if (this._firestoreClient) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and persistence can no longer ' +\n          'be enabled. You can only call enablePersistence() before calling ' +\n          'any other methods on a Firestore object.'\n      );\n    }\n\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      if (settings.experimentalTabSynchronization !== undefined) {\n        logError(\n          \"The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead.\"\n        );\n      }\n      synchronizeTabs =\n        settings.synchronizeTabs ??\n        settings.experimentalTabSynchronization ??\n        DEFAULT_SYNCHRONIZE_TABS;\n\n      experimentalForceOwningTab = settings.experimentalForceOwningTab\n        ? settings.experimentalForceOwningTab\n        : false;\n\n      if (synchronizeTabs && experimentalForceOwningTab) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"The 'experimentalForceOwningTab' setting cannot be used with 'synchronizeTabs'.\"\n        );\n      }\n    }\n\n    return this.configureClient(this._componentProvider, {\n      durable: true,\n      cacheSizeBytes: this._settings.cacheSizeBytes,\n      synchronizeTabs,\n      forceOwningTab: experimentalForceOwningTab\n    });\n  }\n\n  async clearPersistence(): Promise<void> {\n    if (\n      this._firestoreClient !== undefined &&\n      !this._firestoreClient.clientTerminated\n    ) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Persistence can only be cleared before a Firestore instance is ' +\n          'initialized or after it is terminated.'\n      );\n    }\n\n    const deferred = new Deferred<void>();\n    this._queue.enqueueAndForgetEvenAfterShutdown(async () => {\n      try {\n        await this._componentProvider.clearPersistence(\n          this._databaseId,\n          this._persistenceKey\n        );\n        deferred.resolve();\n      } catch (e) {\n        deferred.reject(e);\n      }\n    });\n    return deferred.promise;\n  }\n\n  terminate(): Promise<void> {\n    (this.app as _FirebaseApp)._removeServiceInstance('firestore');\n    return this.INTERNAL.delete();\n  }\n\n  get _isTerminated(): boolean {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.clientTerminated;\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.waitForPendingWrites();\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    this.ensureClientConfigured();\n\n    if (isPartialObserver(arg)) {\n      return addSnapshotsInSyncListener(\n        this._firestoreClient!,\n        arg as PartialObserver<void>\n      );\n    } else {\n      validateArgType('Firestore.onSnapshotsInSync', 'function', 1, arg);\n      const observer: PartialObserver<void> = {\n        next: arg as () => void\n      };\n      return addSnapshotsInSyncListener(this._firestoreClient!, observer);\n    }\n  }\n\n  ensureClientConfigured(): FirestoreClient {\n    if (!this._firestoreClient) {\n      // Kick off starting the client but don't actually wait for it.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.configureClient(new MemoryComponentProvider(), {\n        durable: false\n      });\n    }\n    return this._firestoreClient as FirestoreClient;\n  }\n\n  private makeDatabaseInfo(): DatabaseInfo {\n    return new DatabaseInfo(\n      this._databaseId,\n      this._persistenceKey,\n      this._settings.host,\n      this._settings.ssl,\n      this._settings.forceLongPolling\n    );\n  }\n\n  private configureClient(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    debugAssert(!!this._settings.host, 'FirestoreSettings.host is not set');\n\n    debugAssert(\n      !this._firestoreClient,\n      'configureClient() called multiple times'\n    );\n\n    const databaseInfo = this.makeDatabaseInfo();\n\n    this._firestoreClient = new FirestoreClient(this._credentials, this._queue);\n\n    return this._firestoreClient.start(\n      databaseInfo,\n      componentProvider,\n      persistenceSettings\n    );\n  }\n\n  private static databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!contains(app.options, 'projectId')) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    const projectId = app.options.projectId;\n    if (!projectId || typeof projectId !== 'string') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'projectId must be a string in FirebaseApp.options'\n      );\n    }\n    return new DatabaseId(projectId);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._firebaseApp) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._firebaseApp;\n  }\n\n  INTERNAL = {\n    delete: async (): Promise<void> => {\n      // The client must be initalized to ensure that all subsequent API usage\n      // throws an exception.\n      this.ensureClientConfigured();\n      await this._firestoreClient!.terminate();\n    }\n  };\n\n  collection(pathString: string): firestore.CollectionReference {\n    validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n    validateArgType('Firestore.collection', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return new CollectionReference(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  doc(pathString: string): firestore.DocumentReference {\n    validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n    validateArgType('Firestore.doc', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return DocumentReference.forPath(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  collectionGroup(collectionId: string): firestore.Query {\n    validateExactNumberOfArgs('Firestore.collectionGroup', arguments, 1);\n    validateArgType(\n      'Firestore.collectionGroup',\n      'non-empty string',\n      1,\n      collectionId\n    );\n    if (collectionId.indexOf('/') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid collection ID '${collectionId}' passed to function ` +\n          `Firestore.collectionGroup(). Collection IDs must not contain '/'.`\n      );\n    }\n    this.ensureClientConfigured();\n    return new Query(\n      newQueryForCollectionGroup(collectionId),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: firestore.Transaction) => Promise<T>\n  ): Promise<T> {\n    validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n    validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n    return this.ensureClientConfigured().transaction(\n      (transaction: InternalTransaction) => {\n        return updateFunction(new Transaction(this, transaction));\n      }\n    );\n  }\n\n  batch(): firestore.WriteBatch {\n    this.ensureClientConfigured();\n\n    return new WriteBatch(this);\n  }\n\n  static get logLevel(): firestore.LogLevel {\n    switch (getLogLevel()) {\n      case LogLevel.DEBUG:\n        return 'debug';\n      case LogLevel.ERROR:\n        return 'error';\n      case LogLevel.SILENT:\n        return 'silent';\n      case LogLevel.WARN:\n        return 'warn';\n      case LogLevel.INFO:\n        return 'info';\n      case LogLevel.VERBOSE:\n        return 'verbose';\n      default:\n        // The default log level is error\n        return 'error';\n    }\n  }\n\n  static setLogLevel(level: firestore.LogLevel): void {\n    validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n    validateStringEnum(\n      'setLogLevel',\n      ['debug', 'error', 'silent', 'warn', 'info', 'verbose'],\n      1,\n      level\n    );\n    setLogLevel(level);\n  }\n\n  // Note: this is not a property because the minifier can't work correctly with\n  // the way TypeScript compiler outputs properties.\n  _areTimestampsInSnapshotsEnabled(): boolean {\n    return this._settings.timestampsInSnapshots;\n  }\n}\n\n/** Registers the listener for onSnapshotsInSync() */\nexport function addSnapshotsInSyncListener(\n  firestoreClient: FirestoreClient,\n  observer: PartialObserver<void>\n): Unsubscribe {\n  const errHandler = (err: Error): void => {\n    throw fail('Uncaught Error in onSnapshotsInSync');\n  };\n  const asyncObserver = new AsyncObserver<void>({\n    next: () => {\n      if (observer.next) {\n        observer.next();\n      }\n    },\n    error: errHandler\n  });\n  firestoreClient.addSnapshotsInSyncListener(asyncObserver);\n  return () => {\n    asyncObserver.mute();\n    firestoreClient.removeSnapshotsInSyncListener(asyncObserver);\n  };\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements firestore.Transaction {\n  constructor(\n    private _firestore: Firestore,\n    private _transaction: InternalTransaction\n  ) {}\n\n  get<T>(\n    documentRef: firestore.DocumentReference<T>\n  ): Promise<firestore.DocumentSnapshot<T>> {\n    validateExactNumberOfArgs('Transaction.get', arguments, 1);\n    const ref = validateReference(\n      'Transaction.get',\n      documentRef,\n      this._firestore\n    );\n    return this._transaction\n      .lookup([ref._key])\n      .then((docs: MaybeDocument[]) => {\n        if (!docs || docs.length !== 1) {\n          return fail('Mismatch in docs returned from document lookup.');\n        }\n        const doc = docs[0];\n        if (doc instanceof NoDocument) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            null,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else if (doc instanceof Document) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            doc,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else {\n          throw fail(\n            `BatchGetDocumentsRequest returned unexpected document type: ${doc.constructor.name}`\n          );\n        }\n      });\n  }\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: firestore.SetOptions\n  ): Transaction;\n  set<T>(documentRef: DocumentReference<T>, data: T): Transaction;\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T | Partial<T>,\n    options?: firestore.SetOptions\n  ): Transaction {\n    validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n    const ref = validateReference(\n      'Transaction.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('Transaction.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._firestore._dataReader,\n      'Transaction.set',\n      ref._key,\n      convertedValue,\n      ref._converter !== null,\n      options\n    );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateVarargs(\n        this._firestore._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('Transaction.update', arguments, 2);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateData(\n        this._firestore._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): Transaction {\n    validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n    const ref = validateReference(\n      'Transaction.delete',\n      documentRef,\n      this._firestore\n    );\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\nexport class WriteBatch implements firestore.WriteBatch {\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  constructor(private _firestore: Firestore) {}\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: firestore.SetOptions\n  ): WriteBatch;\n  set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T | Partial<T>,\n    options?: firestore.SetOptions\n  ): WriteBatch {\n    validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('WriteBatch.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._firestore._dataReader,\n      'WriteBatch.set',\n      ref._key,\n      convertedValue,\n      ref._converter !== null,\n      options\n    );\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this.verifyNotCommitted();\n\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateVarargs(\n        this._firestore._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateData(\n        this._firestore._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): WriteBatch {\n    validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.delete',\n      documentRef,\n      this._firestore\n    );\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  commit(): Promise<void> {\n    this.verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._firestore.ensureClientConfigured().write(this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = firestore.DocumentData>\n  extends DocumentKeyReference<T>\n  implements firestore.DocumentReference<T> {\n  private _firestoreClient: FirestoreClient;\n\n  constructor(\n    public _key: DocumentKey,\n    readonly firestore: Firestore,\n    readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(firestore._databaseId, _key, _converter);\n    this._firestoreClient = this.firestore.ensureClientConfigured();\n  }\n\n  static forPath<U>(\n    path: ResourcePath,\n    firestore: Firestore,\n    converter: firestore.FirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(new DocumentKey(path), firestore, converter);\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get parent(): firestore.CollectionReference<T> {\n    return new CollectionReference(\n      this._key.path.popLast(),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  get path(): string {\n    return this._key.path.canonicalString();\n  }\n\n  collection(\n    pathString: string\n  ): firestore.CollectionReference<firestore.DocumentData> {\n    validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n    validateArgType(\n      'DocumentReference.collection',\n      'non-empty string',\n      1,\n      pathString\n    );\n    if (!pathString) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Must provide a non-empty collection name to collection()'\n      );\n    }\n    const path = ResourcePath.fromString(pathString);\n    return new CollectionReference(\n      this._key.path.child(path),\n      this.firestore,\n      /* converter= */ null\n    );\n  }\n\n  isEqual(other: firestore.DocumentReference<T>): boolean {\n    if (!(other instanceof DocumentReference)) {\n      throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._key.isEqual(other._key) &&\n      this._converter === other._converter\n    );\n  }\n\n  set(value: Partial<T>, options: firestore.SetOptions): Promise<void>;\n  set(value: T): Promise<void>;\n  set(value: T | Partial<T>, options?: firestore.SetOptions): Promise<void> {\n    validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n    options = validateSetOptions('DocumentReference.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      this._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this.firestore._dataReader,\n      'DocumentReference.set',\n      this._key,\n      convertedValue,\n      this._converter !== null,\n      options\n    );\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.none())\n    );\n  }\n\n  update(value: firestore.UpdateData): Promise<void>;\n  update(\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n      parsed = parseUpdateVarargs(\n        this.firestore._dataReader,\n        'DocumentReference.update',\n        this._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n      parsed = parseUpdateData(\n        this.firestore._dataReader,\n        'DocumentReference.update',\n        this._key,\n        fieldOrUpdateData\n      );\n    }\n\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.exists(true))\n    );\n  }\n\n  delete(): Promise<void> {\n    validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n    return this._firestoreClient.write([\n      new DeleteMutation(this._key, Precondition.none())\n    ]);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs(\n      'DocumentReference.onSnapshot',\n      arguments,\n      1,\n      4\n    );\n    let options: firestore.SnapshotListenOptions = {\n      includeMetadataChanges: false\n    };\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('DocumentReference.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'DocumentReference.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    const internalOptions = {\n      includeMetadataChanges: options.includeMetadataChanges\n    };\n\n    if (isPartialObserver(args[currArg])) {\n      const userObserver = args[currArg] as PartialObserver<\n        firestore.DocumentSnapshot<T>\n      >;\n      args[currArg] = userObserver.next?.bind(userObserver);\n      args[currArg + 1] = userObserver.error?.bind(userObserver);\n      args[currArg + 2] = userObserver.complete?.bind(userObserver);\n    } else {\n      validateArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg,\n        args[currArg]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n    }\n\n    const observer: PartialObserver<ViewSnapshot> = {\n      next: snapshot => {\n        if (args[currArg]) {\n          (args[currArg] as NextFn<firestore.DocumentSnapshot<T>>)(\n            this._convertToDocSnapshot(snapshot)\n          );\n        }\n      },\n      error: args[currArg + 1] as ErrorFn,\n      complete: args[currArg + 2] as CompleteFn\n    };\n\n    return addDocSnapshotListener(\n      this._firestoreClient,\n      this._key,\n      internalOptions,\n      observer\n    );\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.DocumentSnapshot<T>> {\n    validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);\n    validateGetOptions('DocumentReference.get', options);\n\n    if (options && options.source === 'cache') {\n      return this.firestore\n        .ensureClientConfigured()\n        .getDocumentFromLocalCache(this._key)\n        .then(\n          doc =>\n            new DocumentSnapshot(\n              this.firestore,\n              this._key,\n              doc,\n              /*fromCache=*/ true,\n              doc instanceof Document ? doc.hasLocalMutations : false,\n              this._converter\n            )\n        );\n    } else {\n      return getDocViaSnapshotListener(\n        this._firestoreClient,\n        this._key,\n        options\n      ).then(snapshot => this._convertToDocSnapshot(snapshot));\n    }\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.DocumentReference<U> {\n    return new DocumentReference<U>(this._key, this.firestore, converter);\n  }\n\n  /**\n   * Converts a ViewSnapshot that contains the current document to a\n   * DocumentSnapshot.\n   */\n  private _convertToDocSnapshot(snapshot: ViewSnapshot): DocumentSnapshot<T> {\n    debugAssert(\n      snapshot.docs.size <= 1,\n      'Too many documents returned on a document query'\n    );\n    const doc = snapshot.docs.get(this._key);\n\n    return new DocumentSnapshot(\n      this.firestore,\n      this._key,\n      doc,\n      snapshot.fromCache,\n      snapshot.hasPendingWrites,\n      this._converter\n    );\n  }\n}\n\n/** Registers an internal snapshot listener for `ref`. */\nexport function addDocSnapshotListener(\n  firestoreClient: FirestoreClient,\n  key: DocumentKey,\n  options: ListenOptions,\n  observer: PartialObserver<ViewSnapshot>\n): Unsubscribe {\n  let errHandler = (err: Error): void => {\n    console.error('Uncaught Error in onSnapshot:', err);\n  };\n  if (observer.error) {\n    errHandler = observer.error.bind(observer);\n  }\n\n  const asyncObserver = new AsyncObserver<ViewSnapshot>({\n    next: snapshot => {\n      if (observer.next) {\n        observer.next(snapshot);\n      }\n    },\n    error: errHandler\n  });\n  const internalListener = firestoreClient.listen(\n    newQueryForPath(key.path),\n    asyncObserver,\n    options\n  );\n\n  return () => {\n    asyncObserver.mute();\n    firestoreClient.unlisten(internalListener);\n  };\n}\n\n/**\n * Retrieves a latency-compensated document from the backend via a\n * SnapshotListener.\n */\nexport function getDocViaSnapshotListener(\n  firestoreClient: FirestoreClient,\n  key: DocumentKey,\n  options?: firestore.GetOptions\n): Promise<ViewSnapshot> {\n  const result = new Deferred<ViewSnapshot>();\n  const unlisten = addDocSnapshotListener(\n    firestoreClient,\n    key,\n    {\n      includeMetadataChanges: true,\n      waitForSyncWhenOnline: true\n    },\n    {\n      next: (snap: ViewSnapshot) => {\n        // Remove query first before passing event to user to avoid\n        // user actions affecting the now stale query.\n        unlisten();\n\n        const exists = snap.docs.has(key);\n        if (!exists && snap.fromCache) {\n          // TODO(dimond): If we're online and the document doesn't\n          // exist then we resolve with a doc.exists set to false. If\n          // we're offline however, we reject the Promise in this\n          // case. Two options: 1) Cache the negative response from\n          // the server so we can deliver that even when you're\n          // offline 2) Actually reject the Promise in the online case\n          // if the document doesn't exist.\n          result.reject(\n            new FirestoreError(\n              Code.UNAVAILABLE,\n              'Failed to get document because the client is ' + 'offline.'\n            )\n          );\n        } else if (\n          exists &&\n          snap.fromCache &&\n          options &&\n          options.source === 'server'\n        ) {\n          result.reject(\n            new FirestoreError(\n              Code.UNAVAILABLE,\n              'Failed to get document from server. (However, this ' +\n                'document does exist in the local cache. Run again ' +\n                'without setting source to \"server\" to ' +\n                'retrieve the cached document.)'\n            )\n          );\n        } else {\n          result.resolve(snap);\n        }\n      },\n      error: e => result.reject(e)\n    }\n  );\n  return result.promise;\n}\n\nexport class SnapshotMetadata implements firestore.SnapshotMetadata {\n  constructor(\n    readonly hasPendingWrites: boolean,\n    readonly fromCache: boolean\n  ) {}\n\n  isEqual(other: firestore.SnapshotMetadata): boolean {\n    return (\n      this.hasPendingWrites === other.hasPendingWrites &&\n      this.fromCache === other.fromCache\n    );\n  }\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends firestore.SnapshotOptions {}\n\nexport class DocumentSnapshot<T = firestore.DocumentData>\n  implements firestore.DocumentSnapshot<T> {\n  constructor(\n    private _firestore: Firestore,\n    private _key: DocumentKey,\n    public _document: Document | null,\n    private _fromCache: boolean,\n    private _hasPendingWrites: boolean,\n    private readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {}\n\n  data(options?: firestore.SnapshotOptions): T | undefined {\n    validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n    options = validateSnapshotOptions('DocumentSnapshot.data', options);\n    if (!this._document) {\n      return undefined;\n    } else {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      if (this._converter) {\n        const snapshot = new QueryDocumentSnapshot(\n          this._firestore,\n          this._key,\n          this._document,\n          this._fromCache,\n          this._hasPendingWrites,\n          /* converter= */ null\n        );\n        return this._converter.fromFirestore(snapshot, options);\n      } else {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps || 'none',\n          key =>\n            new DocumentReference(key, this._firestore, /* converter= */ null)\n        );\n        return userDataWriter.convertValue(this._document.toProto()) as T;\n      }\n    }\n  }\n\n  get(\n    fieldPath: string | ExternalFieldPath,\n    options?: firestore.SnapshotOptions\n  ): unknown {\n    validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n    options = validateSnapshotOptions('DocumentSnapshot.get', options);\n    if (this._document) {\n      const value = this._document\n        .data()\n        .field(\n          fieldPathFromArgument('DocumentSnapshot.get', fieldPath, this._key)\n        );\n      if (value !== null) {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps || 'none',\n          key => new DocumentReference(key, this._firestore, this._converter)\n        );\n        return userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get ref(): firestore.DocumentReference<T> {\n    return new DocumentReference<T>(\n      this._key,\n      this._firestore,\n      this._converter\n    );\n  }\n\n  get exists(): boolean {\n    return this._document !== null;\n  }\n\n  get metadata(): firestore.SnapshotMetadata {\n    return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);\n  }\n\n  isEqual(other: firestore.DocumentSnapshot<T>): boolean {\n    if (!(other instanceof DocumentSnapshot)) {\n      throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n    }\n    return (\n      this._firestore === other._firestore &&\n      this._fromCache === other._fromCache &&\n      this._key.isEqual(other._key) &&\n      (this._document === null\n        ? other._document === null\n        : this._document.isEqual(other._document)) &&\n      this._converter === other._converter\n    );\n  }\n}\n\nexport class QueryDocumentSnapshot<T = firestore.DocumentData>\n  extends DocumentSnapshot<T>\n  implements firestore.QueryDocumentSnapshot<T> {\n  data(options?: SnapshotOptions): T {\n    const data = super.data(options);\n    debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport function newQueryFilter(\n  query: InternalQuery,\n  methodName: string,\n  dataReader: UserDataReader,\n  databaseId: DatabaseId,\n  fieldPath: FieldPath,\n  op: Operator,\n  value: unknown\n): FieldFilter {\n  let fieldValue: api.Value;\n  if (fieldPath.isKeyField()) {\n    if (op === Operator.ARRAY_CONTAINS || op === Operator.ARRAY_CONTAINS_ANY) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. You can't perform '${op}' ` +\n          'queries on FieldPath.documentId().'\n      );\n    } else if (op === Operator.IN) {\n      validateDisjunctiveFilterElements(value, op);\n      const referenceList: api.Value[] = [];\n      for (const arrayValue of value as api.Value[]) {\n        referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\n      }\n      fieldValue = { arrayValue: { values: referenceList } };\n    } else {\n      fieldValue = parseDocumentIdValue(databaseId, query, value);\n    }\n  } else {\n    if (op === Operator.IN || op === Operator.ARRAY_CONTAINS_ANY) {\n      validateDisjunctiveFilterElements(value, op);\n    }\n    fieldValue = parseQueryValue(\n      dataReader,\n      methodName,\n      value,\n      op === Operator.IN\n    );\n  }\n  const filter = FieldFilter.create(fieldPath, op, fieldValue);\n  validateNewFilter(query, filter);\n  return filter;\n}\n\nexport function newQueryOrderBy(\n  query: InternalQuery,\n  fieldPath: FieldPath,\n  direction: Direction\n): OrderBy {\n  if (query.startAt !== null) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid query. You must not call startAt() or startAfter() before ' +\n        'calling orderBy().'\n    );\n  }\n  if (query.endAt !== null) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid query. You must not call endAt() or endBefore() before ' +\n        'calling orderBy().'\n    );\n  }\n  const orderBy = new OrderBy(fieldPath, direction);\n  validateNewOrderBy(query, orderBy);\n  return orderBy;\n}\n\n/**\n * Create a Bound from a query and a document.\n *\n * Note that the Bound will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */\nexport function newQueryBoundFromDocument(\n  query: InternalQuery,\n  databaseId: DatabaseId,\n  methodName: string,\n  doc: Document | null,\n  before: boolean\n): Bound {\n  if (!doc) {\n    throw new FirestoreError(\n      Code.NOT_FOUND,\n      `Can't use a DocumentSnapshot that doesn't exist for ` +\n        `${methodName}().`\n    );\n  }\n\n  const components: api.Value[] = [];\n\n  // Because people expect to continue/end a query at the exact document\n  // provided, we need to use the implicit sort order rather than the explicit\n  // sort order, because it's guaranteed to contain the document key. That way\n  // the position becomes unambiguous and the query continues/ends exactly at\n  // the provided document. Without the key (by using the explicit sort\n  // orders), multiple documents could match the position, yielding duplicate\n  // results.\n  for (const orderBy of queryOrderBy(query)) {\n    if (orderBy.field.isKeyField()) {\n      components.push(refValue(databaseId, doc.key));\n    } else {\n      const value = doc.field(orderBy.field);\n      if (isServerTimestamp(value)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. You are trying to start or end a query using a ' +\n            'document for which the field \"' +\n            orderBy.field +\n            '\" is an uncommitted server timestamp. (Since the value of ' +\n            'this field is unknown, you cannot start/end a query with it.)'\n        );\n      } else if (value !== null) {\n        components.push(value);\n      } else {\n        const field = orderBy.field.canonicalString();\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. You are trying to start or end a query using a ` +\n            `document for which the field '${field}' (used as the ` +\n            `orderBy) does not exist.`\n        );\n      }\n    }\n  }\n  return new Bound(components, before);\n}\n\n/**\n * Converts a list of field values to a Bound for the given query.\n */\nexport function newQueryBoundFromFields(\n  query: InternalQuery,\n  databaseId: DatabaseId,\n  dataReader: UserDataReader,\n  methodName: string,\n  values: unknown[],\n  before: boolean\n): Bound {\n  // Use explicit order by's because it has to match the query the user made\n  const orderBy = query.explicitOrderBy;\n  if (values.length > orderBy.length) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Too many arguments provided to ${methodName}(). ` +\n        `The number of arguments must be less than or equal to the ` +\n        `number of orderBy() clauses`\n    );\n  }\n\n  const components: api.Value[] = [];\n  for (let i = 0; i < values.length; i++) {\n    const rawValue = values[i];\n    const orderByComponent = orderBy[i];\n    if (orderByComponent.field.isKeyField()) {\n      if (typeof rawValue !== 'string') {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. Expected a string for document ID in ` +\n            `${methodName}(), but got a ${typeof rawValue}`\n        );\n      }\n      if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection and ordering by FieldPath.documentId(), ` +\n            `the value passed to ${methodName}() must be a plain document ID, but ` +\n            `'${rawValue}' contains a slash.`\n        );\n      }\n      const path = query.path.child(ResourcePath.fromString(rawValue));\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection group and ordering by ` +\n            `FieldPath.documentId(), the value passed to ${methodName}() must result in a ` +\n            `valid document path, but '${path}' is not because it contains an odd number ` +\n            `of segments.`\n        );\n      }\n      const key = new DocumentKey(path);\n      components.push(refValue(databaseId, key));\n    } else {\n      const wrapped = parseQueryValue(dataReader, methodName, rawValue);\n      components.push(wrapped);\n    }\n  }\n\n  return new Bound(components, before);\n}\n\n/**\n * Parses the given documentIdValue into a ReferenceValue, throwing\n * appropriate errors if the value is anything other than a DocumentReference\n * or String, or if the string is malformed.\n */\nfunction parseDocumentIdValue(\n  databaseId: DatabaseId,\n  query: InternalQuery,\n  documentIdValue: unknown\n): api.Value {\n  if (typeof documentIdValue === 'string') {\n    if (documentIdValue === '') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. When querying with FieldPath.documentId(), you ' +\n          'must provide a valid document ID, but it was an empty string.'\n      );\n    }\n    if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying a collection by ` +\n          `FieldPath.documentId(), you must provide a plain document ID, but ` +\n          `'${documentIdValue}' contains a '/' character.`\n      );\n    }\n    const path = query.path.child(ResourcePath.fromString(documentIdValue));\n    if (!DocumentKey.isDocumentKey(path)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying a collection group by ` +\n          `FieldPath.documentId(), the value provided must result in a valid document path, ` +\n          `but '${path}' is not because it has an odd number of segments (${path.length}).`\n      );\n    }\n    return refValue(databaseId, new DocumentKey(path));\n  } else if (documentIdValue instanceof DocumentKeyReference) {\n    return refValue(databaseId, documentIdValue._key);\n  } else {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid query. When querying with FieldPath.documentId(), you must provide a valid ` +\n        `string or a DocumentReference, but it was: ` +\n        `${valueDescription(documentIdValue)}.`\n    );\n  }\n}\n\n/**\n * Validates that the value passed into a disjunctrive filter satisfies all\n * array requirements.\n */\nfunction validateDisjunctiveFilterElements(\n  value: unknown,\n  operator: Operator\n): void {\n  if (!Array.isArray(value) || value.length === 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid Query. A non-empty array is required for ' +\n        `'${operator.toString()}' filters.`\n    );\n  }\n  if (value.length > 10) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid Query. '${operator.toString()}' filters support a ` +\n        'maximum of 10 elements in the value array.'\n    );\n  }\n  if (value.indexOf(null) >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid Query. '${operator.toString()}' filters cannot contain 'null' ` +\n        'in the value array.'\n    );\n  }\n  if (value.filter(element => Number.isNaN(element)).length > 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid Query. '${operator.toString()}' filters cannot contain 'NaN' ` +\n        'in the value array.'\n    );\n  }\n}\n\nfunction validateNewFilter(query: InternalQuery, filter: Filter): void {\n  if (filter instanceof FieldFilter) {\n    const arrayOps = [Operator.ARRAY_CONTAINS, Operator.ARRAY_CONTAINS_ANY];\n    const disjunctiveOps = [Operator.IN, Operator.ARRAY_CONTAINS_ANY];\n    const isArrayOp = arrayOps.indexOf(filter.op) >= 0;\n    const isDisjunctiveOp = disjunctiveOps.indexOf(filter.op) >= 0;\n\n    if (filter.isInequality()) {\n      const existingField = query.getInequalityFilterField();\n      if (existingField !== null && !existingField.isEqual(filter.field)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. All where filters with an inequality' +\n            ' (<, <=, >, or >=) must be on the same field. But you have' +\n            ` inequality filters on '${existingField.toString()}'` +\n            ` and '${filter.field.toString()}'`\n        );\n      }\n\n      const firstOrderByField = query.getFirstOrderByField();\n      if (firstOrderByField !== null) {\n        validateOrderByAndInequalityMatch(\n          query,\n          filter.field,\n          firstOrderByField\n        );\n      }\n    } else if (isDisjunctiveOp || isArrayOp) {\n      // You can have at most 1 disjunctive filter and 1 array filter. Check if\n      // the new filter conflicts with an existing one.\n      let conflictingOp: Operator | null = null;\n      if (isDisjunctiveOp) {\n        conflictingOp = query.findFilterOperator(disjunctiveOps);\n      }\n      if (conflictingOp === null && isArrayOp) {\n        conflictingOp = query.findFilterOperator(arrayOps);\n      }\n      if (conflictingOp !== null) {\n        // We special case when it's a duplicate op to give a slightly clearer error message.\n        if (conflictingOp === filter.op) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. You cannot use more than one ' +\n              `'${filter.op.toString()}' filter.`\n          );\n        } else {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. You cannot use '${filter.op.toString()}' filters ` +\n              `with '${conflictingOp.toString()}' filters.`\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction validateNewOrderBy(query: InternalQuery, orderBy: OrderBy): void {\n  if (query.getFirstOrderByField() === null) {\n    // This is the first order by. It must match any inequality.\n    const inequalityField = query.getInequalityFilterField();\n    if (inequalityField !== null) {\n      validateOrderByAndInequalityMatch(query, inequalityField, orderBy.field);\n    }\n  }\n}\n\nfunction validateOrderByAndInequalityMatch(\n  baseQuery: InternalQuery,\n  inequality: FieldPath,\n  orderBy: FieldPath\n): void {\n  if (!orderBy.isEqual(inequality)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid query. You have a where filter with an inequality ` +\n        `(<, <=, >, or >=) on field '${inequality.toString()}' ` +\n        `and so you must also use '${inequality.toString()}' ` +\n        `as your first orderBy(), but your first orderBy() ` +\n        `is on field '${orderBy.toString()}' instead.`\n    );\n  }\n}\n\nexport function validateHasExplicitOrderByForLimitToLast(\n  query: InternalQuery\n): void {\n  if (query.hasLimitToLast() && query.explicitOrderBy.length === 0) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'limitToLast() queries require specifying at least one orderBy() clause'\n    );\n  }\n}\n\nexport class Query<T = firestore.DocumentData> implements firestore.Query<T> {\n  constructor(\n    public _query: InternalQuery,\n    readonly firestore: Firestore,\n    protected readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {}\n\n  where(\n    field: string | ExternalFieldPath,\n    opStr: firestore.WhereFilterOp,\n    value: unknown\n  ): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.where', arguments, 3);\n    validateDefined('Query.where', 3, value);\n\n    // Enumerated from the WhereFilterOp type in index.d.ts.\n    const whereFilterOpEnums = [\n      Operator.LESS_THAN,\n      Operator.LESS_THAN_OR_EQUAL,\n      Operator.EQUAL,\n      Operator.GREATER_THAN_OR_EQUAL,\n      Operator.GREATER_THAN,\n      Operator.ARRAY_CONTAINS,\n      Operator.IN,\n      Operator.ARRAY_CONTAINS_ANY\n    ];\n    const op = validateStringEnum('Query.where', whereFilterOpEnums, 2, opStr);\n    const fieldPath = fieldPathFromArgument('Query.where', field);\n    const filter = newQueryFilter(\n      this._query,\n      'Query.where',\n      this.firestore._dataReader,\n      this.firestore._databaseId,\n      fieldPath,\n      op,\n      value\n    );\n    return new Query(\n      queryWithAddedFilter(this._query, filter),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  orderBy(\n    field: string | ExternalFieldPath,\n    directionStr?: firestore.OrderByDirection\n  ): firestore.Query<T> {\n    validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n    validateOptionalArgType(\n      'Query.orderBy',\n      'non-empty string',\n      2,\n      directionStr\n    );\n    let direction: Direction;\n    if (directionStr === undefined || directionStr === 'asc') {\n      direction = Direction.ASCENDING;\n    } else if (directionStr === 'desc') {\n      direction = Direction.DESCENDING;\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function Query.orderBy() has unknown direction '${directionStr}', ` +\n          `expected 'asc' or 'desc'.`\n      );\n    }\n    const fieldPath = fieldPathFromArgument('Query.orderBy', field);\n    const orderBy = newQueryOrderBy(this._query, fieldPath, direction);\n    return new Query(\n      queryWithAddedOrderBy(this._query, orderBy),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limit(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limit', arguments, 1);\n    validateArgType('Query.limit', 'number', 1, n);\n    validatePositiveNumber('Query.limit', 1, n);\n    return new Query(\n      queryWithLimit(this._query, n, LimitType.First),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limitToLast(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limitToLast', arguments, 1);\n    validateArgType('Query.limitToLast', 'number', 1, n);\n    validatePositiveNumber('Query.limitToLast', 1, n);\n    return new Query(\n      queryWithLimit(this._query, n, LimitType.Last),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAt',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      queryWithStartAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAfter(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAfter',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      queryWithStartAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endBefore(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endBefore',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      queryWithEndAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endAt',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      queryWithEndAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  isEqual(other: firestore.Query<T>): boolean {\n    if (!(other instanceof Query)) {\n      throw invalidClassError('isEqual', 'Query', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      queryEquals(this._query, other._query) &&\n      this._converter === other._converter\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.Query<U> {\n    return new Query<U>(this._query, this.firestore, converter);\n  }\n\n  /** Helper function to create a bound from a document or fields */\n  private boundFromDocOrFields(\n    methodName: string,\n    docOrField: unknown | firestore.DocumentSnapshot<T>,\n    fields: unknown[],\n    before: boolean\n  ): Bound {\n    validateDefined(methodName, 1, docOrField);\n    if (docOrField instanceof DocumentSnapshot) {\n      validateExactNumberOfArgs(methodName, [docOrField, ...fields], 1);\n      return newQueryBoundFromDocument(\n        this._query,\n        this.firestore._databaseId,\n        methodName,\n        docOrField._document,\n        before\n      );\n    } else {\n      const allFields = [docOrField].concat(fields);\n      return newQueryBoundFromFields(\n        this._query,\n        this.firestore._databaseId,\n        this.firestore._dataReader,\n        methodName,\n        allFields,\n        before\n      );\n    }\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n    let options: firestore.SnapshotListenOptions = {};\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('Query.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'Query.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    if (isPartialObserver(args[currArg])) {\n      const userObserver = args[currArg] as PartialObserver<\n        firestore.QuerySnapshot<T>\n      >;\n      args[currArg] = userObserver.next?.bind(userObserver);\n      args[currArg + 1] = userObserver.error?.bind(userObserver);\n      args[currArg + 2] = userObserver.complete?.bind(userObserver);\n    } else {\n      validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n    }\n\n    const observer: PartialObserver<ViewSnapshot> = {\n      next: snapshot => {\n        if (args[currArg]) {\n          (args[currArg] as NextFn<firestore.QuerySnapshot<T>>)(\n            new QuerySnapshot(\n              this.firestore,\n              this._query,\n              snapshot,\n              this._converter\n            )\n          );\n        }\n      },\n      error: args[currArg + 1] as ErrorFn,\n      complete: args[currArg + 2] as CompleteFn\n    };\n\n    validateHasExplicitOrderByForLimitToLast(this._query);\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    return addQuerySnapshotListener(\n      firestoreClient,\n      this._query,\n      options,\n      observer\n    );\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.QuerySnapshot<T>> {\n    validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);\n    validateGetOptions('Query.get', options);\n    validateHasExplicitOrderByForLimitToLast(this._query);\n\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    return (options && options.source === 'cache'\n      ? firestoreClient.getDocumentsFromLocalCache(this._query)\n      : getDocsViaSnapshotListener(firestoreClient, this._query, options)\n    ).then(\n      snap =>\n        new QuerySnapshot(this.firestore, this._query, snap, this._converter)\n    );\n  }\n}\n\n/**\n * Retrieves a latency-compensated query snapshot from the backend via a\n * SnapshotListener.\n */\nexport function getDocsViaSnapshotListener(\n  firestore: FirestoreClient,\n  query: InternalQuery,\n  options?: firestore.GetOptions\n): Promise<ViewSnapshot> {\n  const result = new Deferred<ViewSnapshot>();\n  const unlisten = addQuerySnapshotListener(\n    firestore,\n    query,\n    {\n      includeMetadataChanges: true,\n      waitForSyncWhenOnline: true\n    },\n    {\n      next: snapshot => {\n        // Remove query first before passing event to user to avoid\n        // user actions affecting the now stale query.\n        unlisten();\n\n        if (snapshot.fromCache && options && options.source === 'server') {\n          result.reject(\n            new FirestoreError(\n              Code.UNAVAILABLE,\n              'Failed to get documents from server. (However, these ' +\n                'documents may exist in the local cache. Run again ' +\n                'without setting source to \"server\" to ' +\n                'retrieve the cached documents.)'\n            )\n          );\n        } else {\n          result.resolve(snapshot);\n        }\n      },\n      error: e => result.reject(e)\n    }\n  );\n  return result.promise;\n}\n\n/** Registers an internal snapshot listener for `query`. */\nexport function addQuerySnapshotListener(\n  firestore: FirestoreClient,\n  query: InternalQuery,\n  options: ListenOptions,\n  observer: PartialObserver<ViewSnapshot>\n): Unsubscribe {\n  let errHandler = (err: Error): void => {\n    console.error('Uncaught Error in onSnapshot:', err);\n  };\n  if (observer.error) {\n    errHandler = observer.error.bind(observer);\n  }\n  const asyncObserver = new AsyncObserver<ViewSnapshot>({\n    next: (result: ViewSnapshot): void => {\n      if (observer.next) {\n        observer.next(result);\n      }\n    },\n    error: errHandler\n  });\n\n  const internalListener = firestore.listen(query, asyncObserver, options);\n  return (): void => {\n    asyncObserver.mute();\n    firestore.unlisten(internalListener);\n  };\n}\n\nexport class QuerySnapshot<T = firestore.DocumentData>\n  implements firestore.QuerySnapshot<T> {\n  private _cachedChanges: Array<firestore.DocumentChange<T>> | null = null;\n  private _cachedChangesIncludeMetadataChanges: boolean | null = null;\n\n  readonly metadata: firestore.SnapshotMetadata;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _originalQuery: InternalQuery,\n    private readonly _snapshot: ViewSnapshot,\n    private readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    this.metadata = new SnapshotMetadata(\n      _snapshot.hasPendingWrites,\n      _snapshot.fromCache\n    );\n  }\n\n  get docs(): Array<firestore.QueryDocumentSnapshot<T>> {\n    const result: Array<firestore.QueryDocumentSnapshot<T>> = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n\n  get empty(): boolean {\n    return this._snapshot.docs.isEmpty();\n  }\n\n  get size(): number {\n    return this._snapshot.docs.size;\n  }\n\n  forEach(\n    callback: (result: firestore.QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n    validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n    this._snapshot.docs.forEach(doc => {\n      callback.call(\n        thisArg,\n        this.convertToDocumentImpl(\n          doc,\n          this.metadata.fromCache,\n          this._snapshot.mutatedKeys.has(doc.key)\n        )\n      );\n    });\n  }\n\n  get query(): firestore.Query<T> {\n    return new Query(this._originalQuery, this._firestore, this._converter);\n  }\n\n  docChanges(\n    options?: firestore.SnapshotListenOptions\n  ): Array<firestore.DocumentChange<T>> {\n    if (options) {\n      validateOptionNames('QuerySnapshot.docChanges', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'QuerySnapshot.docChanges',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n    }\n\n    const includeMetadataChanges = !!(\n      options && options.includeMetadataChanges\n    );\n\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'To include metadata changes with your document changes, you must ' +\n          'also pass { includeMetadataChanges:true } to onSnapshot().'\n      );\n    }\n\n    if (\n      !this._cachedChanges ||\n      this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges\n    ) {\n      this._cachedChanges = changesFromSnapshot<QueryDocumentSnapshot<T>>(\n        this._snapshot,\n        includeMetadataChanges,\n        this.convertToDocumentImpl.bind(this)\n      );\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n\n    return this._cachedChanges;\n  }\n\n  /** Check the equality. The call can be very expensive. */\n  isEqual(other: firestore.QuerySnapshot<T>): boolean {\n    if (!(other instanceof QuerySnapshot)) {\n      throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n    }\n\n    return (\n      this._firestore === other._firestore &&\n      queryEquals(this._originalQuery, other._originalQuery) &&\n      this._snapshot.isEqual(other._snapshot) &&\n      this._converter === other._converter\n    );\n  }\n\n  private convertToDocumentImpl(\n    doc: Document,\n    fromCache: boolean,\n    hasPendingWrites: boolean\n  ): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot(\n      this._firestore,\n      doc.key,\n      doc,\n      fromCache,\n      hasPendingWrites,\n      this._converter\n    );\n  }\n}\n\nexport class CollectionReference<T = firestore.DocumentData> extends Query<T>\n  implements firestore.CollectionReference<T> {\n  constructor(\n    readonly _path: ResourcePath,\n    firestore: Firestore,\n    _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(newQueryForPath(_path), firestore, _converter);\n    if (_path.length % 2 !== 1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid collection reference. Collection ' +\n          'references must have an odd number of segments, but ' +\n          `${_path.canonicalString()} has ${_path.length}`\n      );\n    }\n  }\n\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  get parent(): firestore.DocumentReference<firestore.DocumentData> | null {\n    const parentPath = this._query.path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference<firestore.DocumentData>(\n        new DocumentKey(parentPath),\n        this.firestore,\n        /* converter= */ null\n      );\n    }\n  }\n\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  doc(pathString?: string): firestore.DocumentReference<T> {\n    validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    if (arguments.length === 0) {\n      pathString = AutoId.newId();\n    }\n    validateArgType(\n      'CollectionReference.doc',\n      'non-empty string',\n      1,\n      pathString\n    );\n    const path = ResourcePath.fromString(pathString!);\n    return DocumentReference.forPath<T>(\n      this._query.path.child(path),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  add(value: T): Promise<firestore.DocumentReference<T>> {\n    validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n    const convertedValue = this._converter\n      ? this._converter.toFirestore(value)\n      : value;\n    validateArgType('CollectionReference.add', 'object', 1, convertedValue);\n    const docRef = this.doc();\n    return docRef.set(value).then(() => docRef);\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.CollectionReference<U> {\n    return new CollectionReference<U>(this._path, this.firestore, converter);\n  }\n}\n\nfunction validateSetOptions(\n  methodName: string,\n  options: firestore.SetOptions | undefined\n): firestore.SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  validateOptionNames(methodName, options, ['merge', 'mergeFields']);\n  validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n  validateOptionalArrayElements(\n    methodName,\n    'mergeFields',\n    'a string or a FieldPath',\n    options.mergeFields,\n    element =>\n      typeof element === 'string' || element instanceof ExternalFieldPath\n  );\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid options passed to function ${methodName}(): You cannot specify both \"merge\" ` +\n        `and \"mergeFields\".`\n    );\n  }\n\n  return options;\n}\n\nfunction validateSnapshotOptions(\n  methodName: string,\n  options: firestore.SnapshotOptions | undefined\n): firestore.SnapshotOptions {\n  if (options === undefined) {\n    return {};\n  }\n\n  validateOptionNames(methodName, options, ['serverTimestamps']);\n  validateNamedOptionalPropertyEquals(\n    methodName,\n    'options',\n    'serverTimestamps',\n    options.serverTimestamps,\n    ['estimate', 'previous', 'none']\n  );\n  return options;\n}\n\nfunction validateGetOptions(\n  methodName: string,\n  options: firestore.GetOptions | undefined\n): void {\n  validateOptionalArgType(methodName, 'object', 1, options);\n  if (options) {\n    validateOptionNames(methodName, options, ['source']);\n    validateNamedOptionalPropertyEquals(\n      methodName,\n      'options',\n      'source',\n      options.source,\n      ['default', 'server', 'cache']\n    );\n  }\n}\n\nfunction validateReference<T>(\n  methodName: string,\n  documentRef: firestore.DocumentReference<T>,\n  firestore: Firestore\n): DocumentKeyReference<T> {\n  if (!(documentRef instanceof DocumentKeyReference)) {\n    throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n  } else if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return documentRef;\n  }\n}\n\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n *\n * @param snapshot The ViewSnapshot that represents the expected state.\n * @param includeMetadataChanges Whether to include metadata changes.\n * @param converter A factory function that returns a QueryDocumentSnapshot.\n * @return An objecyt that matches the firestore.DocumentChange API.\n */\nexport function changesFromSnapshot<DocSnap>(\n  snapshot: ViewSnapshot,\n  includeMetadataChanges: boolean,\n  converter: (\n    doc: Document,\n    fromCache: boolean,\n    hasPendingWrite: boolean\n  ) => DocSnap\n): Array<{\n  type: firestore.DocumentChangeType;\n  doc: DocSnap;\n  oldIndex: number;\n  newIndex: number;\n}> {\n  if (snapshot.oldDocs.isEmpty()) {\n    // Special case the first snapshot because index calculation is easy and\n    // fast\n    let lastDoc: Document;\n    let index = 0;\n    return snapshot.docChanges.map(change => {\n      const doc = converter(\n        change.doc,\n        snapshot.fromCache,\n        snapshot.mutatedKeys.has(change.doc.key)\n      );\n      debugAssert(\n        change.type === ChangeType.Added,\n        'Invalid event type for first snapshot'\n      );\n      debugAssert(\n        !lastDoc || newQueryComparator(snapshot.query)(lastDoc, change.doc) < 0,\n        'Got added events in wrong order'\n      );\n      lastDoc = change.doc;\n      return {\n        type: 'added' as firestore.DocumentChangeType,\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A DocumentSet that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = snapshot.oldDocs;\n    return snapshot.docChanges\n      .filter(\n        change => includeMetadataChanges || change.type !== ChangeType.Metadata\n      )\n      .map(change => {\n        const doc = converter(\n          change.doc,\n          snapshot.fromCache,\n          snapshot.mutatedKeys.has(change.doc.key)\n        );\n        let oldIndex = -1;\n        let newIndex = -1;\n        if (change.type !== ChangeType.Added) {\n          oldIndex = indexTracker.indexOf(change.doc.key);\n          debugAssert(oldIndex >= 0, 'Index for document not found');\n          indexTracker = indexTracker.delete(change.doc.key);\n        }\n        if (change.type !== ChangeType.Removed) {\n          indexTracker = indexTracker.add(change.doc);\n          newIndex = indexTracker.indexOf(change.doc.key);\n        }\n        return { type: resultChangeType(change.type), doc, oldIndex, newIndex };\n      });\n  }\n}\n\nfunction resultChangeType(type: ChangeType): firestore.DocumentChangeType {\n  switch (type) {\n    case ChangeType.Added:\n      return 'added';\n    case ChangeType.Modified:\n    case ChangeType.Metadata:\n      return 'modified';\n    case ChangeType.Removed:\n      return 'removed';\n    default:\n      return fail('Unknown change type: ' + type);\n  }\n}\n\n/**\n * Converts custom model object of type T into DocumentData by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to DocumentData\n * because we want to provide the user with a more specific error message if\n * their set() or fails due to invalid data originating from a toFirestore()\n * call.\n */\nexport function applyFirestoreDataConverter<T>(\n  converter: UntypedFirestoreDataConverter<T> | null,\n  value: T,\n  options?: firestore.SetOptions\n): firestore.DocumentData {\n  let convertedValue;\n  if (converter) {\n    if (options && (options.merge || options.mergeFields)) {\n      // Cast to `any` in order to satisfy the union type constraint on\n      // toFirestore().\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      convertedValue = (converter as any).toFirestore(value, options);\n    } else {\n      convertedValue = converter.toFirestore(value);\n    }\n  } else {\n    convertedValue = value as firestore.DocumentData;\n  }\n  return convertedValue;\n}\n\nfunction contains(obj: object, key: string): obj is { key: unknown } {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType, Provider } from '@firebase/component';\nimport {\n  CACHE_SIZE_UNLIMITED,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Firestore,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  Transaction,\n  WriteBatch\n} from './api/database';\nimport { Blob } from './api/blob';\nimport { FieldPath } from './api/field_path';\nimport { GeoPoint } from './api/geo_point';\nimport { Timestamp } from './api/timestamp';\nimport { FieldValue } from './api/field_value';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel: Firestore.setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase The FirebaseNamespace to register Firestore with\n * @param firestoreFactory A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport { Firestore } from './src/api/database';\nimport { MemoryComponentProvider } from './src/core/component_provider';\nimport { configureForFirebase } from './src/config';\n\nimport './register-module';\n\nimport { name, version } from './package.json';\n\n/**\n * Registers the memory-only Firestore build with the components framework.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, auth) => new Firestore(app, auth, new MemoryComponentProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\n"],"names":["__PRIVATE_logClient","Logger","__PRIVATE_getLogLevel","logLevel","__PRIVATE_logDebug","msg","LogLevel","DEBUG","args","obj","map","__PRIVATE_argToString","debug","__PRIVATE_logError","ERROR","error","value","JSON","stringify","e","fail","__PRIVATE_failure","message","Error","__PRIVATE_hardAssert","assertion","__PRIVATE_debugCast","constructor","__PRIVATE_randomBytes","__PRIVATE_nBytes","crypto","self","msCrypto","bytes","Uint8Array","getRandomValues","__PRIVATE_i","Math","floor","random","[object Object]","__PRIVATE_chars","__PRIVATE_maxMultiple","length","__PRIVATE_autoId","charAt","__PRIVATE_primitiveComparator","left","right","__PRIVATE_arrayEquals","__PRIVATE_comparator","every","index","__PRIVATE_databaseId","persistenceKey","host","ssl","forceLongPolling","this","projectId","database","i","other","__PRIVATE_DatabaseId","__PRIVATE_objectSize","count","key","Object","prototype","hasOwnProperty","call","forEach","fn","__PRIVATE_isEmpty","__PRIVATE_mapKeyFn","__PRIVATE_equalsFn","id","matches","__PRIVATE_inner","__PRIVATE_otherKey","get","push","splice","__PRIVATE__","entries","k","v","Code","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","code","super","toString","name","seconds","nanoseconds","FirestoreError","Timestamp","fromMillis","Date","now","date","getTime","milliseconds","toMillis","__PRIVATE_adjustedSeconds","String","padStart","timestamp","__PRIVATE_SnapshotVersion","__PRIVATE__compareTo","isEqual","segments","offset","__PRIVATE_len","__PRIVATE_BasePath","__PRIVATE_nameOrPath","slice","limit","__PRIVATE_segment","__PRIVATE_construct","size","__PRIVATE_potentialChild","end","p1","p2","min","ResourcePath","__PRIVATE_toArray","join","__PRIVATE_canonicalString","path","indexOf","split","filter","__PRIVATE_identifierRegExp","FieldPath","test","str","replace","__PRIVATE_isValidIdentifier","__PRIVATE_current","__PRIVATE_addCurrentSegment","__PRIVATE_inBackticks","c","next","__PRIVATE_DocumentKey","__PRIVATE_fromString","__PRIVATE_popFirst","collectionId","k1","k2","__PRIVATE_isNullOrUndefined","__PRIVATE_isNegativeZero","collectionGroup","orderBy","filters","startAt","endAt","__PRIVATE_newTarget","__PRIVATE_TargetImpl","__PRIVATE_canonifyTarget","target","__PRIVATE_targetImpl","__PRIVATE_memoizedCanonicalId","canonicalId","f","__PRIVATE_canonifyFilter","field","op","o","__PRIVATE_canonifyOrderBy","dir","__PRIVATE_canonifyBound","__PRIVATE_targetEquals","__PRIVATE_orderByEquals","__PRIVATE_f1","__PRIVATE_f2","FieldFilter","__PRIVATE_valueEquals","__PRIVATE_boundEquals","__PRIVATE_isDocumentTarget","__PRIVATE_isDocumentKey","__PRIVATE_binaryString","base64","__PRIVATE_ByteString","atob","array","fromCharCode","raw","btoa","buffer","charCodeAt","__PRIVATE_RpcCode","targetId","__PRIVATE_purpose","sequenceNumber","__PRIVATE_snapshotVersion","lastLimboFreeSnapshotVersion","resumeToken","__PRIVATE_EMPTY_BYTE_STRING","__PRIVATE_TargetData","__PRIVATE_isPermanentError","__PRIVATE_mapCodeFromRpcCode","RpcCode","root","__PRIVATE_LLRBNode","EMPTY","__PRIVATE_SortedMap","__PRIVATE_insert","copy","__PRIVATE_BLACK","remove","node","cmp","__PRIVATE_prunedNodes","__PRIVATE_minKey","__PRIVATE_maxKey","action","__PRIVATE_inorderTraversal","__PRIVATE_descriptions","__PRIVATE_reverseTraversal","__PRIVATE_SortedMapIterator","__PRIVATE_startKey","__PRIVATE_isReverse","__PRIVATE_nodeStack","pop","result","color","RED","n","__PRIVATE_fixUp","__PRIVATE_isRed","__PRIVATE_moveRedLeft","__PRIVATE_removeMin","__PRIVATE_smallest","__PRIVATE_rotateRight","__PRIVATE_moveRedRight","__PRIVATE_rotateLeft","__PRIVATE_colorFlip","__PRIVATE_nl","__PRIVATE_nr","__PRIVATE_blackDepth","__PRIVATE_check","pow","data","__PRIVATE_elem","cb","range","__PRIVATE_iter","__PRIVATE_getIteratorFrom","__PRIVATE_hasNext","__PRIVATE_getNext","start","__PRIVATE_getIterator","__PRIVATE_SortedSetIterator","has","add","__PRIVATE_SortedSet","__PRIVATE_thisIt","__PRIVATE_otherIt","__PRIVATE_thisElem","__PRIVATE_otherElem","__PRIVATE_res","__PRIVATE_EMPTY_MAYBE_DOCUMENT_MAP","__PRIVATE_maybeDocumentMap","__PRIVATE_nullableMaybeDocumentMap","__PRIVATE_EMPTY_DOCUMENT_MAP","__PRIVATE_documentMap","__PRIVATE_EMPTY_DOCUMENT_VERSION_MAP","__PRIVATE_EMPTY_DOCUMENT_KEY_SET","__PRIVATE_documentKeySet","set","keys","__PRIVATE_EMPTY_TARGET_ID_SET","__PRIVATE_targetIdSet","__PRIVATE_comp","__PRIVATE_d1","__PRIVATE_d2","__PRIVATE_keyedMap","__PRIVATE_sortedSet","__PRIVATE_oldSet","__PRIVATE_DocumentSet","doc","delete","__PRIVATE_thisDoc","__PRIVATE_otherDoc","__PRIVATE_docStrings","__PRIVATE_newSet","__PRIVATE_change","__PRIVATE_oldChange","__PRIVATE_changeMap","type","__PRIVATE_changes","query","docs","__PRIVATE_oldDocs","docChanges","__PRIVATE_mutatedKeys","fromCache","__PRIVATE_syncStateChanged","__PRIVATE_excludesMetadataChanges","documents","__PRIVATE_ViewSnapshot","__PRIVATE_emptySet","hasPendingWrites","__PRIVATE_queryEquals","__PRIVATE_otherChanges","__PRIVATE_targetChanges","__PRIVATE_targetMismatches","__PRIVATE_documentUpdates","__PRIVATE_resolvedLimboDocuments","Map","TargetChange","__PRIVATE_createSynthesizedTargetChangeForCurrentChange","__PRIVATE_RemoteEvent","__PRIVATE_addedDocuments","__PRIVATE_modifiedDocuments","__PRIVATE_removedDocuments","__PRIVATE_updatedTargetIds","removedTargetIds","__PRIVATE_newDoc","__PRIVATE_existenceFilter","state","targetIds","cause","__PRIVATE_snapshotChangesMap","Ht","__PRIVATE__current","__PRIVATE__resumeToken","he","__PRIVATE_pendingResponses","ae","__PRIVATE__hasPendingChanges","__PRIVATE_approximateByteSize","__PRIVATE_documentChanges","__PRIVATE_changeType","__PRIVATE_metadataProvider","__PRIVATE_documentTargetMap","__PRIVATE_docChange","Document","__PRIVATE_addDocumentToTarget","__PRIVATE_NoDocument","__PRIVATE_removeDocumentFromTarget","targetChange","__PRIVATE_forEachTarget","__PRIVATE_targetState","__PRIVATE_ensureTargetState","__PRIVATE_isActiveTarget","__PRIVATE_updateResumeToken","__PRIVATE_recordTargetResponse","__PRIVATE_isPending","__PRIVATE_clearPendingChanges","removeTarget","__PRIVATE_markCurrent","__PRIVATE_resetTarget","__PRIVATE_targetStates","__PRIVATE_watchChange","__PRIVATE_expectedCount","__PRIVATE_targetData","__PRIVATE_targetDataForActiveTarget","__PRIVATE_getCurrentDocumentCountForTarget","__PRIVATE_pendingTargetResets","__PRIVATE_pendingDocumentUpdates","__PRIVATE_targetContainsDocument","__PRIVATE_hasPendingChanges","__PRIVATE_toTargetChange","__PRIVATE_pendingDocumentTargetMapping","__PRIVATE_targets","__PRIVATE_isOnlyLimboTarget","__PRIVATE_forEachWhile","__PRIVATE_remoteEvent","document","__PRIVATE_addDocumentChange","__PRIVATE_ensureDocumentTargetMapping","__PRIVATE_updatedDocument","__PRIVATE_removeDocumentChange","__PRIVATE_getRemoteKeysForTarget","__PRIVATE_recordPendingTargetRequest","__PRIVATE_TargetState","__PRIVATE_targetMapping","__PRIVATE_targetActive","__PRIVATE_getTargetDataForTarget","__PRIVATE_isServerTimestamp","mapValue","fields","__type__","stringValue","__PRIVATE_getLocalWriteTime","__PRIVATE_localWriteTime","__PRIVATE_normalizeTimestamp","__local_write_time__","timestampValue","nanos","__PRIVATE_ISO_TIMESTAMP_REG_EXP","RegExp","__PRIVATE_typeOrder","__PRIVATE_leftType","booleanValue","__PRIVATE_leftTimestamp","__PRIVATE_rightTimestamp","__PRIVATE_normalizeByteString","bytesValue","referenceValue","__PRIVATE_normalizeNumber","geoPointValue","latitude","longitude","integerValue","__PRIVATE_n1","doubleValue","__PRIVATE_n2","isNaN","arrayValue","values","__PRIVATE_leftMap","__PRIVATE_rightMap","__PRIVATE_arrayValueContains","__PRIVATE_haystack","__PRIVATE_needle","find","__PRIVATE_valueCompare","__PRIVATE_rightType","__PRIVATE_leftNumber","__PRIVATE_rightNumber","__PRIVATE_compareTimestamps","__PRIVATE_leftBytes","__PRIVATE_rightBytes","__PRIVATE_compareTo","__PRIVATE_leftPath","__PRIVATE_rightPath","__PRIVATE_leftSegments","__PRIVATE_rightSegments","__PRIVATE_comparison","__PRIVATE_leftArray","__PRIVATE_rightArray","compare","__PRIVATE_leftKeys","__PRIVATE_rightKeys","sort","__PRIVATE_keyCompare","__PRIVATE_canonifyValue","__PRIVATE_normalizedTimestamp","toBase64","__PRIVATE_fromName","__PRIVATE_geoPoint","first","__PRIVATE_sortedKeys","__PRIVATE_fraction","exec","__PRIVATE_nanoStr","substr","Number","__PRIVATE_parsedDate","blob","fromBase64String","fromUint8Array","__PRIVATE_refValue","isInteger","isArray","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_isMapValue","__PRIVATE_DIRECTIONS","asc","desc","__PRIVATE_OPERATORS","<","<=",">",">=","==","array-contains","in","array-contains-any","__PRIVATE_useProto3Json","__PRIVATE_toInteger","__PRIVATE_toDouble","serializer","Infinity","__PRIVATE_toNumber","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","__PRIVATE_toTimestamp","toISOString","__PRIVATE_toBytes","toUint8Array","toVersion","version","fromVersion","__PRIVATE_fromTimestamp","__PRIVATE_toResourceName","child","__PRIVATE_toName","__PRIVATE_resourceName","__PRIVATE_resource","__PRIVATE_isValidResourceName","__PRIVATE_toQueryPath","__PRIVATE_getEncodedDatabaseId","__PRIVATE_toMutationDocument","proto","__PRIVATE_toMutation","__PRIVATE_mutation","__PRIVATE_SetMutation","update","__PRIVATE_DeleteMutation","__PRIVATE_PatchMutation","updateMask","__PRIVATE_toDocumentMask","__PRIVATE_fieldMask","__PRIVATE_TransformMutation","transform","fieldTransforms","__PRIVATE_fieldTransform","__PRIVATE_ServerTimestampTransform","fieldPath","setToServerValue","__PRIVATE_ArrayUnionTransformOperation","appendMissingElements","elements","__PRIVATE_ArrayRemoveTransformOperation","removeAllFromArray","__PRIVATE_NumericIncrementTransformOperation","increment","__PRIVATE_operand","__PRIVATE_VerifyMutation","verify","__PRIVATE_precondition","__PRIVATE_isNone","currentDocument","updateTime","exists","__PRIVATE_toDocumentsTarget","__PRIVATE_toQueryTarget","structuredQuery","parent","from","allDescendants","__PRIVATE_popLast","__PRIVATE_lastSegment","where","__PRIVATE_protos","unaryFilter","__PRIVATE_toFieldPathReference","fieldFilter","compositeFilter","__PRIVATE_orderBys","order","__PRIVATE_toPropertyOrder","direction","val","__PRIVATE_toCursor","cursor","before","position","__PRIVATE_canonicalFields","fieldPaths","__PRIVATE_applyTransformOperationToLocalView","previousValue","__previous_value__","__PRIVATE_applyArrayUnionTransformOperation","__PRIVATE_applyArrayRemoveTransformOperation","__PRIVATE_baseValue","__PRIVATE_computeTransformOperationBaseValue","__PRIVATE_sum","asNumber","__PRIVATE_applyTransformOperationToRemoteDocument","__PRIVATE_transformResult","__PRIVATE_TransformOperation","__PRIVATE_coercedFieldValuesArray","__PRIVATE_toUnion","some","element","__PRIVATE_toRemove","__PRIVATE_isPrefixOf","__PRIVATE_l","r","transformResults","Precondition","Ue","__PRIVATE_preconditionIsValidForDocument","__PRIVATE_maybeDoc","__PRIVATE_applyMutationToRemoteDocument","__PRIVATE_mutationResult","hasCommittedMutations","__PRIVATE_UnknownDocument","__PRIVATE_newData","__PRIVATE_patchDocument","__PRIVATE_requireDocument","__PRIVATE_baseDoc","__PRIVATE_serverTransformResults","__PRIVATE_transformObject","__PRIVATE_applyMutationToLocalView","__PRIVATE_getPostMutationVersion","Ge","__PRIVATE_extractMutationBaseValue","__PRIVATE_baseObject","__PRIVATE_existingValue","__PRIVATE_coercedValue","__PRIVATE_ObjectValueBuilder","__PRIVATE_build","__PRIVATE_mutationEquals","__PRIVATE_fieldTransformEquals","__PRIVATE_Mutation","__PRIVATE_builder","newValue","__PRIVATE_ObjectValue","empty","__PRIVATE_setOverlay","__PRIVATE_currentLevel","__PRIVATE_overlayMap","__PRIVATE_currentSegment","currentValue","__PRIVATE_mergedResult","__PRIVATE_applyOverlay","__PRIVATE_emptyPath","__PRIVATE_currentPath","__PRIVATE_currentOverlays","__PRIVATE_modified","__PRIVATE_resultAtPath","__PRIVATE_pathSegment","__PRIVATE_nested","__PRIVATE_extractFieldMask","__PRIVATE_nestedFields","__PRIVATE_nestedPath","__PRIVATE_FieldMask","__PRIVATE_objectValue","options","__PRIVATE_hasLocalMutations","__PRIVATE_MaybeDocument","__PRIVATE_cast","__PRIVATE_explicitOrderBy","__PRIVATE_limitType","__PRIVATE_QueryImpl","__PRIVATE_isKeyField","__PRIVATE_isInequality","__PRIVATE_operators","__PRIVATE_newQueryForPath","__PRIVATE_isCollectionGroupQuery","__PRIVATE_queryOrderBy","__PRIVATE_queryImpl","__PRIVATE_memoizedOrderBy","__PRIVATE_inequalityField","__PRIVATE_getInequalityFilterField","__PRIVATE_firstOrderByField","__PRIVATE_getFirstOrderByField","__PRIVATE_OrderBy","__PRIVATE_keyField","__PRIVATE_foundKeyOrdering","__PRIVATE_lastDirection","__PRIVATE_queryToTarget","__PRIVATE_memoizedTarget","__PRIVATE_Bound","__PRIVATE_queryWithLimit","__PRIVATE_queryWithStartAt","bound","__PRIVATE_queryWithEndAt","__PRIVATE_canonifyQuery","__PRIVATE_stringifyQuery","__PRIVATE_stringifyFilter","__PRIVATE_stringifyOrderBy","__PRIVATE_stringifyTarget","__PRIVATE_queryMatches","__PRIVATE_docPath","__PRIVATE_hasCollectionId","__PRIVATE_isImmediateParentOf","__PRIVATE_sortsBeforeDocument","__PRIVATE_newQueryComparator","__PRIVATE_comparedOnKeyField","__PRIVATE_compareDocs","__PRIVATE_KeyFieldInFilter","__PRIVATE_KeyFieldFilter","__PRIVATE_ArrayContainsFilter","__PRIVATE_InFilter","__PRIVATE_ArrayContainsAnyFilter","__PRIVATE_matchesComparison","p","__PRIVATE_orderByComponent","component","v1","v2","batchId","baseMutations","mutations","__PRIVATE_docKey","__PRIVATE_batchResult","__PRIVATE_mutationResults","__PRIVATE_maybeDocs","__PRIVATE_mutatedDocuments","m","__PRIVATE_mutatedDocument","__PRIVATE_applyToLocalView","reduce","batch","__PRIVATE_commitVersion","__PRIVATE_docVersions","results","__PRIVATE_versionMap","__PRIVATE_MutationBatchResult","callback","__PRIVATE_isDone","__PRIVATE_nextCallback","__PRIVATE_catchCallback","__PRIVATE_nextFn","__PRIVATE_catchFn","__PRIVATE_callbackAttached","__PRIVATE_wrapFailure","__PRIVATE_wrapSuccess","PersistencePromise","resolve","reject","Promise","__PRIVATE_wrapUserFunction","all","__PRIVATE_resolvedCount","done","err","__PRIVATE_predicates","predicate","__PRIVATE_isTrue","collection","__PRIVATE_promises","s","__PRIVATE_waitFor","__PRIVATE_remoteDocumentCache","__PRIVATE_mutationQueue","__PRIVATE_indexManager","transaction","__PRIVATE_getAllMutationBatchesAffectingDocumentKey","__PRIVATE_batches","__PRIVATE_getDocumentInternal","__PRIVATE_inBatches","__PRIVATE_getEntry","__PRIVATE_localView","getEntries","__PRIVATE_getLocalViewOfDocuments","__PRIVATE_baseDocs","__PRIVATE_getAllMutationBatchesAffectingDocumentKeys","__PRIVATE_applyLocalMutationsToDocuments","__PRIVATE_sinceReadTime","__PRIVATE_getDocumentsMatchingDocumentQuery","__PRIVATE_getDocumentsMatchingCollectionGroupQuery","__PRIVATE_getDocumentsMatchingCollectionQuery","__PRIVATE_getDocument","__PRIVATE_getCollectionParents","__PRIVATE_parents","__PRIVATE_collectionQuery","__PRIVATE_asCollectionQueryAtPath","__PRIVATE_mutationBatches","__PRIVATE_getDocumentsMatchingQuery","__PRIVATE_queryResults","__PRIVATE_getAllMutationBatchesAffectingQuery","__PRIVATE_matchingMutationBatches","__PRIVATE_addMissingBaseDocuments","__PRIVATE_mergedDocuments","__PRIVATE_mutatedDoc","__PRIVATE_existingDocuments","__PRIVATE_missingBaseDocEntriesForPatching","__PRIVATE_missingBaseDocs","__PRIVATE_addedKeys","__PRIVATE_removedKeys","__PRIVATE_viewSnapshot","__PRIVATE_LocalViewChanges","__PRIVATE_sequenceNumberSyncer","__PRIVATE_sequenceNumberHandler","__PRIVATE_setPreviousValue","__PRIVATE_writeNewSequenceNumber","__PRIVATE_writeSequenceNumber","__PRIVATE_externalPreviousValue","max","__PRIVATE_nextValue","__PRIVATE_ListenSequence","promise","__PRIVATE_queue","__PRIVATE_timerId","__PRIVATE_initialDelayMs","__PRIVATE_backoffFactor","__PRIVATE_maxDelayMs","reset","__PRIVATE_currentBaseMs","cancel","__PRIVATE_desiredDelayWithJitterMs","__PRIVATE_jitterDelayMs","__PRIVATE_delaySoFarMs","__PRIVATE_lastAttemptTime","__PRIVATE_remainingDelayMs","__PRIVATE_timerPromise","__PRIVATE_enqueueAfterDelay","__PRIVATE_skipDelay","__PRIVATE_MemoryCollectionParentIndex","collectionPath","__PRIVATE_collectionParentIndex","parentPath","__PRIVATE_existingParents","__PRIVATE_added","__PRIVATE_lastId","__PRIVATE_TargetIdGenerator","__PRIVATE_isIndexedDbTransactionError","__PRIVATE_getWindow","window","__PRIVATE_asyncQueue","__PRIVATE_targetTimeMs","__PRIVATE_removalCallback","__PRIVATE_Deferred","__PRIVATE_deferred","then","bind","catch","__PRIVATE_delayMs","__PRIVATE_delayedOp","__PRIVATE_DelayedOperation","__PRIVATE_timerHandle","setTimeout","__PRIVATE_handleDelayElapsed","reason","clearTimeout","__PRIVATE_enqueueAndForget","__PRIVATE_ExponentialBackoff","__PRIVATE_backoff","__PRIVATE_skipBackoff","addEventListener","__PRIVATE_visibilityHandler","qs","__PRIVATE__isShuttingDown","enqueue","__PRIVATE_verifyNotFailed","__PRIVATE_enqueueInternal","removeEventListener","__PRIVATE_enqueueEvenAfterShutdown","__PRIVATE_retryableOps","__PRIVATE_retryNextOp","shift","__PRIVATE_backoffAndRun","__PRIVATE_newTail","__PRIVATE_tail","__PRIVATE_operationInProgress","stack","includes","__PRIVATE_timerIdsToSkip","__PRIVATE_createAndSchedule","__PRIVATE_removedOp","__PRIVATE_removeDelayedOperation","__PRIVATE_delayedOperations","__PRIVATE_currentTail","__PRIVATE_lastTimerId","__PRIVATE_drain","a","b","__PRIVATE_wrapInUserErrorIfRecoverable","__PRIVATE_cacheSizeCollectionThreshold","__PRIVATE_percentileToCollect","__PRIVATE_maximumSequenceNumbersToCollect","__PRIVATE_cacheSize","__PRIVATE_LruParams","__PRIVATE_DEFAULT_COLLECTION_PERCENTILE","__PRIVATE_DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT","__PRIVATE_DEFAULT_CACHE_SIZE_BYTES","__PRIVATE_COLLECTION_DISABLED","persistence","__PRIVATE_queryEngine","__PRIVATE_initialUser","__PRIVATE_ObjectMap","t","__PRIVATE_getMutationQueue","__PRIVATE_remoteDocuments","__PRIVATE_getRemoteDocumentCache","__PRIVATE_targetCache","__PRIVATE_getTargetCache","__PRIVATE_localDocuments","__PRIVATE_LocalDocumentsView","__PRIVATE_getIndexManager","__PRIVATE_setLocalDocumentsView","user","__PRIVATE_newMutationQueue","__PRIVATE_newLocalDocuments","runTransaction","txn","__PRIVATE_oldBatches","__PRIVATE_getAllMutationBatches","__PRIVATE_promisedOldBatches","__PRIVATE_newBatches","__PRIVATE_removedBatchIds","__PRIVATE_addedBatchIds","__PRIVATE_changedKeys","__PRIVATE_getDocuments","__PRIVATE_affectedDocuments","yi","gi","vi","__PRIVATE_existingDocs","__PRIVATE_addMutationBatch","__PRIVATE_applyToLocalDocumentSet","Ci","__PRIVATE_affected","__PRIVATE_documentBuffer","__PRIVATE_newChangeBuffer","$i","__PRIVATE_applyWriteToRemoteDocuments","apply","__PRIVATE_performConsistencyCheck","__PRIVATE_affectedKeys","__PRIVATE_lookupMutationBatch","__PRIVATE_removeMutationBatch","__PRIVATE_getHighestUnacknowledgedBatchId","__PRIVATE_getLastRemoteSnapshotVersion","__PRIVATE_remoteVersion","__PRIVATE_newTargetDataByTargetMap","__PRIVATE_targetDataByTarget","__PRIVATE_oldTargetData","__PRIVATE_removeMatchingKeys","__PRIVATE_addMatchingKeys","__PRIVATE_newTargetData","__PRIVATE_withResumeToken","__PRIVATE_withSequenceNumber","__PRIVATE_currentSequenceNumber","__PRIVATE_LocalStoreImpl","__PRIVATE_shouldPersistTargetData","__PRIVATE_updateTargetData","__PRIVATE_changedDocs","__PRIVATE_updatedKeys","__PRIVATE_existingDoc","__PRIVATE_removeEntry","__PRIVATE_addEntry","__PRIVATE_referenceDelegate","__PRIVATE_updateLimboDocument","__PRIVATE_updateRemoteVersion","lastRemoteSnapshotVersion","__PRIVATE_setTargetsMetadata","__PRIVATE_toMicroseconds","__PRIVATE_RESUME_TOKEN_MAX_AGE_MICROS","__PRIVATE_viewChanges","__PRIVATE_viewChange","__PRIVATE_addReference","__PRIVATE_removeReference","e_36","__PRIVATE_updatedTargetData","__PRIVATE_withLastLimboFreeSnapshotVersion","__PRIVATE_afterBatchId","__PRIVATE_getNextMutationBatchAfterBatchId","__PRIVATE_getTargetData","__PRIVATE_cached","__PRIVATE_allocateTargetId","__PRIVATE_addTargetData","__PRIVATE_cachedTargetData","__PRIVATE_targetIdByTarget","__PRIVATE_keepPersistedTargetData","mode","__PRIVATE_usePreviousResults","__PRIVATE_remoteKeys","__PRIVATE_getMatchingKeysForTargetId","_r","__PRIVATE_docKeys","__PRIVATE_promiseChain","__PRIVATE_remoteDoc","__PRIVATE_ackVersion","__PRIVATE_applyToRemoteDocument","__PRIVATE_garbageCollector","__PRIVATE_collect","async","__PRIVATE_ignoreIfPrimaryLeaseLoss","__PRIVATE_DocReference","__PRIVATE_compareByKey","__PRIVATE_compareByTargetId","__PRIVATE_refsByKey","ref","__PRIVATE_refsByTarget","__PRIVATE_removeRef","__PRIVATE_emptyKey","__PRIVATE_startRef","__PRIVATE_endRef","__PRIVATE_forEachInRange","__PRIVATE_firstRef","__PRIVATE_firstAfterOrEqual","__PRIVATE_targetOrBatchId","__PRIVATE_validateNoArgs","functionName","__PRIVATE_formatPlural","__PRIVATE_validateExactNumberOfArgs","__PRIVATE_numberOfArgs","__PRIVATE_validateAtLeastNumberOfArgs","__PRIVATE_minNumberOfArgs","__PRIVATE_validateBetweenNumberOfArgs","__PRIVATE_maxNumberOfArgs","__PRIVATE_validateArgType","__PRIVATE_argument","__PRIVATE_validateType","__PRIVATE_ordinal","__PRIVATE_validateOptionalArgType","__PRIVATE_validateNamedType","__PRIVATE_optionName","__PRIVATE_validateNamedOptionalType","__PRIVATE_validateNamedOptionalPropertyEquals","__PRIVATE_inputName","input","__PRIVATE_expected","__PRIVATE_expectedDescription","__PRIVATE_valueDescription","__PRIVATE_actualDescription","__PRIVATE_validateStringEnum","__PRIVATE_enums","__PRIVATE_isPlainObject","description","getPrototypeOf","substring","Array","__PRIVATE_customObjectName","__PRIVATE_validateDefined","__PRIVATE_validateOptionNames","__PRIVATE_optionNames","__PRIVATE_invalidClassError","__PRIVATE_validatePositiveNumber","num","__PRIVATE_assertUint8ArrayAvailable","__PRIVATE_assertBase64Available","__PRIVATE_byteString","__PRIVATE__byteString","arguments","Blob","fieldNames","__PRIVATE_minNumberOfElements","__PRIVATE__internalPath","__PRIVATE_InternalFieldPath","__PRIVATE_BaseFieldPath","__PRIVATE_RESERVED","__PRIVATE__methodName","__PRIVATE_SerializableFieldValue","context","__PRIVATE_dataSource","__PRIVATE_createError","__PRIVATE_DeleteFieldValueImpl","__PRIVATE_createSentinelChildContext","__PRIVATE_fieldValue","__PRIVATE_arrayElement","__PRIVATE_ParseContext","$r","kr","settings","__PRIVATE_targetDoc","methodName","xr","ignoreUndefinedProperties","FieldTransform","__PRIVATE_ServerTimestampFieldValueImpl","__PRIVATE__elements","__PRIVATE_parseContext","__PRIVATE_parsedElements","__PRIVATE_parseData","arrayUnion","__PRIVATE__operand","__PRIVATE_numericIncrement","__PRIVATE_FieldValueDelegate","__PRIVATE_ArrayUnionFieldValueImpl","__PRIVATE_ArrayRemoveFieldValueImpl","__PRIVATE_NumericIncrementFieldValueImpl","__PRIVATE__delegate","FieldValue","__PRIVATE__toFieldTransform","isFinite","__PRIVATE__lat","__PRIVATE__long","__PRIVATE_newSerializer","__PRIVATE_JsonProtoSerializer","__PRIVATE_RESERVED_FIELD_REGEX","__PRIVATE__databaseId","__PRIVATE__key","__PRIVATE__converter","__PRIVATE_isWrite","__PRIVATE_validatePath","configuration","__PRIVATE_childPath","__PRIVATE_contextWith","__PRIVATE_validatePathSegment","__PRIVATE_hasConverter","Xr","__PRIVATE_parseSetData","__PRIVATE_userDataReader","__PRIVATE_createContext","merge","mergeFields","__PRIVATE_validatePlainObject","__PRIVATE_updateData","__PRIVATE_parseObject","__PRIVATE_validatedFieldPaths","__PRIVATE_stringOrFieldPath","__PRIVATE_fieldPathFromDotSeparatedString","contains","__PRIVATE_fieldMaskContains","__PRIVATE_covers","__PRIVATE_ParsedSetData","__PRIVATE_parseUpdateData","__PRIVATE_fieldMaskPaths","__PRIVATE_childContext","__PRIVATE_childContextForFieldPath","__PRIVATE_parsedValue","mask","__PRIVATE_ParsedUpdateData","__PRIVATE_parseUpdateVarargs","moreFieldsAndValues","__PRIVATE_fieldPathFromArgument","__PRIVATE_parseQueryValue","__PRIVATE_allowArrays","__PRIVATE_looksLikeJsonObject","__PRIVATE_entryIndex","__PRIVATE_parsedEntry","__PRIVATE_childContextForArray","nullValue","fromDate","GeoPoint","__PRIVATE_DocumentKeyReference","__PRIVATE_thisDb","__PRIVATE_otherDb","__PRIVATE_childContextForField","search","__PRIVATE_hasPath","__PRIVATE_hasDocument","uid","__PRIVATE_isAuthenticated","__PRIVATE_otherUser","User","__PRIVATE_authHeaders","Authorization","__PRIVATE_changeListener","__PRIVATE_authProvider","__PRIVATE_tokenListener","__PRIVATE_tokenCounter","currentUser","__PRIVATE_getUser","__PRIVATE_receivedInitialUser","auth","getImmediate","optional","addAuthTokenListener","ao","__PRIVATE_initialTokenCounter","forceRefresh","getToken","__PRIVATE_tokenData","accessToken","__PRIVATE_OAuthToken","removeAuthTokenListener","__PRIVATE_currentUid","getUid","__PRIVATE_gapi","__PRIVATE_sessionIndex","__PRIVATE_FIRST_PARTY","so","headers","X-Goog-AuthUser","__PRIVATE_authHeader","__PRIVATE_getAuthHeaderValueForFirstParty","__PRIVATE_FirstPartyToken","__PRIVATE_connectionTimerId","__PRIVATE_idleTimerId","__PRIVATE_connection","__PRIVATE_credentialsProvider","listener","__PRIVATE_performBackoff","__PRIVATE_isStarted","close","__PRIVATE_isOpen","__PRIVATE_idleTimer","__PRIVATE_handleIdleCloseTimer","__PRIVATE_cancelIdleCheck","stream","send","__PRIVATE_finalState","__PRIVATE_closeCount","__PRIVATE_resetToMax","__PRIVATE_invalidateToken","__PRIVATE_tearDown","__PRIVATE_onClose","__PRIVATE_dispatchIfNotClosed","__PRIVATE_getCloseGuardedDispatcher","token","__PRIVATE_startStream","__PRIVATE_rpcError","__PRIVATE_handleStreamClose","__PRIVATE_startRpc","__PRIVATE_onOpen","onMessage","__PRIVATE_startCloseCount","credentials","__PRIVATE_PersistentStream","__PRIVATE_openStream","__PRIVATE_watchChangeProto","targetChangeType","__PRIVATE_causeProto","status","__PRIVATE_WatchTargetChange","documentChange","__PRIVATE_entityChange","__PRIVATE_DocumentWatchChange","documentDelete","__PRIVATE_docDelete","readTime","documentRemove","__PRIVATE_docRemove","ExistenceFilter","__PRIVATE_ExistenceFilterChange","__PRIVATE_fromWatchChange","snapshot","__PRIVATE_onWatchChange","request","addTarget","labels","goog-listen-tags","__PRIVATE_toListenRequestLabels","__PRIVATE_sendRequest","Uo","__PRIVATE_handshakeComplete_","lastStreamToken","__PRIVATE_writeMutations","__PRIVATE_responseProto","streamToken","commitTime","__PRIVATE_MutationResult","__PRIVATE_fromWriteResults","writeResults","__PRIVATE_onMutationResult","__PRIVATE_onHandshakeComplete","writes","__PRIVATE_terminated","__PRIVATE_rpcName","__PRIVATE_verifyInitialized","__PRIVATE_invokeRPC","__PRIVATE_invokeStreamingRPC","__PRIVATE_datastore","Set","__PRIVATE_ensureCommitNotCalled","__PRIVATE_datastoreImpl","params","response","found","missing","__PRIVATE_fromMaybeDocument","__PRIVATE_recordVersion","write","__PRIVATE_toMutations","__PRIVATE_writtenDocs","__PRIVATE_preconditionForUpdate","__PRIVATE_lastWriteError","__PRIVATE_unwritten","__PRIVATE_readVersions","__PRIVATE_committed","__PRIVATE_docVersion","__PRIVATE_existingVersion","__PRIVATE_none","concat","__PRIVATE_onlineStateHandler","__PRIVATE_watchStreamFailures","__PRIVATE_setAndBroadcast","__PRIVATE_onlineStateTimer","__PRIVATE_logClientOfflineWarningIfNecessary","__PRIVATE_clearOnlineStateTimer","__PRIVATE_newState","__PRIVATE_shouldWarnClientIsOffline","details","__PRIVATE_localStore","__PRIVATE_connectivityMonitor","__PRIVATE_addCallback","__PRIVATE_canUseNetwork","__PRIVATE_restartNetwork","__PRIVATE_onlineStateTracker","__PRIVATE_OnlineStateTracker","__PRIVATE_watchStream","__PRIVATE_PersistentListenStream","ko","__PRIVATE_onWatchStreamOpen","Co","__PRIVATE_onWatchStreamClose","Oo","__PRIVATE_onWatchStreamChange","__PRIVATE_writeStream","__PRIVATE_PersistentWriteStream","__PRIVATE_onWriteStreamOpen","__PRIVATE_onWriteStreamClose","Qo","__PRIVATE_onWriteHandshakeComplete","Wo","enableNetwork","__PRIVATE_offlineCauses","__PRIVATE_enableNetworkInternal","__PRIVATE_shouldStartWatchStream","__PRIVATE_startWatchStream","__PRIVATE_fillWritePipeline","__PRIVATE_disableNetworkInternal","stop","__PRIVATE_writePipeline","__PRIVATE_cleanUpWatchStreamState","__PRIVATE_shutdown","__PRIVATE_listenTargets","__PRIVATE_sendWatchRequest","__PRIVATE_sendUnwatchRequest","__PRIVATE_markIdle","__PRIVATE_syncEngine","__PRIVATE_watchChangeAggregator","__PRIVATE_watch","__PRIVATE_unwatch","__PRIVATE_WatchChangeAggregator","__PRIVATE_handleWatchStreamStart","__PRIVATE_handleWatchStreamFailure","__PRIVATE_handleTargetError","__PRIVATE_disableNetworkUntilRecovery","__PRIVATE_handleDocumentChange","__PRIVATE_handleExistenceFilter","__PRIVATE_handleTargetChange","__PRIVATE_raiseWatchSnapshot","__PRIVATE_enqueueRetryable","__PRIVATE_createRemoteEvent","__PRIVATE_requestTargetData","__PRIVATE_applyRemoteEvent","n_39","__PRIVATE_rejectListen","__PRIVATE_lastBatchIdRetrieved","__PRIVATE_canAddToWritePipeline","__PRIVATE_nextMutationBatch","__PRIVATE_addToWritePipeline","__PRIVATE_shouldStartWriteStream","__PRIVATE_startWriteStream","__PRIVATE_handshakeComplete","__PRIVATE_writeHandshake","t_51","__PRIVATE_success","__PRIVATE_executeWithRecovery","__PRIVATE_applySuccessfulWrite","__PRIVATE_handleWriteError","__PRIVATE_inhibitBackoff","__PRIVATE_rejectFailedWrite","Transaction","__PRIVATE_verifyOperationInProgress","__PRIVATE_handleCredentialChange","isPrimary","activeTargetIds","updateTimeMs","__PRIVATE_LocalClientState","__PRIVATE_localState","__PRIVATE_addQueryTarget","__PRIVATE_queryState","__PRIVATE_removeQueryTarget","onlineState","__PRIVATE__syncedDocuments","__PRIVATE_docComparator","__PRIVATE_documentSet","ga","__PRIVATE_previousChanges","__PRIVATE_changeSet","__PRIVATE_DocumentChangeSet","__PRIVATE_oldDocumentSet","__PRIVATE_newMutatedKeys","__PRIVATE_newDocumentSet","__PRIVATE_needsRefill","__PRIVATE_lastDocInLimit","__PRIVATE_hasLimitToFirst","last","__PRIVATE_firstDocInLimit","__PRIVATE_hasLimitToLast","__PRIVATE_newMaybeDoc","__PRIVATE_oldDoc","__PRIVATE_oldDocHadPendingMutations","__PRIVATE_newDocHasPendingMutations","__PRIVATE_changeApplied","track","__PRIVATE_shouldWaitForSyncedDocument","ya","ba","Ca","Mt","__PRIVATE_updateLimboDocuments","__PRIVATE_getChanges","__PRIVATE_c1","__PRIVATE_c2","__PRIVATE_applyTargetChange","__PRIVATE_limboChanges","__PRIVATE_newSyncState","__PRIVATE_limboDocuments","__PRIVATE_syncState","Na","__PRIVATE_applyChanges","__PRIVATE_oldLimboDocuments","__PRIVATE_shouldBeInLimbo","__PRIVATE_RemovedLimboDocument","__PRIVATE_AddedLimboDocument","__PRIVATE_queryResult","__PRIVATE_computeDocChanges","__PRIVATE_fromInitialDocuments","updateFunction","__PRIVATE_runWithBackOff","__PRIVATE_userPromise","__PRIVATE_tryRunUpdateFunction","commit","__PRIVATE_commitError","__PRIVATE_handleTransactionError","__PRIVATE_userPromiseError","__PRIVATE_retries","__PRIVATE_isRetryableTransactionError","view","__PRIVATE_remoteStore","__PRIVATE_sharedClientState","__PRIVATE_maxConcurrentLimboResolutions","q","__PRIVATE_ReferenceSet","__PRIVATE_forSyncEngine","ru","__PRIVATE__isPrimaryClient","__PRIVATE_syncEngineListener","__PRIVATE_assertSubscribed","__PRIVATE_queryView","__PRIVATE_queryViewsByQuery","__PRIVATE_addLocalQueryTarget","__PRIVATE_computeInitialSnapshot","__PRIVATE_allocateTarget","__PRIVATE_initializeViewAndComputeSnapshot","__PRIVATE_isPrimaryClient","listen","__PRIVATE_executeQuery","__PRIVATE_View","__PRIVATE_viewDocChanges","__PRIVATE_synthesizedTargetChange","__PRIVATE_updateTrackedLimbos","__PRIVATE_QueryView","__PRIVATE_queriesByTarget","__PRIVATE_queries","__PRIVATE_removeLocalQueryTarget","__PRIVATE_isActiveQueryTarget","__PRIVATE_releaseTarget","__PRIVATE_clearQueryState","__PRIVATE_unlisten","__PRIVATE_removeAndCleanupTarget","__PRIVATE_userCallback","__PRIVATE_localWrite","__PRIVATE_addPendingMutation","__PRIVATE_addMutationCallback","__PRIVATE_emitNewSnapsAndNotifyLocalStore","__PRIVATE_TransactionRunner","run","__PRIVATE_limboResolution","__PRIVATE_activeLimboResolutionsByTarget","__PRIVATE_receivedDocument","source","__PRIVATE_newViewSnapshots","__PRIVATE_applyOnlineStateChange","__PRIVATE_onOnlineStateChange","__PRIVATE_setOnlineState","__PRIVATE_updateQueryState","__PRIVATE_limboKey","event","__PRIVATE_activeLimboTargetsByKey","__PRIVATE_pumpEnqueuedLimboResolutions","__PRIVATE_mutationBatchResult","__PRIVATE_acknowledgeBatch","__PRIVATE_processUserCallback","__PRIVATE_triggerPendingWritesCallbacks","__PRIVATE_updateMutationState","__PRIVATE_rejectBatch","__PRIVATE_highestBatchId","__PRIVATE_callbacks","__PRIVATE_pendingWritesCallbacks","__PRIVATE_firestoreError","__PRIVATE_errorMessage","clear","__PRIVATE_newCallbacks","__PRIVATE_mutationUserCallbacks","__PRIVATE_toKey","__PRIVATE_onWatchError","__PRIVATE_limboDocumentRefs","__PRIVATE_removeReferencesForId","__PRIVATE_containsKey","__PRIVATE_removeLimboTarget","__PRIVATE_limboTargetId","__PRIVATE_limboChange","__PRIVATE_trackLimboChange","__PRIVATE_enqueuedLimboResolutions","__PRIVATE_limboTargetIdGenerator","__PRIVATE_LimboResolution","__PRIVATE_INVALID","__PRIVATE_newSnaps","__PRIVATE_docChangesInAllViews","__PRIVATE_queriesProcessed","__PRIVATE_fromSnapshot","__PRIVATE_notifyLocalViewChanges","__PRIVATE_fnName","__PRIVATE_handleUserChange","__PRIVATE_rejectOutstandingPendingWritesCallbacks","__PRIVATE_keySet","__PRIVATE_unionWith","__PRIVATE_syncedDocuments","subscribe","__PRIVATE_firstListen","__PRIVATE_queryInfo","__PRIVATE_QueryListenersInfo","__PRIVATE_viewSnap","onError","listeners","__PRIVATE_onViewSnapshot","__PRIVATE_raiseSnapshotsInSyncEvent","__PRIVATE_lastListen","__PRIVATE_viewSnaps","__PRIVATE_raisedEvent","observer","__PRIVATE_snapshotsInSyncListeners","__PRIVATE_queryObserver","__PRIVATE_snap","includeMetadataChanges","__PRIVATE_raisedInitialEvent","__PRIVATE_shouldRaiseEvent","__PRIVATE_shouldRaiseInitialEvent","__PRIVATE_raiseInitialEvent","__PRIVATE_maybeOnline","__PRIVATE_waitForSyncWhenOnline","__PRIVATE_hasPendingWritesChanged","__PRIVATE_localDocumentsView","__PRIVATE_matchesAllDocuments","__PRIVATE_executeFullCollectionScan","__PRIVATE_previousResults","__PRIVATE_applyQuery","__PRIVATE_updatedResults","__PRIVATE_sortedPreviousResults","__PRIVATE_limboFreeSnapshotVersion","__PRIVATE_docAtLimitEdge","__PRIVATE_nextBatchId","__PRIVATE_MutationBatch","__PRIVATE_batchesByDocumentKey","__PRIVATE_addToCollectionParentIndex","__PRIVATE_findMutationBatch","__PRIVATE_rawIndex","__PRIVATE_indexOfBatchId","__PRIVATE_documentKey","POSITIVE_INFINITY","__PRIVATE_documentKeys","__PRIVATE_uniqueBatchIDs","__PRIVATE_findMutationBatches","prefix","__PRIVATE_immediateChildrenPathLength","__PRIVATE_startPath","__PRIVATE_rowKeyPath","__PRIVATE_batchIDs","__PRIVATE_indexOfExistingBatchId","__PRIVATE_references","__PRIVATE_markPotentiallyOrphaned","__PRIVATE_sizer","__PRIVATE_entry","__PRIVATE_previousSize","__PRIVATE_currentSize","Yu","__PRIVATE_maybeDocument","iterator","__PRIVATE_MemoryRemoteDocumentCache","__PRIVATE_RemoteDocumentChangeBuffer","__PRIVATE_documentCache","__PRIVATE__readTime","__PRIVATE_assertNotApplied","__PRIVATE_bufferedEntry","__PRIVATE_getFromCache","__PRIVATE_getAllFromCache","__PRIVATE_changesApplied","__PRIVATE_forTargetCache","__PRIVATE_highestSequenceNumber","highestTargetId","__PRIVATE_targetIdGenerator","highestListenSequenceNumber","__PRIVATE_saveTargetData","targetCount","upperBound","__PRIVATE_removals","__PRIVATE_removeMatchingKeysForTargetId","__PRIVATE_addReferences","__PRIVATE_removeReferences","__PRIVATE_matchingKeys","__PRIVATE_referencesForId","__PRIVATE_referenceDelegateFactory","__PRIVATE__started","__PRIVATE_MemoryTargetCache","__PRIVATE_MemoryIndexManager","__PRIVATE_documentSize","Rc","__PRIVATE_mutationQueues","__PRIVATE_MemoryMutationQueue","__PRIVATE_transactionOperation","__PRIVATE_MemoryTransaction","__PRIVATE_listenSequence","__PRIVATE_onTransactionStarted","__PRIVATE_onTransactionCommitted","__PRIVATE_toPromise","__PRIVATE_raiseOnCommittedEvent","__PRIVATE_or","__PRIVATE_onCommittedListeners","__PRIVATE_MemoryEagerDelegate","Fc","__PRIVATE__orphanedDocuments","__PRIVATE_localViewReferences","__PRIVATE_orphanedDocuments","cache","__PRIVATE_removeTargetData","__PRIVATE_changeBuffer","__PRIVATE_isReferenced","__PRIVATE_mutationQueuesContainKey","__PRIVATE_sendFn","__PRIVATE_closeFn","__PRIVATE_wrappedOnOpen","__PRIVATE_wrappedOnClose","__PRIVATE_wrappedOnMessage","__PRIVATE_RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","RunQuery","info","__PRIVATE_baseUrl","__PRIVATE_header","url","__PRIVATE_makeUrl","__PRIVATE_xhr","XhrIo","listenOnce","EventType","COMPLETE","getLastErrorCode","ErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","getStatus","getResponseText","__PRIVATE_responseError","__PRIVATE_firestoreErrorCode","__PRIVATE_serverError","toLowerCase","__PRIVATE_jsonObj","__PRIVATE_requestString","Content-Type","__PRIVATE_modifyHeadersForRequest","__PRIVATE_urlParts","__PRIVATE_webchannelTransport","createWebChannelTransport","httpSessionIdParam","initMessageHeaders","messageUrlParams","sendRawJson","supportsCrossDomainXhr","internalChannelParams","forwardChannelRequestTimeoutMs","isMobileCordova","isReactNative","isElectron","isIE","isUWP","isBrowserExtension","httpHeadersOverwriteParam","channel","createWebChannel","__PRIVATE_opened","closed","__PRIVATE_streamBridge","__PRIVATE_StreamBridge","Nc","open","kc","__PRIVATE_unguardedEventListen","param","WebChannel","OPEN","CLOSE","__PRIVATE_callOnClose","WARN","warn","MESSAGE","__PRIVATE_msgData","__PRIVATE_msgDataOrError","__PRIVATE_callOnMessage","__PRIVATE_callOnOpen","__PRIVATE_urlRpcName","__PRIVATE_onNetworkAvailable","__PRIVATE_onNetworkUnavailable","__PRIVATE_configureNetworkMonitoring","__PRIVATE_networkAvailableListener","__PRIVATE_networkUnavailableListener","__PRIVATE_MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE","__PRIVATE_cfg","__PRIVATE_createSharedClientState","__PRIVATE_createPersistence","__PRIVATE_gcScheduler","__PRIVATE_createGarbageCollectionScheduler","__PRIVATE_createLocalStore","__PRIVATE_createDatastore","__PRIVATE_loadConnection","__PRIVATE_createRemoteStore","__PRIVATE_createSyncEngine","__PRIVATE_eventManager","__PRIVATE_createEventManager","__PRIVATE_applyPrimaryState","__PRIVATE_databaseInfo","__PRIVATE_WebChannelConnection","__PRIVATE_EventManager","__PRIVATE_IndexFreeQueryEngine","__PRIVATE_persistenceSettings","__PRIVATE_durable","__PRIVATE_MemoryPersistence","__PRIVATE_factory","__PRIVATE_DatastoreImpl","__PRIVATE_RemoteStore","__PRIVATE_BrowserConnectivityMonitor","__PRIVATE_isAvailable","__PRIVATE_NoopConnectivityMonitor","__PRIVATE_MemorySharedClientState","__PRIVATE_SyncEngineImpl","__PRIVATE_AutoId","__PRIVATE_newId","__PRIVATE_componentProvider","__PRIVATE_verifyNotTerminated","__PRIVATE_initializationDone","__PRIVATE_persistenceResult","__PRIVATE_initialized","__PRIVATE_setChangeListener","__PRIVATE_initializeComponents","__PRIVATE_setNetworkEnabled","initialize","Vs","ul","clientId","cl","Ka","_l","__PRIVATE_eventMgr","__PRIVATE_setDatabaseDeletedListener","terminate","__PRIVATE_canFallback","console","__PRIVATE_MemoryComponentProvider","ll","DOMException","__PRIVATE_isShuttingDown","disableNetwork","__PRIVATE_enqueueAndInitiateShutdown","__PRIVATE_removeChangeListener","__PRIVATE_registerPendingWritesCallback","__PRIVATE_QueryListener","__PRIVATE_clientTerminated","__PRIVATE_readDocument","__PRIVATE_addSnapshotsInSyncListener","__PRIVATE_removeSnapshotsInSyncListener","El","__PRIVATE_scheduleEvent","muted","eventHandler","__PRIVATE_isPartialObserver","__PRIVATE_methods","object","method","timestampsInSnapshots","__PRIVATE_serverTimestampBehavior","__PRIVATE_referenceFactory","__PRIVATE_convertTimestamp","__PRIVATE_convertServerTimestamp","__PRIVATE_convertReference","__PRIVATE_convertGeoPoint","__PRIVATE_convertArray","__PRIVATE_convertObject","__PRIVATE_convertValue","__PRIVATE_getPreviousValue","__PRIVATE_normalizedValue","toDate","__PRIVATE_resourcePath","CACHE_SIZE_UNLIMITED","cacheSizeBytes","__PRIVATE_MINIMUM_CACHE_SIZE_BYTES","experimentalForceLongPolling","__PRIVATE_databaseIdOrApp","__PRIVATE_AsyncQueue","__PRIVATE_ensureClientConfigured","__PRIVATE__firestoreClient","app","__PRIVATE__firebaseApp","Firestore","__PRIVATE_databaseIdFromApp","__PRIVATE__persistenceKey","__PRIVATE__credentials","__PRIVATE_FirebaseCredentialsProvider","external","__PRIVATE_EmptyCredentialsProvider","__PRIVATE__componentProvider","__PRIVATE__settings","__PRIVATE_FirestoreSettings","ql","__PRIVATE__userDataReader","__PRIVATE_UserDataReader","__PRIVATE_settingsLiteral","__PRIVATE_newSettings","__PRIVATE_client","getAuthHeaderValueForFirstParty","__PRIVATE_FirstPartyCredentialsProvider","synchronizeTabs","experimentalForceOwningTab","experimentalTabSynchronization","__PRIVATE_configureClient","Ql","__PRIVATE__queue","__PRIVATE_enqueueAndForgetEvenAfterShutdown","clearPersistence","_removeServiceInstance","jl","waitForPendingWrites","arg","Nl","__PRIVATE_DatabaseInfo","__PRIVATE_makeDatabaseInfo","__PRIVATE_FirestoreClient","__PRIVATE_pathString","CollectionReference","DocumentReference","__PRIVATE_forPath","Query","WriteBatch","SILENT","INFO","VERBOSE","level","__PRIVATE_newLevel","setLogLevel","__PRIVATE_firestoreClient","__PRIVATE_asyncObserver","__PRIVATE_AsyncObserver","__PRIVATE_mute","__PRIVATE__firestore","__PRIVATE__transaction","documentRef","__PRIVATE_validateReference","__PRIVATE_lookup","DocumentSnapshot","__PRIVATE_validateSetOptions","__PRIVATE_convertedValue","__PRIVATE_applyFirestoreDataConverter","__PRIVATE_parsed","__PRIVATE__dataReader","__PRIVATE_fieldOrUpdateData","__PRIVATE_ExternalFieldPath","__PRIVATE_verifyNotCommitted","__PRIVATE__mutations","__PRIVATE__committed","firestore","converter","__PRIVATE_currArg","__PRIVATE_internalOptions","__PRIVATE_userObserver","complete","__PRIVATE__convertToDocSnapshot","__PRIVATE_addDocSnapshotListener","__PRIVATE_validateGetOptions","__PRIVATE_getDocumentFromLocalCache","xu","__PRIVATE_errHandler","__PRIVATE_internalListener","__PRIVATE__document","__PRIVATE__fromCache","__PRIVATE__hasPendingWrites","__PRIVATE_validateSnapshotOptions","QueryDocumentSnapshot","fromFirestore","__PRIVATE_UserDataWriter","__PRIVATE__areTimestampsInSnapshotsEnabled","serverTimestamps","__PRIVATE_toProto","metadata","SnapshotMetadata","__PRIVATE_newQueryFilter","__PRIVATE_dataReader","__PRIVATE_validateDisjunctiveFilterElements","__PRIVATE_referenceList","__PRIVATE_parseDocumentIdValue","create","__PRIVATE_arrayOps","__PRIVATE_disjunctiveOps","__PRIVATE_isArrayOp","__PRIVATE_isDisjunctiveOp","__PRIVATE_existingField","__PRIVATE_validateOrderByAndInequalityMatch","__PRIVATE_conflictingOp","__PRIVATE_findFilterOperator","__PRIVATE_newQueryOrderBy","__PRIVATE_documentIdValue","operator","__PRIVATE_baseQuery","__PRIVATE_inequality","__PRIVATE_validateHasExplicitOrderByForLimitToLast","__PRIVATE__query","opStr","__PRIVATE_newFilters","directionStr","__PRIVATE_newOrderBy","__PRIVATE_docOrField","__PRIVATE_boundFromDocOrFields","components","__PRIVATE_allFields","__PRIVATE_rawValue","__PRIVATE_wrapped","QuerySnapshot","__PRIVATE_addQuerySnapshotListener","__PRIVATE_getDocumentsFromLocalCache","__PRIVATE__originalQuery","__PRIVATE__snapshot","thisArg","__PRIVATE_convertToDocumentImpl","__PRIVATE__cachedChanges","__PRIVATE__cachedChangesIncludeMetadataChanges","oldIndex","newIndex","__PRIVATE_indexTracker","__PRIVATE_resultChangeType","__PRIVATE__path","toFirestore","__PRIVATE_docRef","__PRIVATE_typeDescription","__PRIVATE_validator","__PRIVATE_validateOptionalArrayElements","__PRIVATE_firestoreNamespace","__PRIVATE_registerFirestore","instance","firebase","__PRIVATE_firestoreFactory","registerComponent","Component","container","getProvider","setServiceProps","registerVersion"],"mappings":"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"}